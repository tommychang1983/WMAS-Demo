<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <!--<h1><%= title %></h1>-->
    <!--<p>Welcome to <%= title %></p>-->
  </body>
  <script src="/javascripts/jquery-2.2.4.min.js"></script>
  <script src="/javascripts/three.min.js"></script>
  <script src="https://cdn.rawgit.com/dataarts/dat.gui/master/build/dat.gui.min.js"></script>
  <script src="/javascripts/OrbitControls.js"></script>
  <script src="/javascripts/TransformControls.js"></script>

  <script>
    var scene = new THREE.Scene();
    var x_plane = null;
    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 10000 );
    var renderer = new THREE.WebGLRenderer();
    var slidesNum = 32;
    renderer.setSize( window.innerWidth, window.innerHeight);

    document.body.appendChild( renderer.domElement );
    camera.position.z = 650;


    controls = new THREE.OrbitControls( camera, renderer.domElement );
    controls.damping = 0.2;

//    drawCubic();
//    trackMouseMove();
    dot = null;
    genAxis(scene);
    genOuterBox(scene);
    locCubic(scene,camera);

    var render = function () {
      requestAnimationFrame( render );
      renderer.render(scene, camera);
    };

    render();

    var gui_config = {
      index : 1,
      move:false,
      clear:false,
      hide:false
    }
    gen_gui();

    var cubicObjects = [];

    function locCubic(scene,camera){
      var raycaster = new THREE.Raycaster();
      var mouse = new THREE.Vector2();


      $(document).mousedown(function(event){
        if(!event.altKey)return;
        mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
        mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

        // update the picking ray with the camera and mouse position
        raycaster.setFromCamera( mouse, camera );

        // calculate objects intersecting the picking ray
        /*
         distance – distance between the origin of the ray and the intersection
         point – point of intersection, in world coordinates
         face – intersected face
         faceIndex – index of the intersected face
         indices – indices of vertices comprising the intersected face
         object – the intersected object
         */
        var intersects = raycaster.intersectObjects( scene.children );
        if(intersects.length >0){

          var transformControl = new THREE.TransformControls( camera, renderer.domElement );
          if(dot == undefined){
            var dotGeometry = new THREE.Geometry();
            dotGeometry.vertices.push(new THREE.Vector3( 0, 0, 0));
            var dotMaterial = new THREE.PointCloudMaterial( { size: 1, sizeAttenuation: false } );
            dot = new THREE.PointCloud( dotGeometry, dotMaterial );
            scene.add( dot );
          }

          dot.position.copy(intersects[0].point);

          transformControl.attach(dot)
          scene.add( transformControl );
          cubicObjects.push(transformControl);
//          cubicObjects.push(dot);
          cubicObjects.push(transformControl.annCubic);
          cubicObjects.push(transformControl.egh);

        }

        renderer.render( scene, camera );
      });
    }

    function restoreCubic(){

//        pos = new THREE.Vector3(37.8,29.9,85);
//        scale = new THREE.Vector3(52.2,49.8,31);
//      pos = new THREE.Vector3(-183.24929296,110.331193433,245);
//      scale = new THREE.Vector3(-43.26733-1,-56.8117-1,111-1);
      pos = new THREE.Vector3(-183.24929296,110.331193433,110);
      scale = new THREE.Vector3(-44.26733,-57.8117,-160);
        var transformControl = new THREE.TransformControls( camera, renderer.domElement );

        var dotGeometry = new THREE.Geometry();
//        dotGeometry.vertices.push(new THREE.Vector3(64.7, 55.5, 110));
        dotGeometry.vertices.push(new THREE.Vector3(0, 0, 0));
        var dotMaterial = new THREE.PointCloudMaterial( { size: 1, sizeAttenuation: false} );
        dot = new THREE.PointCloud( dotGeometry, dotMaterial );

        dotPos = pos.clone();
        dotPos.add(scale.clone().divide(new THREE.Vector3(2,2,2)));

        dot.position.copy(dotPos);
        scene.add( dot );
        transformControl.attach(dot);

        transformControl.setAnnCubic(pos,scale);

        scene.add( transformControl );
        cubicObjects.push(transformControl);
//          cubicObjects.push(dot);
        cubicObjects.push(transformControl.annCubic);
        cubicObjects.push(transformControl.egh);

    }

    restoreCubic();

    function genAxis(scene){

      var x_geometry = new THREE.PlaneBufferGeometry( 512, 512);

      var texture = THREE.ImageUtils.loadTexture( "output/ser002img00001.dcm.jpeg" );

      var plane_material  = new THREE.MeshBasicMaterial({ map : texture });

      x_plane = new THREE.Mesh( x_geometry, plane_material );
      x_plane.material.side = THREE.DoubleSide;

//      var outlineMaterial1 = new THREE.MeshBasicMaterial( { color: 0xff0000, side: THREE.BackSide } );
//      var outlineMesh1 = new THREE.Mesh( x_geometry, outlineMaterial1 );
//      outlineMesh1.position = x_geometry.position;
//      outlineMesh1.scale.multiplyScalar(1.05);


      edges = new THREE.EdgesHelper( x_plane, 0x00ff00 );
//      edges.scale.multiplyScalar(1.0005);
//      edges.matrixAutoUpdate = true;

      scene.add( x_plane );

      scene.add( edges );

      $(document).keydown(function(event){
        key = event.which;
        if(key == 40 && gui_config.index <slidesNum){
          //down
          gui_config.index = gui_config.index+1
          moveSlide(gui_config.index);
        }else if(key ==38 && gui_config.index >1){
          //up
          gui_config.index = gui_config.index - 1;
          moveSlide(gui_config.index);
        }
        event.preventDefault();
        event.stopPropagation();

      });

    }

    function genOuterBox(scene){
      var geometry = new THREE.BoxGeometry( 512, 512, (slidesNum-1)*10 );
      var material = new THREE.MeshBasicMaterial( {color: 0x00ff00,wireframe:true} );
      var cube = new THREE.Mesh( geometry, material );

      var egh = new THREE.EdgesHelper( cube, 0x00ffff );
      egh.material.linewidth = 1;
      egh.position.setZ((slidesNum-1)*10/2);
      egh.matrixAutoUpdate = true;

      scene.add( egh );
    }

    function moveSlide(id){
      sId = ("00"+parseInt(id)).slice(-2);
      x_plane.material.map = THREE.ImageUtils.loadTexture( "output/ser002img000"+sId+".dcm.jpeg" );
      x_plane.material.needsUpdate = true;
      x_plane.position.setZ((id-1)*10);

    }
    function gen_gui(){
      var gui = new dat.GUI();
      var idxController = gui.add(gui_config,"index",1,slidesNum).step(1).listen();
      var moveController = gui.add(gui_config,"move").listen();
      var clearController = gui.add(gui_config,"clear").listen();
      var hideController = gui.add(gui_config,"hide").listen();
      idxController.onChange(function(value){
        moveSlide(value);
      })

      clearController.onChange(function(value){
        if(value == true){
          for(oid in cubicObjects){
            scene.remove(cubicObjects[oid]);
          }

          gui_config.clear = false;

        }
      })
      hideController.onChange(function(value){
        if(value == true){
          for(oid in cubicObjects){
            cubicObjects[oid].visible = false;
          }
        }else{
          for(oid in cubicObjects){
            cubicObjects[oid].visible = true;
          }
        }
      })

    }


  </script>
</html>
