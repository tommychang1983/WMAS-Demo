{"version":3,"sources":["node_modules/browser-pack/_prelude.js","external/scripts/jpeg.js","external/scripts/jpx.js","node_modules/assert/assert.js","node_modules/const-ninf-float32/lib/index.js","node_modules/const-pinf-float32/lib/index.js","node_modules/dicom-parser/dist/dicomParser.js","node_modules/inherits/inherits_browser.js","node_modules/jpeg-lossless-decoder-js/src/component-spec.js","node_modules/jpeg-lossless-decoder-js/src/data-stream.js","node_modules/jpeg-lossless-decoder-js/src/decoder.js","node_modules/jpeg-lossless-decoder-js/src/frame-header.js","node_modules/jpeg-lossless-decoder-js/src/huffman-table.js","node_modules/jpeg-lossless-decoder-js/src/main.js","node_modules/jpeg-lossless-decoder-js/src/quantization-table.js","node_modules/jpeg-lossless-decoder-js/src/scan-component.js","node_modules/jpeg-lossless-decoder-js/src/scan-header.js","node_modules/jpeg-lossless-decoder-js/src/utils.js","node_modules/math-abs/lib/index.js","node_modules/math-ceil/lib/index.js","node_modules/math-float32-to-binary-string/lib/div2.js","node_modules/math-float32-to-binary-string/lib/index.js","node_modules/math-float32-to-binary-string/lib/mult2.js","node_modules/math-floor/lib/index.js","node_modules/nifti-reader-js/src/nifti.js","node_modules/nifti-reader-js/src/nifti1.js","node_modules/nifti-reader-js/src/nifti2.js","node_modules/nifti-reader-js/src/utilities.js","node_modules/nrrd-js/nrrd.js","node_modules/pako/index.js","node_modules/pako/lib/deflate.js","node_modules/pako/lib/inflate.js","node_modules/pako/lib/utils/common.js","node_modules/pako/lib/utils/strings.js","node_modules/pako/lib/zlib/adler32.js","node_modules/pako/lib/zlib/constants.js","node_modules/pako/lib/zlib/crc32.js","node_modules/pako/lib/zlib/deflate.js","node_modules/pako/lib/zlib/gzheader.js","node_modules/pako/lib/zlib/inffast.js","node_modules/pako/lib/zlib/inflate.js","node_modules/pako/lib/zlib/inftrees.js","node_modules/pako/lib/zlib/messages.js","node_modules/pako/lib/zlib/trees.js","node_modules/pako/lib/zlib/zstream.js","node_modules/process/browser.js","node_modules/util/support/isBufferBrowser.js","node_modules/util/util.js","node_modules/utils-left-pad-string/lib/index.js","node_modules/utils-repeat-string/lib/index.js","node_modules/utils-right-pad-string/lib/index.js","node_modules/validate.io-integer/lib/index.js","node_modules/validate.io-nonnegative-integer/lib/index.js","node_modules/validate.io-number/lib/index.js","node_modules/validate.io-string-primitive/lib/index.js","src/ami.js","src/cameras/cameras.js","src/cameras/cameras.orthographic.js","src/controls/controls.js","src/controls/controls.trackball.js","src/controls/controls.trackballortho.js","src/core/core.intersections.js","src/core/core.js","src/core/core.pack.js","src/core/core.utils.js","src/core/core.validators.js","src/geometries/geometries.js","src/geometries/geometries.slice.js","src/geometries/geometries.voxel.js","src/helpers/helpers.border.js","src/helpers/helpers.boundingbox.js","src/helpers/helpers.js","src/helpers/helpers.lut.js","src/helpers/helpers.progressbar.js","src/helpers/helpers.slice.js","src/helpers/helpers.stack.js","src/helpers/helpers.volumerendering.js","src/helpers/helpers.voxel.js","src/loaders/loaders.base.js","src/loaders/loaders.js","src/loaders/loaders.volume.js","src/models/models.base.js","src/models/models.frame.js","src/models/models.js","src/models/models.series.js","src/models/models.stack.js","src/models/models.voxel.js","src/parsers/parsers.dicom.js","src/parsers/parsers.js","src/parsers/parsers.nifti.js","src/parsers/parsers.nrrd.js","src/parsers/parsers.volume.js","src/shaders/shaders.data.js","src/shaders/shaders.js","src/shaders/shaders.raycasting.js","src/widgets/widgets.js","src/widgets/widgets.voxelProbe.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzjxlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlj2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9tCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdxXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzruDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxtvUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3FA;AACA;AACA;AACA;AACA;AACA;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1kpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7CA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;kBAEc,AACZ;qBADY,AAEZ;uBAFY,AAGZ;eAHY,AAIZ;2BAJY,AAKZ;qBALY,AAMZ;qBANY,AAOZ;mBAPY,AAQZ;qBARY,AASZ;qBATY,AAUZ;qBAVY;;;AAad,OAAA,AAAO,QAAP,AAAe,IAAf,AAAmB;;;;;;;;;ACxBnB;;;;;;;;;;;kBAKe,AACb;0BADa;;;;;;;;;;;;;;;;;;;;;;ACLf;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYqB;iCACnB;;WADmB,AACnB,oBAAA,AAAY,MAAZ,AAAkB,OAAlB,AAAyB,KAAzB,AAA8B,QAA9B,AAAsC,MAAtC,AAA4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","file":"ami.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// jshint ignore: start\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/*\n Copyright 2011 notmasteryet\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n\nvar ColorSpace = {Unkown: 0, Grayscale: 1, AdobeRGB: 2, RGB: 3, CYMK: 4};\nvar JpegImage = (function jpegImage() {\n  \"use strict\";\n  var dctZigZag = new Int32Array([\n    0,\n    1, 8,\n    16, 9, 2,\n    3, 10, 17, 24,\n    32, 25, 18, 11, 4,\n    5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13, 6,\n    7, 14, 21, 28, 35, 42, 49, 56,\n    57, 50, 43, 36, 29, 22, 15,\n    23, 30, 37, 44, 51, 58,\n    59, 52, 45, 38, 31,\n    39, 46, 53, 60,\n    61, 54, 47,\n    55, 62,\n    63\n  ]);\n\n  var dctCos1 = 4017;   // cos(pi/16)\n  var dctSin1 = 799;   // sin(pi/16)\n  var dctCos3 = 3406;   // cos(3*pi/16)\n  var dctSin3 = 2276;   // sin(3*pi/16)\n  var dctCos6 = 1567;   // cos(6*pi/16)\n  var dctSin6 = 3784;   // sin(6*pi/16)\n  var dctSqrt2 = 5793;   // sqrt(2)\n  var dctSqrt1d2 = 2896;  // sqrt(2) / 2\n\n  function constructor() {\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1])\n      length--;\n    code.push({children: [], index: 0});\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n        while (p.index > 0) {\n          p = code.pop();\n        }\n        p.index++;\n        code.push(p);\n        while (code.length <= i) {\n          code.push(q = {children: [], index: 0});\n          p.children[p.index] = q.children;\n          p = q;\n        }\n        k++;\n      }\n      if (i + 1 < length) {\n        // p here points to last code\n        code.push(q = {children: [], index: 0});\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n    return code[0].children;\n  }\n\n  function getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n  }\n\n  function decodeScan(data, offset,\n                      frame, components, resetInterval,\n                      spectralStart, spectralEnd,\n                      successivePrev, successive) {\n    var precision = frame.precision;\n    var samplesPerLine = frame.samplesPerLine;\n    var scanLines = frame.scanLines;\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var maxH = frame.maxH, maxV = frame.maxV;\n\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return (bitsData >> bitsCount) & 1;\n      }\n      bitsData = data[offset++];\n      if (bitsData == 0xFF) {\n        var nextByte = data[offset++];\n        if (nextByte) {\n          throw \"unexpected marker: \" + ((bitsData << 8) | nextByte).toString(16);\n        }\n        // unstuff 0\n      }\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n\n    function decodeHuffman(tree) {\n      var node = tree;\n      var bit;\n      while ((bit = readBit()) !== null) {\n        node = node[bit];\n        if (typeof node === 'number')\n          return node;\n        if (typeof node !== 'object')\n          throw \"invalid huffman sequence\";\n      }\n      return null;\n    }\n\n    function receive(length) {\n      var n = 0;\n      while (length > 0) {\n        var bit = readBit();\n        if (bit === null)\n          return;\n        n = (n << 1) | bit;\n        length--;\n      }\n      return n;\n    }\n\n    function receiveAndExtend(length) {\n      var n = receive(length);\n      if (n >= 1 << (length - 1))\n        return n;\n      return n + (-1 << length) + 1;\n    }\n\n    function decodeBaseline(component, offset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      component.blockData[offset] = (component.pred += diff);\n      var k = 1;\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15)\n            break;\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[offset + z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n\n    function decodeDCFirst(component, offset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n      component.blockData[offset] = (component.pred += diff);\n    }\n\n    function decodeDCSuccessive(component, offset) {\n      component.blockData[offset] |= readBit() << successive;\n    }\n\n    var eobrun = 0;\n    function decodeACFirst(component, offset) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n      var k = spectralStart, e = spectralEnd;\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, offset) {\n      var k = spectralStart, e = spectralEnd, r = 0;\n      while (k <= e) {\n        var z = dctZigZag[k];\n        switch (successiveACState) {\n          case 0: // initial state\n            var rs = decodeHuffman(component.huffmanTableAC);\n            var s = rs & 15;\n            r = rs >> 4;\n            if (s === 0) {\n              if (r < 15) {\n                eobrun = receive(r) + (1 << r);\n                successiveACState = 4;\n              } else {\n                r = 16;\n                successiveACState = 1;\n              }\n            } else {\n              if (s !== 1)\n                throw \"invalid ACn encoding\";\n              successiveACNextValue = receiveAndExtend(s);\n              successiveACState = r ? 2 : 3;\n            }\n            continue;\n          case 1: // skipping r zero items\n          case 2:\n            if (component.blockData[offset + z]) {\n              component.blockData[offset + z] += (readBit() << successive);\n            } else {\n              r--;\n              if (r === 0)\n                successiveACState = successiveACState == 2 ? 3 : 0;\n            }\n            break;\n          case 3: // set value for a zero item\n            if (component.blockData[offset + z]) {\n              component.blockData[offset + z] += (readBit() << successive);\n            } else {\n              component.blockData[offset + z] = successiveACNextValue << successive;\n              successiveACState = 0;\n            }\n            break;\n          case 4: // eob\n            if (component.blockData[offset + z]) {\n              component.blockData[offset + z] += (readBit() << successive);\n            }\n            break;\n        }\n        k++;\n      }\n      if (successiveACState === 4) {\n        eobrun--;\n        if (eobrun === 0)\n          successiveACState = 0;\n      }\n    }\n\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = (mcu / mcusPerLine) | 0;\n      var mcuCol = mcu % mcusPerLine;\n      var blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, offset);\n    }\n\n    function decodeBlock(component, decode, mcu) {\n      var blockRow = (mcu / component.blocksPerLine) | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, offset);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n      if (spectralStart === 0)\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      else\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength == 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) {\n      resetInterval = mcuExpected;\n    }\n\n    var h, v;\n    while (mcu < mcuExpected) {\n      // reset interval stuff\n      for (i = 0; i < componentsLength; i++) {\n        components[i].pred = 0;\n      }\n      eobrun = 0;\n\n      if (componentsLength == 1) {\n        component = components[0];\n        for (n = 0; n < resetInterval; n++) {\n          decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (n = 0; n < resetInterval; n++) {\n          for (i = 0; i < componentsLength; i++) {\n            component = components[i];\n            h = component.h;\n            v = component.v;\n            for (j = 0; j < v; j++) {\n              for (k = 0; k < h; k++) {\n                decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n        }\n      }\n\n      // find marker\n      bitsCount = 0;\n      marker = (data[offset] << 8) | data[offset + 1];\n      if (marker <= 0xFF00) {\n        throw \"marker was not found\";\n      }\n\n      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n        offset += 2;\n      } else {\n        break;\n      }\n    }\n\n    return offset - startOffset;\n  }\n\n  // A port of poppler's IDCT method which in turn is taken from:\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n  //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n  //   988-991.\n  function quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable;\n    var v0, v1, v2, v3, v4, v5, v6, v7, t;\n    var i;\n\n    // dequant\n    for (i = 0; i < 64; i++) {\n      p[i] = component.blockData[blockBufferOffset + i] * qt[i];\n    }\n\n    // inverse DCT on rows\n    for (i = 0; i < 8; ++i) {\n      var row = 8 * i;\n\n      // check for all-zero AC coefficients\n      if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0 &&\n        p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0 &&\n        p[7 + row] === 0) {\n        t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n        p[0 + row] = t;\n        p[1 + row] = t;\n        p[2 + row] = t;\n        p[3 + row] = t;\n        p[4 + row] = t;\n        p[5 + row] = t;\n        p[6 + row] = t;\n        p[7 + row] = t;\n        continue;\n      }\n\n      // stage 4\n      v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n      v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n      v2 = p[2 + row];\n      v3 = p[6 + row];\n      v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n      v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n      v5 = p[3 + row] << 4;\n      v6 = p[5 + row] << 4;\n\n      // stage 3\n      t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n      v7 = t;\n      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[0 + row] = v0 + v7;\n      p[7 + row] = v0 - v7;\n      p[1 + row] = v1 + v6;\n      p[6 + row] = v1 - v6;\n      p[2 + row] = v2 + v5;\n      p[5 + row] = v2 - v5;\n      p[3 + row] = v3 + v4;\n      p[4 + row] = v3 - v4;\n    }\n\n    // inverse DCT on columns\n    for (i = 0; i < 8; ++i) {\n      var col = i;\n\n      // check for all-zero AC coefficients\n      if (p[1 * 8 + col] === 0 && p[2 * 8 + col] === 0 && p[3 * 8 + col] === 0 &&\n        p[4 * 8 + col] === 0 && p[5 * 8 + col] === 0 && p[6 * 8 + col] === 0 &&\n        p[7 * 8 + col] === 0) {\n        t = (dctSqrt2 * p[i + 0] + 8192) >> 14;\n        p[0 * 8 + col] = t;\n        p[1 * 8 + col] = t;\n        p[2 * 8 + col] = t;\n        p[3 * 8 + col] = t;\n        p[4 * 8 + col] = t;\n        p[5 * 8 + col] = t;\n        p[6 * 8 + col] = t;\n        p[7 * 8 + col] = t;\n        continue;\n      }\n\n      // stage 4\n      v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;\n      v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;\n      v2 = p[2 * 8 + col];\n      v3 = p[6 * 8 + col];\n      v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;\n      v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;\n      v5 = p[3 * 8 + col];\n      v6 = p[5 * 8 + col];\n\n      // stage 3\n      t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n      v7 = t;\n      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[0 * 8 + col] = v0 + v7;\n      p[7 * 8 + col] = v0 - v7;\n      p[1 * 8 + col] = v1 + v6;\n      p[6 * 8 + col] = v1 - v6;\n      p[2 * 8 + col] = v2 + v5;\n      p[5 * 8 + col] = v2 - v5;\n      p[3 * 8 + col] = v3 + v4;\n      p[4 * 8 + col] = v3 - v4;\n    }\n\n    // convert to 8-bit integers\n    for (i = 0; i < 64; ++i) {\n      var index = blockBufferOffset + i;\n      var q = p[i];\n      q = (q <= -2056 / component.bitConversion) ? 0 :\n        (q >= 2024 / component.bitConversion) ? 255 / component.bitConversion :\n        (q + 2056 / component.bitConversion) >> 4;\n      component.blockData[index] = q;\n    }\n  }\n\n  function buildComponentData(frame, component) {\n    var lines = [];\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var samplesPerLine = blocksPerLine << 3;\n    var computationBuffer = new Int32Array(64);\n\n    var i, j, ll = 0;\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        quantizeAndInverse(component, offset, computationBuffer);\n      }\n    }\n    return component.blockData;\n  }\n\n  function clampToUint8(a) {\n    return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;\n  }\n\n  constructor.prototype = {\n    load: function load(path) {\n      var handleData = (function (data) {\n        this.parse(data);\n        if (this.onload)\n          this.onload();\n      }).bind(this);\n\n      if (path.indexOf(\"data:\") > -1) {\n        var offset = path.indexOf(\"base64,\") + 7;\n        var data = atob(path.substring(offset));\n        var arr = new Uint8Array(data.length);\n        for (var i = data.length - 1; i >= 0; i--) {\n          arr[i] = data.charCodeAt(i);\n        }\n        handleData(data);\n      } else {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", path, true);\n        xhr.responseType = \"arraybuffer\";\n        xhr.onload = (function () {\n          // TODO catch parse error\n          var data = new Uint8Array(xhr.response);\n          handleData(data);\n        }).bind(this);\n        xhr.send(null);\n      }\n    },\n    parse: function parse(data) {\n\n      function readUint16() {\n        var value = (data[offset] << 8) | data[offset + 1];\n        offset += 2;\n        return value;\n      }\n\n      function readDataBlock() {\n        var length = readUint16();\n        var array = data.subarray(offset, offset + length - 2);\n        offset += array.length;\n        return array;\n      }\n\n      function prepareComponents(frame) {\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n        for (var i = 0; i < frame.components.length; i++) {\n          component = frame.components[i];\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\n          var blocksPerLineForMcu = mcusPerLine * component.h;\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\n\n          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n          component.blockData = new Int16Array(blocksBufferSize);\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n        }\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n\n      var offset = 0, length = data.length;\n      var jfif = null;\n      var adobe = null;\n      var pixels = null;\n      var frame, resetInterval;\n      var quantizationTables = [];\n      var huffmanTablesAC = [], huffmanTablesDC = [];\n      var fileMarker = readUint16();\n      if (fileMarker != 0xFFD8) { // SOI (Start of Image)\n        throw \"SOI not found\";\n      }\n\n      fileMarker = readUint16();\n      while (fileMarker != 0xFFD9) { // EOI (End of image)\n        var i, j, l;\n        switch (fileMarker) {\n          case 0xFFE0: // APP0 (Application Specific)\n          case 0xFFE1: // APP1\n          case 0xFFE2: // APP2\n          case 0xFFE3: // APP3\n          case 0xFFE4: // APP4\n          case 0xFFE5: // APP5\n          case 0xFFE6: // APP6\n          case 0xFFE7: // APP7\n          case 0xFFE8: // APP8\n          case 0xFFE9: // APP9\n          case 0xFFEA: // APP10\n          case 0xFFEB: // APP11\n          case 0xFFEC: // APP12\n          case 0xFFED: // APP13\n          case 0xFFEE: // APP14\n          case 0xFFEF: // APP15\n          case 0xFFFE: // COM (Comment)\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xFFE0) {\n              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&\n                appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\\x00'\n                jfif = {\n                  version: {major: appData[5], minor: appData[6]},\n                  densityUnits: appData[7],\n                  xDensity: (appData[8] << 8) | appData[9],\n                  yDensity: (appData[10] << 8) | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n            // TODO APP1 - Exif\n            if (fileMarker === 0xFFEE) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&\n                appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\\x00'\n                adobe = {\n                  version: appData[6],\n                  flags0: (appData[7] << 8) | appData[8],\n                  flags1: (appData[9] << 8) | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n            break;\n\n          case 0xFFDB: // DQT (Define Quantization Tables)\n            var quantizationTablesLength = readUint16();\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Int32Array(64);\n              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n                for (j = 0; j < 64; j++) {\n                  var z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\n                for (j = 0; j < 64; j++) {\n                  var zz = dctZigZag[j];\n                  tableData[zz] = readUint16();\n                }\n              } else\n                throw \"DQT: invalid table spec\";\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n            break;\n\n          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\n            if (frame) {\n              throw \"Only single frame JPEGs supported\";\n            }\n            readUint16(); // skip data length\n            frame = {};\n            frame.extended = (fileMarker === 0xFFC1);\n            frame.progressive = (fileMarker === 0xFFC2);\n            frame.precision = data[offset++];\n            frame.scanLines = readUint16();\n            frame.samplesPerLine = readUint16();\n            frame.components = [];\n            frame.componentIds = {};\n            var componentsCount = data[offset++], componentId;\n            var maxH = 0, maxV = 0;\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n              if (maxH < h)\n                maxH = h;\n              if (maxV < v)\n                maxV = v;\n              var qId = data[offset + 2];\n              l = frame.components.push({\n                h: h,\n                v: v,\n                quantizationTable: quantizationTables[qId],\n                quantizationTableId: qId,\n                bitConversion: 255 / ((1 << frame.precision) - 1)\n              });\n              frame.componentIds[componentId] = l - 1;\n              offset += 3;\n            }\n            frame.maxH = maxH;\n            frame.maxV = maxV;\n            prepareComponents(frame);\n            break;\n\n          case 0xFFC4: // DHT (Define Huffman Tables)\n            var huffmanLength = readUint16();\n            for (i = 2; i < huffmanLength; ) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n              for (j = 0; j < 16; j++, offset++)\n                codeLengthSum += (codeLengths[j] = data[offset]);\n              var huffmanValues = new Uint8Array(codeLengthSum);\n              for (j = 0; j < codeLengthSum; j++, offset++)\n                huffmanValues[j] = data[offset];\n              i += 17 + codeLengthSum;\n\n              ((huffmanTableSpec >> 4) === 0 ?\n                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\n                buildHuffmanTable(codeLengths, huffmanValues);\n            }\n            break;\n\n          case 0xFFDD: // DRI (Define Restart Interval)\n            readUint16(); // skip data length\n            resetInterval = readUint16();\n            break;\n\n          case 0xFFDA: // SOS (Start of Scan)\n            var scanLength = readUint16();\n            var selectorsCount = data[offset++];\n            var components = [], component;\n            for (i = 0; i < selectorsCount; i++) {\n              var componentIndex = frame.componentIds[data[offset++]];\n              component = frame.components[componentIndex];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n            var processed = decodeScan(data, offset,\n              frame, components, resetInterval,\n              spectralStart, spectralEnd,\n              successiveApproximation >> 4, successiveApproximation & 15);\n            offset += processed;\n            break;\n          default:\n            if (data[offset - 3] == 0xFF &&\n              data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n              // could be incorrect encoding -- last 0xFF byte of the previous\n              // block was eaten by the encoder\n              offset -= 3;\n              break;\n            }\n            throw \"unknown JPEG marker \" + fileMarker.toString(16);\n        }\n        fileMarker = readUint16();\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n      switch (frame.components.length)\n      {\n        case 1:\n          this.colorspace = ColorSpace.Grayscale;\n          break;\n        case 3:\n          if (this.adobe)\n            this.colorspace = ColorSpace.AdobeRGB;\n          else\n            this.colorspace = ColorSpace.RGB;\n          break;\n        case 4:\n          this.colorspace = ColorSpace.CYMK;\n          break;\n        default:\n          this.colorspace = ColorSpace.Unknown;\n      }\n      for (var i = 0; i < frame.components.length; i++) {\n        var component = frame.components[i];\n        if (!component.quantizationTable && component.quantizationTableId !== null)\n          component.quantizationTable = quantizationTables[component.quantizationTableId];\n        this.components.push({\n          output: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV,\n          blocksPerLine: component.blocksPerLine,\n          blocksPerColumn: component.blocksPerColumn,\n          bitConversion: component.bitConversion\n        });\n      }\n    },\n    getData16: function getData16(width, height) {\n      if (this.components.length !== 1)\n        throw 'Unsupported color mode';\n      var scaleX = this.width / width, scaleY = this.height / height;\n\n      var component, componentScaleX, componentScaleY;\n      var x, y, i;\n      var offset = 0;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      var data = new Uint16Array(dataLength);\n      var componentLine;\n\n      // lineData is reused for all components. Assume first component is\n      // the biggest\n      var lineData = new Uint16Array((this.components[0].blocksPerLine << 3) *\n      this.components[0].blocksPerColumn * 8);\n\n      // First construct image data ...\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        var blocksPerLine = component.blocksPerLine;\n        var blocksPerColumn = component.blocksPerColumn;\n        var samplesPerLine = blocksPerLine << 3;\n\n        var j, k, ll = 0;\n        var lineOffset = 0;\n        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n          var scanLine = blockRow << 3;\n          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n            var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n            var offset = 0, sample = blockCol << 3;\n            for (j = 0; j < 8; j++) {\n              var lineOffset = (scanLine + j) * samplesPerLine;\n              for (k = 0; k < 8; k++) {\n                lineData[lineOffset + sample + k] =\n                  component.output[bufferOffset + offset++];\n              }\n            }\n          }\n        }\n\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n\n        var cx, cy;\n        var index;\n        for (y = 0; y < height; y++) {\n          for (x = 0; x < width; x++) {\n            cy = 0 | (y * componentScaleY);\n            cx = 0 | (x * componentScaleX);\n            index = cy * samplesPerLine + cx;\n            data[offset] = lineData[index];\n            offset += numComponents;\n          }\n        }\n      }\n      return data;\n    },\n    getData: function getData(width, height) {\n      var scaleX = this.width / width, scaleY = this.height / height;\n\n      var component, componentScaleX, componentScaleY;\n      var x, y, i;\n      var offset = 0;\n      var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n      var colorTransform;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      var data = new Uint8Array(dataLength);\n      var componentLine;\n\n      // lineData is reused for all components. Assume first component is\n      // the biggest\n      var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) *\n      this.components[0].blocksPerColumn * 8);\n\n      // First construct image data ...\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        var blocksPerLine = component.blocksPerLine;\n        var blocksPerColumn = component.blocksPerColumn;\n        var samplesPerLine = blocksPerLine << 3;\n\n        var j, k, ll = 0;\n        var lineOffset = 0;\n        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n          var scanLine = blockRow << 3;\n          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n            var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n            var offset = 0, sample = blockCol << 3;\n            for (j = 0; j < 8; j++) {\n              var lineOffset = (scanLine + j) * samplesPerLine;\n              for (k = 0; k < 8; k++) {\n                lineData[lineOffset + sample + k] =\n                  component.output[bufferOffset + offset++] * component.bitConversion;\n              }\n            }\n          }\n        }\n\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n\n        var cx, cy;\n        var index;\n        for (y = 0; y < height; y++) {\n          for (x = 0; x < width; x++) {\n            cy = 0 | (y * componentScaleY);\n            cx = 0 | (x * componentScaleX);\n            index = cy * samplesPerLine + cx;\n            data[offset] = lineData[index];\n            offset += numComponents;\n          }\n        }\n      }\n\n      // ... then transform colors, if necessary\n      switch (numComponents) {\n        case 1:\n        case 2:\n          break;\n        // no color conversion for one or two compoenents\n\n        case 3:\n          // The default transform for three components is true\n          colorTransform = true;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.colorTransform !== 'undefined')\n            colorTransform = !!this.colorTransform;\n\n          if (colorTransform) {\n            for (i = 0; i < dataLength; i += numComponents) {\n              Y = data[i    ];\n              Cb = data[i + 1];\n              Cr = data[i + 2];\n\n              R = clampToUint8(Y - 179.456 + 1.402 * Cr);\n              G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\n              B = clampToUint8(Y - 226.816 + 1.772 * Cb);\n\n              data[i    ] = R;\n              data[i + 1] = G;\n              data[i + 2] = B;\n            }\n          }\n          break;\n        case 4:\n          if (!this.adobe)\n            throw 'Unsupported color mode (4 components)';\n          // The default transform for four components is false\n          colorTransform = false;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.colorTransform !== 'undefined')\n            colorTransform = !!this.colorTransform;\n\n          if (colorTransform) {\n            for (i = 0; i < dataLength; i += numComponents) {\n              Y = data[i];\n              Cb = data[i + 1];\n              Cr = data[i + 2];\n\n              C = clampToUint8(434.456 - Y - 1.402 * Cr);\n              M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\n              Y = clampToUint8(481.816 - Y - 1.772 * Cb);\n\n              data[i    ] = C;\n              data[i + 1] = M;\n              data[i + 2] = Y;\n              // K is unchanged\n            }\n          }\n          break;\n        default:\n          throw 'Unsupported color mode';\n      }\n      return data;\n    }\n  };\n\n  return constructor;\n})();\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = JpegImage;\n}","/*! image-JPEG2000 - v0.3.1 - 2015-08-26 | https://github.com/OHIF/image-JPEG2000 */\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals ArithmeticDecoder, globalScope, log2, readUint16, readUint32,\n           info, warn */\n\n'use strict';\n\nvar JpxImage = (function JpxImageClosure() {\n  // Table E.1\n  var SubbandsGainLog2 = {\n    'LL': 0,\n    'LH': 1,\n    'HL': 1,\n    'HH': 2\n  };\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n\n      var head = readUint16(data, 0);\n      // No box header, immediate start of codestream (SOC)\n      if (head === 0xFF4F) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0, length = data.length;\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = readUint32(data, position);\n        var tbox = readUint32(data, position + 4);\n        position += headerSize;\n        if (lbox === 1) {\n          // XLBox: read UInt64 according to spec.\n          // JavaScript's int precision of 53 bit should be sufficient here.\n          lbox = readUint32(data, position) * 4294967296 +\n                 readUint32(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n        if (lbox < headerSize) {\n          throw new Error('JPX Error: Invalid box field size');\n        }\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n        switch (tbox) {\n          case 0x6A703268: // 'jp2h'\n            jumpDataLength = false; // parsing child boxes\n            break;\n          case 0x636F6C72: // 'colr'\n            // Colorspaces are not used, the CS from the PDF is used.\n            var method = data[position];\n            var precedence = data[position + 1];\n            var approximation = data[position + 2];\n            if (method === 1) {\n              // enumerated colorspace\n              var colorspace = readUint32(data, position + 3);\n              switch (colorspace) {\n                case 16: // this indicates a sRGB colorspace\n                case 17: // this indicates a grayscale colorspace\n                case 18: // this indicates a YUV colorspace\n                  break;\n                default:\n                  warn('Unknown colorspace ' + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              info('ICC profile not supported');\n            }\n            break;\n          case 0x6A703263: // 'jp2c'\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n          case 0x6A502020: // 'jP\\024\\024'\n            if (0x0d0a870a !== readUint32(data, position)) {\n              warn('Invalid JP2 signature');\n            }\n            break;\n          // The following header types are valid but currently not used:\n          case 0x6A501A1A: // 'jP\\032\\032'\n          case 0x66747970: // 'ftyp'\n          case 0x72726571: // 'rreq'\n          case 0x72657320: // 'res '\n          case 0x69686472: // 'ihdr'\n            break;\n          default:\n            var headerType = String.fromCharCode((tbox >> 24) & 0xFF,\n                                                 (tbox >> 16) & 0xFF,\n                                                 (tbox >> 8) & 0xFF,\n                                                 tbox & 0xFF);\n            warn('Unsupported header type ' + tbox + ' (' + headerType + ')');\n            break;\n        }\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = (oldByte << 8) | newByte;\n        // Image and tile size (SIZ)\n        if (code === 0xFF51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0; // Byte 4\n          var Ysiz = stream.getInt32() >>> 0; // Byte 8\n          var XOsiz = stream.getInt32() >>> 0; // Byte 12\n          var YOsiz = stream.getInt32() >>> 0; // Byte 16\n          stream.skip(16);\n          var Csiz = stream.getUint16(); // Byte 36\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          // Results are always returned as Uint8Arrays\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n      throw new Error('JPX Error: No size marker found in JPX stream');\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      try {\n        var doNotRecover = false;\n        var position = start;\n        while (position + 1 < end) {\n          var code = readUint16(data, position);\n          position += 2;\n\n          var length = 0, j, sqcd, spqcds, spqcdSize, scalarExpounded, tile;\n          switch (code) {\n            case 0xFF4F: // Start of codestream (SOC)\n              context.mainHeader = true;\n              break;\n            case 0xFFD9: // End of codestream (EOC)\n              break;\n            case 0xFF51: // Image and tile size (SIZ)\n              length = readUint16(data, position);\n              var siz = {};\n              siz.Xsiz = readUint32(data, position + 4);\n              siz.Ysiz = readUint32(data, position + 8);\n              siz.XOsiz = readUint32(data, position + 12);\n              siz.YOsiz = readUint32(data, position + 16);\n              siz.XTsiz = readUint32(data, position + 20);\n              siz.YTsiz = readUint32(data, position + 24);\n              siz.XTOsiz = readUint32(data, position + 28);\n              siz.YTOsiz = readUint32(data, position + 32);\n              var componentsCount = readUint16(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7F) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 1]\n                };\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n            case 0xFF5C: // Quantization default (QCD)\n              length = readUint16(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);\n              }\n              qcd.noQuantization = (spqcdSize === 8);\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < length + position) {\n                var spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcd.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n              break;\n            case 0xFF5D: // Quantization component (QCC)\n              length = readUint16(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = readUint16(data, j);\n                j += 2;\n              }\n              sqcd = data[j++];\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);\n              }\n              qcc.noQuantization = (spqcdSize === 8);\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < (length + position)) {\n                spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcc.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n              break;\n            case 0xFF52: // Coding style default (COD)\n              length = readUint16(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = readUint16(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xF) + 2;\n              cod.ycb = (data[j++] & 0xF) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticalyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xF,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n                cod.precinctsSizes = precinctsSizes;\n              }\n              var unsupported = [];\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push('selectiveArithmeticCodingBypass');\n              }\n              if (cod.resetContextProbabilities) {\n                unsupported.push('resetContextProbabilities');\n              }\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push('terminationOnEachCodingPass');\n              }\n              if (cod.verticalyStripe) {\n                unsupported.push('verticalyStripe');\n              }\n              if (cod.predictableTermination) {\n                unsupported.push('predictableTermination');\n              }\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                throw new Error('JPX Error: Unsupported COD options (' +\n                                unsupported.join(', ') + ')');\n              }\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n              break;\n            case 0xFF90: // Start of tile-part (SOT)\n              length = readUint16(data, position);\n              tile = {};\n              tile.index = readUint16(data, position + 2);\n              tile.length = readUint32(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n\n              context.mainHeader = false;\n              if (tile.partIndex === 0) {\n                // reset component specific settings\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0); // clone of the global COC\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0); // clone of the global COC\n              }\n              context.currentTile = tile;\n              break;\n            case 0xFF93: // Start of data (SOD)\n              tile = context.currentTile;\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              // moving to the end of the data\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n            case 0xFF55: // Tile-part lengths, main header (TLM)\n            case 0xFF57: // Packet length, main header (PLM)\n            case 0xFF58: // Packet length, tile-part header (PLT)\n            case 0xFF64: // Comment (COM)\n              length = readUint16(data, position);\n              // skipping content\n              break;\n            case 0xFF53: // Coding style component (COC)\n              throw new Error('JPX Error: Codestream code 0xFF53 (COC) is ' +\n                              'not implemented');\n            default:\n              throw new Error('JPX Error: Unknown codestream code: ' +\n                              code.toString(16));\n          }\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw e;\n        } else {\n          warn('Trying to recover from ' + e.message);\n        }\n      }\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n  function calculateComponentDimensions(component, siz) {\n    // Section B.2 Component mapping\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    // Section B.3 Division into tile and tile-components\n    var tile, tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n    context.tiles = tiles;\n\n    var componentsCount = siz.Csiz;\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n    // calculate codeblock size as described in section B.7\n    result.xcb_ = (r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) :\n                   Math.min(codOrCoc.xcb, result.PPx));\n    result.ycb_ = (r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) :\n                   Math.min(codOrCoc.ycb, result.PPy));\n    return result;\n  }\n  function buildPrecincts(context, resolution, dimensions) {\n    // Section B.6 Division resolution to precincts\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    // Jasper introduces codeblock groups for mapping each subband codeblocks\n    // to precincts. Precinct partition divides a resolution according to width\n    // and height parameters. The subband that belongs to the resolution level\n    // has a different size than the level, unless it is the zero resolution.\n\n    // From Jasper documentation: jpeg2000.pdf, section K: Tier-2 coding:\n    // The precinct partitioning for a particular subband is derived from a\n    // partitioning of its parent LL band (i.e., the LL band at the next higher\n    // resolution level)... The LL band associated with each resolution level is\n    // divided into precincts... Each of the resulting precinct regions is then\n    // mapped into its child subbands (if any) at the next lower resolution\n    // level. This is accomplished by using the coordinate transformation\n    // (u, v) = (ceil(x/2), ceil(y/2)) where (x, y) and (u, v) are the\n    // coordinates of a point in the LL band and child subband, respectively.\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << (dimensions.PPx + (isZeroRes ? 0 : -1));\n    var precinctHeightInSubband = 1 << (dimensions.PPy + (isZeroRes ? 0 : -1));\n    var numprecinctswide = (resolution.trx1 > resolution.trx0 ?\n      Math.ceil(resolution.trx1 / precinctWidth) -\n      Math.floor(resolution.trx0 / precinctWidth) : 0);\n    var numprecinctshigh = (resolution.try1 > resolution.try0 ?\n      Math.ceil(resolution.try1 / precinctHeight) -\n      Math.floor(resolution.try0 / precinctHeight) : 0);\n    var numprecincts = numprecinctswide * numprecinctshigh;\n\n    resolution.precinctParameters = {\n      precinctWidth: precinctWidth,\n      precinctHeight: precinctHeight,\n      numprecinctswide: numprecinctswide,\n      numprecinctshigh: numprecinctshigh,\n      numprecincts: numprecincts,\n      precinctWidthInSubband: precinctWidthInSubband,\n      precinctHeightInSubband: precinctHeightInSubband\n    };\n  }\n  function buildCodeblocks(context, subband, dimensions) {\n    // Section B.7 Division sub-band into code-blocks\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = (subband.tbx1 + codeblockWidth - 1) >> xcb_;\n    var cby1 = (subband.tby1 + codeblockHeight - 1) >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n\n        // Calculate precinct number for this codeblock, codeblock position\n        // should be relative to its subband, use actual dimension and position\n        // See comment about codeblock group width and height\n        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) /\n          precinctParameters.precinctWidthInSubband);\n        var pj = Math.floor((codeblock.tby0_ - subband.tby0) /\n          precinctParameters.precinctHeightInSubband);\n        precinctNumber = pi + (pj * precinctParameters.numprecinctswide);\n\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (codeblock.tbx1_ <= codeblock.tbx0_ ||\n            codeblock.tby1_ <= codeblock.tby0_) {\n          continue;\n        }\n        codeblocks.push(codeblock);\n        // building precinct for the sub-band\n        var precinct = precincts[precinctNumber];\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n        codeblock.precinct = precinct;\n      }\n    }\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    // Section B.10.8 Order of info in packet\n    var subbands = resolution.subbands;\n    // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n    return {\n      layerNumber: layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0, r = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.1 Layer-resolution-component-position\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        r = 0;\n      }\n    };\n  }\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0, l = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.2 Resolution-layer-component-position\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        l = 0;\n      }\n    };\n  }\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n    for (c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        component.codingStyleParameters.decompositionLevelsCount);\n    }\n    var maxNumPrecinctsInLevel = new Int32Array(\n      maxDecompositionLevelsCount + 1);\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(maxNumPrecincts,\n            resolutions[r].precinctParameters.numprecincts);\n        }\n      }\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.3 Resolution-position-component-layer\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            if (p >= numprecincts) {\n              continue;\n            }\n            for (; l < layersCount;) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n            l = 0;\n          }\n          c = 0;\n        }\n        p = 0;\n      }\n    };\n  }\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0, r = 0, c = 0, px = 0, py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.4 Position-component-resolution-layer\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount =\n              component.codingStyleParameters.decompositionLevelsCount;\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale =\n                precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution);\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          c = 0;\n        }\n        px = 0;\n      }\n    };\n  }\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0, r = 0, c = 0, px = 0, py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.5 Component-position-resolution-layer\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount =\n          component.codingStyleParameters.decompositionLevelsCount;\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution);\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          px = 0;\n        }\n        py = 0;\n      }\n    };\n  }\n  function getPrecinctIndexIfExist(\n    pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n    if (posX % sizeInImageScale.width !== 0 ||\n        posY % sizeInImageScale.height !== 0) {\n      return null;\n    }\n    var startPrecinctRowIndex =\n      (posY / sizeInImageScale.width) *\n      resolution.precinctParameters.numprecinctswide;\n    return (posX / sizeInImageScale.height) + startPrecinctRowIndex;\n  }\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution =\n          scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution =\n          scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(\n          minWidthCurrentComponent,\n          widthCurrentResolution);\n        minHeightCurrentComponent = Math.min(\n          minHeightCurrentComponent,\n          heightCurrentResolution);\n        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent,\n          resolution.precinctParameters.numprecinctswide);\n        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent,\n          resolution.precinctParameters.numprecinctshigh);\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution\n        };\n        scale <<= 1;\n      }\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent\n      };\n    }\n    return {\n      components: sizePerComponent,\n      minWidth: minWidth,\n      minHeight: minHeight,\n      maxNumWide: maxNumWide,\n      maxNumHigh: maxNumHigh\n    };\n  }\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n    // Creating resolutions and sub-bands for each component\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      // Section B.5 Resolution levels and sub-bands\n      var resolutions = [];\n      var subbands = [];\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << (decompositionLevelsCount - r);\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n\n        var subband;\n        if (r === 0) {\n          // one sub-band (LL) with last decomposition\n          subband = {};\n          subband.type = 'LL';\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << (decompositionLevelsCount - r + 1);\n          var resolutionSubbands = [];\n          // three sub-bands (HL, LH and HH) with rest of decompositions\n          subband = {};\n          subband.type = 'HL';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'LH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'HH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n    // Generate the packets sequence\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator =\n          new LayerResolutionComponentPositionIterator(context);\n        break;\n      case 1:\n        tile.packetsIterator =\n          new ResolutionLayerComponentPositionIterator(context);\n        break;\n      case 2:\n        tile.packetsIterator =\n          new ResolutionPositionComponentLayerIterator(context);\n        break;\n      case 3:\n        tile.packetsIterator =\n          new PositionComponentResolutionLayerIterator(context);\n        break;\n      case 4:\n        tile.packetsIterator =\n          new ComponentPositionResolutionLayerIterator(context);\n        break;\n      default:\n        throw new Error('JPX Error: Unsupported progression order ' +\n                        progressionOrder);\n    }\n  }\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer, bufferSize = 0, skipNextBit = false;\n    function readBits(count) {\n      while (bufferSize < count) {\n        if(offset + position  >= data.length){\n          throw new Error(\"Unexpected EOF\");\n        }\n        var b = data[offset + position];\n        position++;\n        if (skipNextBit) {\n          buffer = (buffer << 7) | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = (buffer << 8) | b;\n          bufferSize += 8;\n        }\n        if (b === 0xFF) {\n          skipNextBit = true;\n        }\n      }\n      bufferSize -= count;\n      return (buffer >>> bufferSize) & ((1 << count) - 1);\n    }\n    function skipMarkerIfEqual(value) {\n      if (data[offset + position - 1] === 0xFF &&\n          data[offset + position] === value) {\n        skipBytes(1);\n        return true;\n      } else if (data[offset + position] === 0xFF &&\n                 data[offset + position + 1] === value) {\n        skipBytes(2);\n        return true;\n      }\n      return false;\n    }\n    function skipBytes(count) {\n      position += count;\n    }\n    function alignToByte() {\n      bufferSize = 0;\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n      if (readBits(1) === 0) {\n        return 2;\n      }\n      var value = readBits(2);\n      if (value < 3) {\n        return value + 3;\n      }\n      value = readBits(5);\n      if (value < 31) {\n        return value + 6;\n      }\n      value = readBits(7);\n      return value + 37;\n    }\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n    while (position < dataLength) {\n      try{\n        alignToByte();\n        if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n          // Skip also marker segment length and packet sequence ID\n          skipBytes(4);\n        }\n        var packet = packetsIterator.nextPacket();\n        if (packet === undefined) {\n          //No more packets. Stream is probably truncated.\n          return;\n        }\n        if (!readBits(1)) {\n          continue;\n        }\n        var layerNumber = packet.layerNumber;\n        var queue = [], codeblock;\n        for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n          codeblock = packet.codeblocks[i];\n          var precinct = codeblock.precinct;\n          var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n          var codeblockRow = codeblock.cby - precinct.cbyMin;\n          var codeblockIncluded = false;\n          var firstTimeInclusion = false;\n          var valueReady;\n          if (codeblock['included'] !== undefined) {\n            codeblockIncluded = !!readBits(1);\n          } else {\n            // reading inclusion tree\n            precinct = codeblock.precinct;\n            var inclusionTree, zeroBitPlanesTree;\n            if (precinct['inclusionTree'] !== undefined) {\n              inclusionTree = precinct.inclusionTree;\n            } else {\n              // building inclusion and zero bit-planes trees\n              var width = precinct.cbxMax - precinct.cbxMin + 1;\n              var height = precinct.cbyMax - precinct.cbyMin + 1;\n              inclusionTree = new InclusionTree(width, height);\n              zeroBitPlanesTree = new TagTree(width, height);\n              precinct.inclusionTree = inclusionTree;\n              precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n            }\n\n            inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber);\n            while (true) {\n              if (position >= data.length) {\n                return;\n              }\n              if (inclusionTree.isAboveThreshold()){\n                break;\n              }\n              if (inclusionTree.isKnown()) {\n                inclusionTree.nextLevel();\n                continue;\n              }\n              if (readBits(1)) {\n                inclusionTree.setKnown();\n                if (inclusionTree.isLeaf()) {\n                  codeblock.included = true;\n                  codeblockIncluded = firstTimeInclusion = true;\n                  break;\n                } else {\n                  inclusionTree.nextLevel();\n                }\n              } else {\n                inclusionTree.incrementValue();\n              }\n            }\n          }\n          if (!codeblockIncluded) {\n            continue;\n          }\n          if (firstTimeInclusion) {\n            zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n            zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n            while (true) {\n              if (position >= data.length) {\n                return;\n              }\n              if (readBits(1)) {\n                valueReady = !zeroBitPlanesTree.nextLevel();\n                if (valueReady) {\n                  break;\n                }\n              } else {\n                zeroBitPlanesTree.incrementValue();\n              }\n            }\n            codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n          }\n          var codingpasses = readCodingpasses();\n          while (readBits(1)) {\n            codeblock.Lblock++;\n          }\n          var codingpassesLog2 = log2(codingpasses);\n          // rounding down log2\n          var bits = ((codingpasses < (1 << codingpassesLog2)) ?\n                      codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n          var codedDataLength = readBits(bits);\n          queue.push({\n            codeblock: codeblock,\n            codingpasses: codingpasses,\n            dataLength: codedDataLength\n          });\n        }\n        alignToByte();\n        if (ephMarkerUsed) {\n          skipMarkerIfEqual(0x92);\n        }\n        while (queue.length > 0) {\n          var packetItem = queue.shift();\n          codeblock = packetItem.codeblock;\n          if (codeblock['data'] === undefined) {\n            codeblock.data = [];\n          }\n          codeblock.data.push({\n            data: data,\n            start: offset + position,\n            end: offset + position + packetItem.dataLength,\n            codingpasses: packetItem.codingpasses\n          });\n          position += packetItem.dataLength;\n        }\n      } catch (e) {\n        return;\n      }\n    }\n    return position;\n  }\n  function copyCoefficients(coefficients, levelWidth, levelHeight, subband,\n                            delta, mb, reversible, segmentationSymbolUsed) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === 'H' ? 1 : 0;\n    var bottom = subband.type.charAt(1) === 'H' ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n      if (codeblock['data'] === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType,\n                              codeblock.zeroBitPlanes, mb);\n      currentCodingpassType = 2; // first bit plane starts from cleanup\n\n      // collect data\n      var data = codeblock.data, totalLength = 0, codingpasses = 0;\n      var j, jj, dataItem;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n      var encodedData = new Int16Array(totalLength);\n      var position = 0;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n      // decoding the item\n      var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropogationPass();\n            break;\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n          case 2:\n            bitModel.runCleanupPass();\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n            break;\n        }\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = (codeblock.tbx0_ - x0) + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      // Do the interleaving of Section F.3.3 here, so we do not need\n      // to copy later. LL level is not interleaved, just copied.\n      var interleave = (subband.type !== 'LL');\n      for (j = 0; j < blockHeight; j++) {\n        var row = (offset / width) | 0; // row in the non-interleaved subband\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n            nb = bitsDecoded[position];\n            var pos = interleave ? (levelOffset + (offset << 1)) : offset;\n            if (reversible && (nb >= mb)) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << (mb - nb));\n            }\n          }\n          offset++;\n          position++;\n        }\n        offset += width - blockWidth;\n      }\n    }\n  }\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount =\n      codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = (reversible ? new ReversibleTransform() :\n                                  new IrreversibleTransform());\n\n    var subbandCoefficients = [];\n    var b = 0;\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      // Allocate space for the whole sublevel.\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n        if (!scalarExpounded) {\n          // formula E-5\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n\n        // calulate quantization coefficient (Section E.1.1.1)\n        var delta = (reversible ? 1 :\n          Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048));\n        var mb = (guardBits + epsilon - 1);\n\n        // In the first resolution level, copyCoefficients will fill the\n        // whole array with coefficients. In the succeding passes,\n        // copyCoefficients will consecutively fill in the values that belong\n        // to the interleaved positions of the HL, LH, and HH coefficients.\n        // The LL coefficients will then be interleaved in Transform.iterate().\n        copyCoefficients(coefficients, width, height, subband, delta, mb,\n                         reversible, segmentationSymbolUsed);\n      }\n      subbandCoefficients.push({\n        width: width,\n        height: height,\n        items: coefficients\n      });\n    }\n\n    var result = transform.calculate(subbandCoefficients,\n                                     component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n      var tile0 = transformedTiles[0];\n      var isSigned = components[0].isSigned;\n      if (isSigned) {\n        var out = new Int16Array(tile0.items.length * componentsCount);\n      } else {\n        var out = new Uint16Array(tile0.items.length * componentsCount);\n      }\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out\n      };\n\n      // Section G.2.2 Inverse multi component transform\n      var shift, offset, max, min, maxK;\n      var pos = 0, j, jj, y0, y1, y2, r, g, b, k, val;\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n\n        // HACK: The multiple component transform formulas below assume that\n        // all components have the same precision. With this in mind, we\n        // compute shift and offset only once.\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n        max = 255 * (1 << shift);\n        maxK = max * 0.5;\n        min = -maxK;\n\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          // inverse irreversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            r = y0 + 1.402 * y2;\n            g = y0 - 0.34413 * y1 - 0.71414 * y2;\n            b = y0 + 1.772 * y1;\n            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n          }\n        } else {\n          // inverse reversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            g = y0 - ((y2 + y1) >> 2);\n            r = g + y2;\n            b = g + y1;\n            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n          }\n        }\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            k = y3items[j];\n            out[pos] = k <= min ? 0 : k >= maxK ? 255 : (k + offset) >> shift;\n          }\n        }\n      } else { // no multi-component transform\n        for (c = 0; c < componentsCount; c++) {\n          if (components[c].precision === 8){\n            var items = transformedTiles[c].items;\n            shift = components[c].precision - 8;\n            offset = (128 << shift) + 0.5;\n            max = (127.5 * (1 << shift));\n            min = -max;\n            for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n              val = items[j];\n              out[pos] = val <= min ? 0 :\n                         val >= max ? 255 : (val + offset) >> shift;\n              pos += componentsCount;\n            }\n          }else{\n            var isSigned = components[c].isSigned;\n            var items = transformedTiles[c].items;\n\n            if(isSigned){\n              for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n                out[pos] = items[j];\n                pos += componentsCount;\n              }\n            }else{\n              shift = components[c].precision - 8;\n              offset = (128 << shift) + 0.5;\n              var precisionMax = Math.pow(2,components[c].precision)-1;\n              for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n                val = items[j];\n                out[pos] = Math.max(Math.min((val + offset),precisionMax),0);\n                pos += componentsCount;\n              }\n            }\n          }\n        }\n      }\n      resultImages.push(result);\n    }\n    return resultImages;\n  }\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = (context.currentTile.QCC[c] !== undefined ?\n        context.currentTile.QCC[c] : context.currentTile.QCD);\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = (context.currentTile.COC[c] !== undefined  ?\n        context.currentTile.COC[c] : context.currentTile.COD);\n      component.codingStyleParameters = codOrCoc;\n    }\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  // Section B.10.2 Tag trees\n  var TagTree = (function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width: width,\n          height: height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0, value = 0, level;\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  })();\n\n  var InclusionTree = (function InclusionTreeClosure() {\n    function InclusionTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n        var status = new Uint8Array(width * height);\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = 0;\n          status[j] = 0;\n        }\n\n        var level = {\n          width: width,\n          height: height,\n          items: items,\n          status: status\n        };\n        this.levels.push(level);\n\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        this.currentStopValue = stopValue;\n        var currentLevel = 0;\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        this.currentLevel = this.levels.length - 1;\n        this.minValue =this.levels[this.currentLevel].items[0];\n        return;\n      },\n      incrementValue: function InclusionTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = level.items[level.index] + 1;\n        if(level.items[level.index] > this.minValue) {\n          this.minValue = level.items[level.index];\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        currentLevel--;\n        if (currentLevel < 0) {\n          return false;\n        } else {\n          this.currentLevel = currentLevel;\n          var level = this.levels[currentLevel];\n          if(level.items[level.index] < this.minValue) {\n            level.items[level.index] = this.minValue;\n          }else if (level.items[level.index] > this.minValue) {\n            this.minValue = level.items[level.index];\n          }\n          return true;\n        }\n      },\n    isLeaf: function InclusionTree_isLeaf(){\n      return (this.currentLevel === 0);\n    },\n    isAboveThreshold: function InclusionTree_isAboveThreshold(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      return (level.items[level.index] > this.currentStopValue);\n    },\n    isKnown: function InclusionTree_isKnown(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      return (level.status[level.index] > 0);\n    },\n    setKnown: function InclusionTree_setKnown(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      level.status[level.index] = 1;\n      return;\n    }\n\n    };\n    return InclusionTree;\n  })();\n\n  // Section D. Coefficient bit modeling\n  var BitModel = (function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    // Table D-1\n    // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),\n    // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)\n    var LLAndLHContextsLabel = new Uint8Array([\n      0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4,\n      7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6,\n      8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8\n    ]);\n    var HLContextLabel = new Uint8Array([\n      0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8,\n      8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3,\n      4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8\n    ]);\n    var HHContextLabel = new Uint8Array([\n      0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5,\n      5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8,\n      8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8\n    ]);\n\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n\n      this.contextLabelTable = (subband === 'HH' ? HHContextLabel :\n        (subband === 'HL' ? HLContextLabel : LLAndLHContextsLabel));\n\n      var coefficientCount = width * height;\n\n      // coefficients outside the encoding region treated as insignificant\n      // add border state cells for significanceState\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) :\n                                  mb > 6 ? new Uint16Array(coefficientCount) :\n                                  new Uint8Array(coefficientCount);\n      this.processingFlags = new Uint8Array(coefficientCount);\n\n      var bitsDecoded = new Uint8Array(coefficientCount);\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n      this.bitsDecoded = bitsDecoded;\n\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        // We have 17 contexts that are accessed via context labels,\n        // plus the uniform and runlength context.\n        this.contexts = new Int8Array(19);\n\n        // Contexts are packed into 1 byte:\n        // highest 7 bits carry the index, lowest bit carries mps\n        this.contexts[0] = (4 << 1) | 0;\n        this.contexts[UNIFORM_CONTEXT] = (46 << 1) | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = (3 << 1) | 0;\n      },\n      setNeighborsSignificance:\n        function BitModel_setNeighborsSignificance(row, column, index) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width, height = this.height;\n        var left = (column > 0);\n        var right = (column + 1 < width);\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropogationPass:\n        function BitModel_runSignificancePropogationPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n              if (i >= height) {\n                break;\n              }\n              // clear processed flag first\n              processingFlags[index] &= processedInverseMask;\n\n              if (coefficentsMagnitude[index] ||\n                  !neighborsSignificance[index]) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n\n        // calculate horizontal contribution\n        significance1 = (column > 0 && coefficentsMagnitude[index - 1] !== 0);\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n        var horizontalContribution = 3 * contribution;\n\n        // calculate vertical contribution and combine with the horizontal\n        significance1 = (row > 0 && coefficentsMagnitude[index - width] !== 0);\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n        return decoded;\n      },\n      runMagnitudeRefinementPass:\n        function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n\n              // significant but not those that have just become\n              if (!coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = 16;\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                // first refinement\n               var significance = neighborsSignificance[index] & 127;\n               contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] =\n                (coefficentsMagnitude[index] << 1) | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            // using the property: labels[neighborsSignificance[index]] === 0\n            // when neighborsSignificance[index] === 0\n            var allEmpty = (checkAllEmpty &&\n              processingFlags[index0] === 0 &&\n              processingFlags[index0 + oneRowDown] === 0 &&\n              processingFlags[index0 + twoRowsDown] === 0 &&\n              processingFlags[index0 + threeRowsDown] === 0 &&\n              neighborsSignificance[index0] === 0 &&\n              neighborsSignificance[index0 + oneRowDown] === 0 &&\n              neighborsSignificance[index0 + twoRowsDown] === 0 &&\n              neighborsSignificance[index0 + threeRowsDown] === 0);\n            var i1 = 0, index = index0;\n            var i = i0, sign;\n            if (allEmpty) {\n              var hasSignificantCoefficent =\n                decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue; // next column\n              }\n              i1 = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n                    decoder.readBit(contexts, UNIFORM_CONTEXT);\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n\n              index = index0;\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 3) |\n                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 2) |\n                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n                      decoder.readBit(contexts, UNIFORM_CONTEXT);\n        if (symbol !== 0xA) {\n          throw new Error('JPX Error: Invalid segmentation symbol');\n        }\n      }\n    };\n\n    return BitModel;\n  })();\n\n  // Section F, Discrete wavelet transformation\n  var Transform = (function TransformClosure() {\n    function Transform() {}\n\n    Transform.prototype.calculate =\n      function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n      return ll;\n    };\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      // Section F.3.7 extending... using max extension of 4\n      var i1 = offset - 1, j1 = offset + 1;\n      var i2 = offset + size - 2, j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh,\n                                                             u0, v0) {\n      var llWidth = ll.width, llHeight = ll.height, llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      // Interleave LL according to Section F.3.3\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n      // The LL band is not needed anymore.\n      llItems = ll.items = null;\n\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      // Section F.3.4 HOR_SR\n      if (width === 1) {\n        // if width = 1, when u0 even keep items as is, when odd divide by 2\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n\n          items.set(\n            rowBuffer.subarray(bufferPadding, bufferPadding + width),\n            k);\n        }\n      }\n\n      // Accesses to the items array can take long, because it may not fit into\n      // CPU cache and has to be fetched from main memory. Since subsequent\n      // accesses to the items array are not local when reading columns, we\n      // have a cache miss every time. To reduce cache misses, get up to\n      // 'numBuffers' items at a time and store them into the individual\n      // buffers. The colBuffers should be small enough to fit into CPU cache.\n      var numBuffers = 16;\n      var colBuffers = [];\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n      var b, currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      // Section F.3.5 VER_SR\n      if (height === 1) {\n          // if height = 1, when v0 even keep items as is, when odd divide by 2\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          // if we ran out of buffers, copy several image columns at once\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          // If this is last buffer in this group of buffers, flush all buffers.\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width: width,\n        height: height,\n        items: items\n      };\n    };\n    return Transform;\n  })();\n\n  // Section 3.8.2 Irreversible 9-7 filter\n  var IrreversibleTransform = (function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n    IrreversibleTransform.prototype.filter =\n      function irreversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n\n      // step 1 is combined with step 3\n\n      // step 2\n      j = offset - 3;\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      // step 1 & 3\n      j = offset - 2;\n      current = delta * x[j -1];\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      // step 4\n      j = offset - 1;\n      current = gamma * x[j - 1];\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 5\n      j = offset;\n      current = beta * x[j - 1];\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 6\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  })();\n\n  // Section 3.8.1 Reversible 5-3 filter\n  var ReversibleTransform = (function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n    ReversibleTransform.prototype.filter =\n      function reversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= (x[j - 1] + x[j + 1] + 2) >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += (x[j - 1] + x[j + 1]) >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  })();\n\n  return JpxImage;\n})();\n\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\n/* This class implements the QM Coder decoding as defined in\n *   JPEG 2000 Part I Final Committee Draft Version 1.0\n *   Annex C.3 Arithmetic decoding procedure \n * available at http://www.jpeg.org/public/fcd15444-1.pdf\n * \n * The arithmetic decoder is used in conjunction with context models to decode\n * JPEG2000 and JBIG2 streams.\n */\nvar ArithmeticDecoder = (function ArithmeticDecoderClosure() {\n  // Table C-2\n  var QeTable = [\n    {qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1},\n    {qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0},\n    {qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0},\n    {qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0},\n    {qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0},\n    {qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0},\n    {qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1},\n    {qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0},\n    {qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0},\n    {qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0},\n    {qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0},\n    {qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0},\n    {qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0},\n    {qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0},\n    {qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1},\n    {qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0},\n    {qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0},\n    {qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0},\n    {qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0},\n    {qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0},\n    {qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0},\n    {qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0},\n    {qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0},\n    {qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0},\n    {qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0},\n    {qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0},\n    {qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0},\n    {qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0},\n    {qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0},\n    {qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0},\n    {qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0},\n    {qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0},\n    {qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0},\n    {qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0},\n    {qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0},\n    {qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0},\n    {qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0},\n    {qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0},\n    {qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0},\n    {qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0},\n    {qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0},\n    {qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0},\n    {qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0},\n    {qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0},\n    {qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0},\n    {qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0},\n    {qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0}\n  ];\n\n  // C.3.5 Initialisation of the decoder (INITDEC)\n  function ArithmeticDecoder(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n\n    this.chigh = data[start];\n    this.clow = 0;\n\n    this.byteIn();\n\n    this.chigh = ((this.chigh << 7) & 0xFFFF) | ((this.clow >> 9) & 0x7F);\n    this.clow = (this.clow << 7) & 0xFFFF;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  ArithmeticDecoder.prototype = {\n    // C.3.4 Compressed data input (BYTEIN)\n    byteIn: function ArithmeticDecoder_byteIn() {\n      var data = this.data;\n      var bp = this.bp;\n      if (data[bp] === 0xFF) {\n        var b1 = data[bp + 1];\n        if (b1 > 0x8F) {\n          this.clow += 0xFF00;\n          this.ct = 8;\n        } else {\n          bp++;\n          this.clow += (data[bp] << 9);\n          this.ct = 7;\n          this.bp = bp;\n        }\n      } else {\n        bp++;\n        this.clow += bp < this.dataEnd ? (data[bp] << 8) : 0xFF00;\n        this.ct = 8;\n        this.bp = bp;\n      }\n      if (this.clow > 0xFFFF) {\n        this.chigh += (this.clow >> 16);\n        this.clow &= 0xFFFF;\n      }\n    },\n    // C.3.2 Decoding a decision (DECODE)\n    readBit: function ArithmeticDecoder_readBit(contexts, pos) {\n      // contexts are packed into 1 byte:\n      // highest 7 bits carry cx.index, lowest bit carries cx.mps\n      var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;\n      var qeTableIcx = QeTable[cx_index];\n      var qeIcx = qeTableIcx.qe;\n      var d;\n      var a = this.a - qeIcx;\n\n      if (this.chigh < qeIcx) {\n        // exchangeLps\n        if (a < qeIcx) {\n          a = qeIcx;\n          d = cx_mps;\n          cx_index = qeTableIcx.nmps;\n        } else {\n          a = qeIcx;\n          d = 1 ^ cx_mps;\n          if (qeTableIcx.switchFlag === 1) {\n            cx_mps = d;\n          }\n          cx_index = qeTableIcx.nlps;\n        }\n      } else {\n        this.chigh -= qeIcx;\n        if ((a & 0x8000) !== 0) {\n          this.a = a;\n          return cx_mps;\n        }\n        // exchangeMps\n        if (a < qeIcx) {\n          d = 1 ^ cx_mps;\n          if (qeTableIcx.switchFlag === 1) {\n            cx_mps = d;\n          }\n          cx_index = qeTableIcx.nlps;\n        } else {\n          d = cx_mps;\n          cx_index = qeTableIcx.nmps;\n        }\n      }\n      // C.3.3 renormD;\n      do {\n        if (this.ct === 0) {\n          this.byteIn();\n        }\n\n        a <<= 1;\n        this.chigh = ((this.chigh << 1) & 0xFFFF) | ((this.clow >> 15) & 1);\n        this.clow = (this.clow << 1) & 0xFFFF;\n        this.ct--;\n      } while ((a & 0x8000) === 0);\n      this.a = a;\n\n      contexts[pos] = cx_index << 1 | cx_mps;\n      return d;\n    }\n  };\n\n  return ArithmeticDecoder;\n})();\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals Cmd, ColorSpace, Dict, MozBlobBuilder, Name, PDFJS, Ref, URL,\n           Promise */\n\n'use strict';\n\nvar globalScope = (typeof window === 'undefined') ? this : window;\n\nvar isWorker = (typeof window === 'undefined');\n\nvar FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\nvar TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\n\nvar ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\n\nvar AnnotationType = {\n  WIDGET: 1,\n  TEXT: 2,\n  LINK: 3\n};\n\nvar StreamType = {\n  UNKNOWN: 0,\n  FLATE: 1,\n  LZW: 2,\n  DCT: 3,\n  JPX: 4,\n  JBIG: 5,\n  A85: 6,\n  AHX: 7,\n  CCF: 8,\n  RL: 9\n};\n\nvar FontType = {\n  UNKNOWN: 0,\n  TYPE1: 1,\n  TYPE1C: 2,\n  CIDFONTTYPE0: 3,\n  CIDFONTTYPE0C: 4,\n  TRUETYPE: 5,\n  CIDFONTTYPE2: 6,\n  TYPE3: 7,\n  OPENTYPE: 8,\n  TYPE0: 9,\n  MMTYPE1: 10\n};\n\n// The global PDFJS object exposes the API\n// In production, it will be declared outside a global wrapper\n// In development, it will be declared here\nif (!globalScope.PDFJS) {\n  globalScope.PDFJS = {};\n}\n\nglobalScope.PDFJS.pdfBug = false;\n\nPDFJS.VERBOSITY_LEVELS = {\n  errors: 0,\n  warnings: 1,\n  infos: 5\n};\n\n// All the possible operations for an operator list.\nvar OPS = PDFJS.OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.infos) {\n    console.log('Info: ' + msg);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.warnings) {\n    console.log('Warning: ' + msg);\n  }\n}\n\n// Fatal errors that should trigger the fallback UI and halt execution by\n// throwing an exception.\nfunction error(msg) {\n  // If multiple arguments were passed, pass them all to the log function.\n  if (arguments.length > 1) {\n    var logArguments = ['Error:'];\n    logArguments.push.apply(logArguments, arguments);\n    console.log.apply(console, logArguments);\n    // Join the arguments into a single string for the lines below.\n    msg = [].join.call(arguments, ' ');\n  } else {\n    console.log('Error: ' + msg);\n  }\n  console.log(backtrace());\n  UnsupportedManager.notify(UNSUPPORTED_FEATURES.unknown);\n  throw new Error(msg);\n}\n\nfunction backtrace() {\n  try {\n    throw new Error();\n  } catch (e) {\n    return e.stack ? e.stack.split('\\n').slice(2).join('\\n') : '';\n  }\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    error(msg);\n  }\n}\n\nvar UNSUPPORTED_FEATURES = PDFJS.UNSUPPORTED_FEATURES = {\n  unknown: 'unknown',\n  forms: 'forms',\n  javaScript: 'javaScript',\n  smask: 'smask',\n  shadingPattern: 'shadingPattern',\n  font: 'font'\n};\n\nvar UnsupportedManager = PDFJS.UnsupportedManager =\n  (function UnsupportedManagerClosure() {\n  var listeners = [];\n  return {\n    listen: function (cb) {\n      listeners.push(cb);\n    },\n    notify: function (featureId) {\n      warn('Unsupported feature \"' + featureId + '\"');\n      for (var i = 0, ii = listeners.length; i < ii; i++) {\n        listeners[i](featureId);\n      }\n    }\n  };\n})();\n\n// Combines two URLs. The baseUrl shall be absolute URL. If the url is an\n// absolute URL, it will be returned as is.\nfunction combineUrl(baseUrl, url) {\n  if (!url) {\n    return baseUrl;\n  }\n  if (/^[a-z][a-z0-9+\\-.]*:/i.test(url)) {\n    return url;\n  }\n  var i;\n  if (url.charAt(0) === '/') {\n    // absolute path\n    i = baseUrl.indexOf('://');\n    if (url.charAt(1) === '/') {\n      ++i;\n    } else {\n      i = baseUrl.indexOf('/', i + 3);\n    }\n    return baseUrl.substring(0, i) + url;\n  } else {\n    // relative path\n    var pathLength = baseUrl.length;\n    i = baseUrl.lastIndexOf('#');\n    pathLength = i >= 0 ? i : pathLength;\n    i = baseUrl.lastIndexOf('?', pathLength);\n    pathLength = i >= 0 ? i : pathLength;\n    var prefixLength = baseUrl.lastIndexOf('/', pathLength);\n    return baseUrl.substring(0, prefixLength + 1) + url;\n  }\n}\n\n// Validates if URL is safe and allowed, e.g. to avoid XSS.\nfunction isValidUrl(url, allowRelative) {\n  if (!url) {\n    return false;\n  }\n  // RFC 3986 (http://tools.ietf.org/html/rfc3986#section-3.1)\n  // scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n  var protocol = /^[a-z][a-z0-9+\\-.]*(?=:)/i.exec(url);\n  if (!protocol) {\n    return allowRelative;\n  }\n  protocol = protocol[0].toLowerCase();\n  switch (protocol) {\n    case 'http':\n    case 'https':\n    case 'ftp':\n    case 'mailto':\n    case 'tel':\n      return true;\n    default:\n      return false;\n  }\n}\nPDFJS.isValidUrl = isValidUrl;\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, { value: value,\n                                     enumerable: true,\n                                     configurable: true,\n                                     writable: false });\n  return value;\n}\nPDFJS.shadow = shadow;\n\nvar PasswordResponses = PDFJS.PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\n\nvar PasswordException = (function PasswordExceptionClosure() {\n  function PasswordException(msg, code) {\n    this.name = 'PasswordException';\n    this.message = msg;\n    this.code = code;\n  }\n\n  PasswordException.prototype = new Error();\n  PasswordException.constructor = PasswordException;\n\n  return PasswordException;\n})();\nPDFJS.PasswordException = PasswordException;\n\nvar UnknownErrorException = (function UnknownErrorExceptionClosure() {\n  function UnknownErrorException(msg, details) {\n    this.name = 'UnknownErrorException';\n    this.message = msg;\n    this.details = details;\n  }\n\n  UnknownErrorException.prototype = new Error();\n  UnknownErrorException.constructor = UnknownErrorException;\n\n  return UnknownErrorException;\n})();\nPDFJS.UnknownErrorException = UnknownErrorException;\n\nvar InvalidPDFException = (function InvalidPDFExceptionClosure() {\n  function InvalidPDFException(msg) {\n    this.name = 'InvalidPDFException';\n    this.message = msg;\n  }\n\n  InvalidPDFException.prototype = new Error();\n  InvalidPDFException.constructor = InvalidPDFException;\n\n  return InvalidPDFException;\n})();\nPDFJS.InvalidPDFException = InvalidPDFException;\n\nvar MissingPDFException = (function MissingPDFExceptionClosure() {\n  function MissingPDFException(msg) {\n    this.name = 'MissingPDFException';\n    this.message = msg;\n  }\n\n  MissingPDFException.prototype = new Error();\n  MissingPDFException.constructor = MissingPDFException;\n\n  return MissingPDFException;\n})();\nPDFJS.MissingPDFException = MissingPDFException;\n\nvar UnexpectedResponseException =\n    (function UnexpectedResponseExceptionClosure() {\n  function UnexpectedResponseException(msg, status) {\n    this.name = 'UnexpectedResponseException';\n    this.message = msg;\n    this.status = status;\n  }\n\n  UnexpectedResponseException.prototype = new Error();\n  UnexpectedResponseException.constructor = UnexpectedResponseException;\n\n  return UnexpectedResponseException;\n})();\nPDFJS.UnexpectedResponseException = UnexpectedResponseException;\n\nvar NotImplementedException = (function NotImplementedExceptionClosure() {\n  function NotImplementedException(msg) {\n    this.message = msg;\n  }\n\n  NotImplementedException.prototype = new Error();\n  NotImplementedException.prototype.name = 'NotImplementedException';\n  NotImplementedException.constructor = NotImplementedException;\n\n  return NotImplementedException;\n})();\n\nvar MissingDataException = (function MissingDataExceptionClosure() {\n  function MissingDataException(begin, end) {\n    this.begin = begin;\n    this.end = end;\n    this.message = 'Missing data [' + begin + ', ' + end + ')';\n  }\n\n  MissingDataException.prototype = new Error();\n  MissingDataException.prototype.name = 'MissingDataException';\n  MissingDataException.constructor = MissingDataException;\n\n  return MissingDataException;\n})();\n\nvar XRefParseException = (function XRefParseExceptionClosure() {\n  function XRefParseException(msg) {\n    this.message = msg;\n  }\n\n  XRefParseException.prototype = new Error();\n  XRefParseException.prototype.name = 'XRefParseException';\n  XRefParseException.constructor = XRefParseException;\n\n  return XRefParseException;\n})();\n\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && typeof bytes === 'object' &&\n         bytes.length !== undefined, 'Invalid argument for bytesToString');\n  var length = bytes.length;\n  var MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  var strBuf = [];\n  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    var chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join('');\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === 'string', 'Invalid argument for stringToBytes');\n  var length = str.length;\n  var bytes = new Uint8Array(length);\n  for (var i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xFF;\n  }\n  return bytes;\n}\n\nfunction string32(value) {\n  return String.fromCharCode((value >> 24) & 0xff, (value >> 16) & 0xff,\n                             (value >> 8) & 0xff, value & 0xff);\n}\n\nfunction log2(x) {\n  var n = 1, i = 0;\n  while (x > n) {\n    n <<= 1;\n    i++;\n  }\n  return i;\n}\n\nfunction readInt8(data, start) {\n  return (data[start] << 24) >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return (data[offset] << 8) | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return ((data[offset] << 24) | (data[offset + 1] << 16) |\n         (data[offset + 2] << 8) | data[offset + 3]) >>> 0;\n}\n\n// Lazy test the endianness of the platform\n// NOTE: This will be 'true' for simulated TypedArrays\nfunction isLittleEndian() {\n  var buffer8 = new Uint8Array(2);\n  buffer8[0] = 1;\n  var buffer16 = new Uint16Array(buffer8.buffer);\n  return (buffer16[0] === 1);\n}\n\nObject.defineProperty(PDFJS, 'isLittleEndian', {\n  configurable: true,\n  get: function PDFJS_isLittleEndian() {\n    return shadow(PDFJS, 'isLittleEndian', isLittleEndian());\n  }\n});\n\n//#if !(FIREFOX || MOZCENTRAL || B2G || CHROME)\n//// Lazy test if the userAgant support CanvasTypedArrays\nfunction hasCanvasTypedArrays() {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n  var ctx = canvas.getContext('2d');\n  var imageData = ctx.createImageData(1, 1);\n  return (typeof imageData.data.buffer !== 'undefined');\n}\n\nObject.defineProperty(PDFJS, 'hasCanvasTypedArrays', {\n  configurable: true,\n  get: function PDFJS_hasCanvasTypedArrays() {\n    return shadow(PDFJS, 'hasCanvasTypedArrays', hasCanvasTypedArrays());\n  }\n});\n\nvar Uint32ArrayView = (function Uint32ArrayViewClosure() {\n\n  function Uint32ArrayView(buffer, length) {\n    this.buffer = buffer;\n    this.byteLength = buffer.length;\n    this.length = length === undefined ? (this.byteLength >> 2) : length;\n    ensureUint32ArrayViewProps(this.length);\n  }\n  Uint32ArrayView.prototype = Object.create(null);\n\n  var uint32ArrayViewSetters = 0;\n  function createUint32ArrayProp(index) {\n    return {\n      get: function () {\n        var buffer = this.buffer, offset = index << 2;\n        return (buffer[offset] | (buffer[offset + 1] << 8) |\n          (buffer[offset + 2] << 16) | (buffer[offset + 3] << 24)) >>> 0;\n      },\n      set: function (value) {\n        var buffer = this.buffer, offset = index << 2;\n        buffer[offset] = value & 255;\n        buffer[offset + 1] = (value >> 8) & 255;\n        buffer[offset + 2] = (value >> 16) & 255;\n        buffer[offset + 3] = (value >>> 24) & 255;\n      }\n    };\n  }\n\n  function ensureUint32ArrayViewProps(length) {\n    while (uint32ArrayViewSetters < length) {\n      Object.defineProperty(Uint32ArrayView.prototype,\n        uint32ArrayViewSetters,\n        createUint32ArrayProp(uint32ArrayViewSetters));\n      uint32ArrayViewSetters++;\n    }\n  }\n\n  return Uint32ArrayView;\n})();\n//#else\n//PDFJS.hasCanvasTypedArrays = true;\n//#endif\n\nvar IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n\nvar Util = PDFJS.Util = (function UtilClosure() {\n  function Util() {}\n\n  var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];\n\n  // makeCssRgb() can be called thousands of times. Using |rgbBuf| avoids\n  // creating many intermediate strings.\n  Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {\n    rgbBuf[1] = r;\n    rgbBuf[3] = g;\n    rgbBuf[5] = b;\n    return rgbBuf.join('');\n  };\n\n  // Concatenates two transformation matrices together and returns the result.\n  Util.transform = function Util_transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5]\n    ];\n  };\n\n  // For 2d affine transforms\n  Util.applyTransform = function Util_applyTransform(p, m) {\n    var xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    var yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  };\n\n  Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {\n    var d = m[0] * m[3] - m[1] * m[2];\n    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  };\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  Util.getAxialAlignedBoundingBox =\n    function Util_getAxialAlignedBoundingBox(r, m) {\n\n    var p1 = Util.applyTransform(r, m);\n    var p2 = Util.applyTransform(r.slice(2, 4), m);\n    var p3 = Util.applyTransform([r[0], r[3]], m);\n    var p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1])\n    ];\n  };\n\n  Util.inverseTransform = function Util_inverseTransform(m) {\n    var d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  };\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  Util.apply3dTransform = function Util_apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2]\n    ];\n  };\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  Util.singularValueDecompose2dScale =\n    function Util_singularValueDecompose2dScale(m) {\n\n    var transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    var a = m[0] * transpose[0] + m[1] * transpose[2];\n    var b = m[0] * transpose[1] + m[1] * transpose[3];\n    var c = m[2] * transpose[0] + m[3] * transpose[2];\n    var d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    var first = (a + d) / 2;\n    var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    var sx = first + second || 1;\n    var sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  };\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  Util.normalizeRect = function Util_normalizeRect(rect) {\n    var r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  };\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  Util.intersect = function Util_intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare),\n        orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare),\n        result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if ((orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n        (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return false;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if ((orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n        (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return false;\n    }\n\n    return result;\n  };\n\n  Util.sign = function Util_sign(num) {\n    return num < 0 ? -1 : 1;\n  };\n\n  Util.appendToArray = function Util_appendToArray(arr1, arr2) {\n    Array.prototype.push.apply(arr1, arr2);\n  };\n\n  Util.prependToArray = function Util_prependToArray(arr1, arr2) {\n    Array.prototype.unshift.apply(arr1, arr2);\n  };\n\n  Util.extendObj = function extendObj(obj1, obj2) {\n    for (var key in obj2) {\n      obj1[key] = obj2[key];\n    }\n  };\n\n  Util.getInheritableProperty = function Util_getInheritableProperty(dict,\n                                                                     name) {\n    while (dict && !dict.has(name)) {\n      dict = dict.get('Parent');\n    }\n    if (!dict) {\n      return null;\n    }\n    return dict.get(name);\n  };\n\n  Util.inherit = function Util_inherit(sub, base, prototype) {\n    sub.prototype = Object.create(base.prototype);\n    sub.prototype.constructor = sub;\n    for (var prop in prototype) {\n      sub.prototype[prop] = prototype[prop];\n    }\n  };\n\n  Util.loadScript = function Util_loadScript(src, callback) {\n    var script = document.createElement('script');\n    var loaded = false;\n    script.setAttribute('src', src);\n    if (callback) {\n      script.onload = function() {\n        if (!loaded) {\n          callback();\n        }\n        loaded = true;\n      };\n    }\n    document.getElementsByTagName('head')[0].appendChild(script);\n  };\n\n  return Util;\n})();\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n * @class\n * @alias PDFJS.PageViewport\n */\nvar PageViewport = PDFJS.PageViewport = (function PageViewportClosure() {\n  /**\n   * @constructor\n   * @private\n   * @param viewBox {Array} xMin, yMin, xMax and yMax coordinates.\n   * @param scale {number} scale of the viewport.\n   * @param rotation {number} rotations of the viewport in degrees.\n   * @param offsetX {number} offset X\n   * @param offsetY {number} offset Y\n   * @param dontFlip {boolean} if true, axis Y will not be flipped.\n   */\n  function PageViewport(viewBox, scale, rotation, offsetX, offsetY, dontFlip) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    var centerX = (viewBox[2] + viewBox[0]) / 2;\n    var centerY = (viewBox[3] + viewBox[1]) / 2;\n    var rotateA, rotateB, rotateC, rotateD;\n    rotation = rotation % 360;\n    rotation = rotation < 0 ? rotation + 360 : rotation;\n    switch (rotation) {\n      case 180:\n        rotateA = -1; rotateB = 0; rotateC = 0; rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0; rotateB = 1; rotateC = 1; rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0; rotateB = -1; rotateC = -1; rotateD = 0;\n        break;\n      //case 0:\n      default:\n        rotateA = 1; rotateB = 0; rotateC = 0; rotateD = -1;\n        break;\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC; rotateD = -rotateD;\n    }\n\n    var offsetCanvasX, offsetCanvasY;\n    var width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY\n    ];\n\n    this.width = width;\n    this.height = height;\n    this.fontScale = scale;\n  }\n  PageViewport.prototype = /** @lends PDFJS.PageViewport.prototype */ {\n    /**\n     * Clones viewport with additional properties.\n     * @param args {Object} (optional) If specified, may contain the 'scale' or\n     * 'rotation' properties to override the corresponding properties in\n     * the cloned viewport.\n     * @returns {PDFJS.PageViewport} Cloned viewport.\n     */\n    clone: function PageViewPort_clone(args) {\n      args = args || {};\n      var scale = 'scale' in args ? args.scale : this.scale;\n      var rotation = 'rotation' in args ? args.rotation : this.rotation;\n      return new PageViewport(this.viewBox.slice(), scale, rotation,\n                              this.offsetX, this.offsetY, args.dontFlip);\n    },\n    /**\n     * Converts PDF point to the viewport coordinates. For examples, useful for\n     * converting PDF location into canvas pixel coordinates.\n     * @param x {number} X coordinate.\n     * @param y {number} Y coordinate.\n     * @returns {Object} Object that contains 'x' and 'y' properties of the\n     * point in the viewport coordinate space.\n     * @see {@link convertToPdfPoint}\n     * @see {@link convertToViewportRectangle}\n     */\n    convertToViewportPoint: function PageViewport_convertToViewportPoint(x, y) {\n      return Util.applyTransform([x, y], this.transform);\n    },\n    /**\n     * Converts PDF rectangle to the viewport coordinates.\n     * @param rect {Array} xMin, yMin, xMax and yMax coordinates.\n     * @returns {Array} Contains corresponding coordinates of the rectangle\n     * in the viewport coordinate space.\n     * @see {@link convertToViewportPoint}\n     */\n    convertToViewportRectangle:\n      function PageViewport_convertToViewportRectangle(rect) {\n      var tl = Util.applyTransform([rect[0], rect[1]], this.transform);\n      var br = Util.applyTransform([rect[2], rect[3]], this.transform);\n      return [tl[0], tl[1], br[0], br[1]];\n    },\n    /**\n     * Converts viewport coordinates to the PDF location. For examples, useful\n     * for converting canvas pixel location into PDF one.\n     * @param x {number} X coordinate.\n     * @param y {number} Y coordinate.\n     * @returns {Object} Object that contains 'x' and 'y' properties of the\n     * point in the PDF coordinate space.\n     * @see {@link convertToViewportPoint}\n     */\n    convertToPdfPoint: function PageViewport_convertToPdfPoint(x, y) {\n      return Util.applyInverseTransform([x, y], this.transform);\n    }\n  };\n  return PageViewport;\n})();\n\nvar PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014,\n  0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C,\n  0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160,\n  0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC\n];\n\nfunction stringToPDFString(str) {\n  var i, n = str.length, strBuf = [];\n  if (str[0] === '\\xFE' && str[1] === '\\xFF') {\n    // UTF16BE BOM\n    for (i = 2; i < n; i += 2) {\n      strBuf.push(String.fromCharCode(\n        (str.charCodeAt(i) << 8) | str.charCodeAt(i + 1)));\n    }\n  } else {\n    for (i = 0; i < n; ++i) {\n      var code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join('');\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction isEmptyObj(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n}\n\nfunction isBool(v) {\n  return typeof v === 'boolean';\n}\n\nfunction isInt(v) {\n  return typeof v === 'number' && ((v | 0) === v);\n}\n\nfunction isNum(v) {\n  return typeof v === 'number';\n}\n\nfunction isString(v) {\n  return typeof v === 'string';\n}\n\nfunction isNull(v) {\n  return v === null;\n}\n\nfunction isName(v) {\n  return v instanceof Name;\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  if (!(v instanceof Dict)) {\n    return false;\n  }\n  if (!type) {\n    return true;\n  }\n  var dictType = v.get('Type');\n  return isName(dictType) && dictType.name === type;\n}\n\nfunction isArray(v) {\n  return v instanceof Array;\n}\n\nfunction isStream(v) {\n  return typeof v === 'object' && v !== null && v.getBytes !== undefined;\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === 'object' && v !== null && v.byteLength !== undefined;\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise} promise - A promise object.\n * @property {function} resolve - Fullfills the promise.\n * @property {function} reject - Rejects the promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias PDFJS.createPromiseCapability\n *\n * @return {PromiseCapability} A capability object contains:\n * - a Promise, resolve and reject methods.\n */\nfunction createPromiseCapability() {\n  var capability = {};\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = resolve;\n    capability.reject = reject;\n  });\n  return capability;\n}\n\nPDFJS.createPromiseCapability = createPromiseCapability;\n\n/**\n * Polyfill for Promises:\n * The following promise implementation tries to generally implement the\n * Promise/A+ spec. Some notable differences from other promise libaries are:\n * - There currently isn't a seperate deferred and promise object.\n * - Unhandled rejections eventually show an error if they aren't handled.\n *\n * Based off of the work in:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=810490\n */\n(function PromiseClosure() {\n  if (globalScope.Promise) {\n    // Promises existing in the DOM/Worker, checking presence of all/resolve\n    if (typeof globalScope.Promise.all !== 'function') {\n      globalScope.Promise.all = function (iterable) {\n        var count = 0, results = [], resolve, reject;\n        var promise = new globalScope.Promise(function (resolve_, reject_) {\n          resolve = resolve_;\n          reject = reject_;\n        });\n        iterable.forEach(function (p, i) {\n          count++;\n          p.then(function (result) {\n            results[i] = result;\n            count--;\n            if (count === 0) {\n              resolve(results);\n            }\n          }, reject);\n        });\n        if (count === 0) {\n          resolve(results);\n        }\n        return promise;\n      };\n    }\n    if (typeof globalScope.Promise.resolve !== 'function') {\n      globalScope.Promise.resolve = function (value) {\n        return new globalScope.Promise(function (resolve) { resolve(value); });\n      };\n    }\n    if (typeof globalScope.Promise.reject !== 'function') {\n      globalScope.Promise.reject = function (reason) {\n        return new globalScope.Promise(function (resolve, reject) {\n          reject(reason);\n        });\n      };\n    }\n    if (typeof globalScope.Promise.prototype.catch !== 'function') {\n      globalScope.Promise.prototype.catch = function (onReject) {\n        return globalScope.Promise.prototype.then(undefined, onReject);\n      };\n    }\n    return;\n  }\n//#if !MOZCENTRAL\n  var STATUS_PENDING = 0;\n  var STATUS_RESOLVED = 1;\n  var STATUS_REJECTED = 2;\n\n  // In an attempt to avoid silent exceptions, unhandled rejections are\n  // tracked and if they aren't handled in a certain amount of time an\n  // error is logged.\n  var REJECTION_TIMEOUT = 500;\n\n  var HandlerManager = {\n    handlers: [],\n    running: false,\n    unhandledRejections: [],\n    pendingRejectionCheck: false,\n\n    scheduleHandlers: function scheduleHandlers(promise) {\n      if (promise._status === STATUS_PENDING) {\n        return;\n      }\n\n      this.handlers = this.handlers.concat(promise._handlers);\n      promise._handlers = [];\n\n      if (this.running) {\n        return;\n      }\n      this.running = true;\n\n      setTimeout(this.runHandlers.bind(this), 0);\n    },\n\n    runHandlers: function runHandlers() {\n      var RUN_TIMEOUT = 1; // ms\n      var timeoutAt = Date.now() + RUN_TIMEOUT;\n      while (this.handlers.length > 0) {\n        var handler = this.handlers.shift();\n\n        var nextStatus = handler.thisPromise._status;\n        var nextValue = handler.thisPromise._value;\n\n        try {\n          if (nextStatus === STATUS_RESOLVED) {\n            if (typeof handler.onResolve === 'function') {\n              nextValue = handler.onResolve(nextValue);\n            }\n          } else if (typeof handler.onReject === 'function') {\n              nextValue = handler.onReject(nextValue);\n              nextStatus = STATUS_RESOLVED;\n\n              if (handler.thisPromise._unhandledRejection) {\n                this.removeUnhandeledRejection(handler.thisPromise);\n              }\n          }\n        } catch (ex) {\n          nextStatus = STATUS_REJECTED;\n          nextValue = ex;\n        }\n\n        handler.nextPromise._updateStatus(nextStatus, nextValue);\n        if (Date.now() >= timeoutAt) {\n          break;\n        }\n      }\n\n      if (this.handlers.length > 0) {\n        setTimeout(this.runHandlers.bind(this), 0);\n        return;\n      }\n\n      this.running = false;\n    },\n\n    addUnhandledRejection: function addUnhandledRejection(promise) {\n      this.unhandledRejections.push({\n        promise: promise,\n        time: Date.now()\n      });\n      this.scheduleRejectionCheck();\n    },\n\n    removeUnhandeledRejection: function removeUnhandeledRejection(promise) {\n      promise._unhandledRejection = false;\n      for (var i = 0; i < this.unhandledRejections.length; i++) {\n        if (this.unhandledRejections[i].promise === promise) {\n          this.unhandledRejections.splice(i);\n          i--;\n        }\n      }\n    },\n\n    scheduleRejectionCheck: function scheduleRejectionCheck() {\n      if (this.pendingRejectionCheck) {\n        return;\n      }\n      this.pendingRejectionCheck = true;\n      setTimeout(function rejectionCheck() {\n        this.pendingRejectionCheck = false;\n        var now = Date.now();\n        for (var i = 0; i < this.unhandledRejections.length; i++) {\n          if (now - this.unhandledRejections[i].time > REJECTION_TIMEOUT) {\n            var unhandled = this.unhandledRejections[i].promise._value;\n            var msg = 'Unhandled rejection: ' + unhandled;\n            if (unhandled.stack) {\n              msg += '\\n' + unhandled.stack;\n            }\n            warn(msg);\n            this.unhandledRejections.splice(i);\n            i--;\n          }\n        }\n        if (this.unhandledRejections.length) {\n          this.scheduleRejectionCheck();\n        }\n      }.bind(this), REJECTION_TIMEOUT);\n    }\n  };\n\n  function Promise(resolver) {\n    this._status = STATUS_PENDING;\n    this._handlers = [];\n    try {\n      resolver.call(this, this._resolve.bind(this), this._reject.bind(this));\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n  /**\n   * Builds a promise that is resolved when all the passed in promises are\n   * resolved.\n   * @param {array} array of data and/or promises to wait for.\n   * @return {Promise} New dependant promise.\n   */\n  Promise.all = function Promise_all(promises) {\n    var resolveAll, rejectAll;\n    var deferred = new Promise(function (resolve, reject) {\n      resolveAll = resolve;\n      rejectAll = reject;\n    });\n    var unresolved = promises.length;\n    var results = [];\n    if (unresolved === 0) {\n      resolveAll(results);\n      return deferred;\n    }\n    function reject(reason) {\n      if (deferred._status === STATUS_REJECTED) {\n        return;\n      }\n      results = [];\n      rejectAll(reason);\n    }\n    for (var i = 0, ii = promises.length; i < ii; ++i) {\n      var promise = promises[i];\n      var resolve = (function(i) {\n        return function(value) {\n          if (deferred._status === STATUS_REJECTED) {\n            return;\n          }\n          results[i] = value;\n          unresolved--;\n          if (unresolved === 0) {\n            resolveAll(results);\n          }\n        };\n      })(i);\n      if (Promise.isPromise(promise)) {\n        promise.then(resolve, reject);\n      } else {\n        resolve(promise);\n      }\n    }\n    return deferred;\n  };\n\n  /**\n   * Checks if the value is likely a promise (has a 'then' function).\n   * @return {boolean} true if value is thenable\n   */\n  Promise.isPromise = function Promise_isPromise(value) {\n    return value && typeof value.then === 'function';\n  };\n\n  /**\n   * Creates resolved promise\n   * @param value resolve value\n   * @returns {Promise}\n   */\n  Promise.resolve = function Promise_resolve(value) {\n    return new Promise(function (resolve) { resolve(value); });\n  };\n\n  /**\n   * Creates rejected promise\n   * @param reason rejection value\n   * @returns {Promise}\n   */\n  Promise.reject = function Promise_reject(reason) {\n    return new Promise(function (resolve, reject) { reject(reason); });\n  };\n\n  Promise.prototype = {\n    _status: null,\n    _value: null,\n    _handlers: null,\n    _unhandledRejection: null,\n\n    _updateStatus: function Promise__updateStatus(status, value) {\n      if (this._status === STATUS_RESOLVED ||\n          this._status === STATUS_REJECTED) {\n        return;\n      }\n\n      if (status === STATUS_RESOLVED &&\n          Promise.isPromise(value)) {\n        value.then(this._updateStatus.bind(this, STATUS_RESOLVED),\n                   this._updateStatus.bind(this, STATUS_REJECTED));\n        return;\n      }\n\n      this._status = status;\n      this._value = value;\n\n      if (status === STATUS_REJECTED && this._handlers.length === 0) {\n        this._unhandledRejection = true;\n        HandlerManager.addUnhandledRejection(this);\n      }\n\n      HandlerManager.scheduleHandlers(this);\n    },\n\n    _resolve: function Promise_resolve(value) {\n      this._updateStatus(STATUS_RESOLVED, value);\n    },\n\n    _reject: function Promise_reject(reason) {\n      this._updateStatus(STATUS_REJECTED, reason);\n    },\n\n    then: function Promise_then(onResolve, onReject) {\n      var nextPromise = new Promise(function (resolve, reject) {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n      this._handlers.push({\n        thisPromise: this,\n        onResolve: onResolve,\n        onReject: onReject,\n        nextPromise: nextPromise\n      });\n      HandlerManager.scheduleHandlers(this);\n      return nextPromise;\n    },\n\n    catch: function Promise_catch(onReject) {\n      return this.then(undefined, onReject);\n    }\n  };\n\n  globalScope.Promise = Promise;\n//#else\n//throw new Error('DOM Promise is not present');\n//#endif\n})();\n\nvar StatTimer = (function StatTimerClosure() {\n  function rpad(str, pad, length) {\n    while (str.length < length) {\n      str += pad;\n    }\n    return str;\n  }\n  function StatTimer() {\n    this.started = {};\n    this.times = [];\n    this.enabled = true;\n  }\n  StatTimer.prototype = {\n    time: function StatTimer_time(name) {\n      if (!this.enabled) {\n        return;\n      }\n      if (name in this.started) {\n        warn('Timer is already running for ' + name);\n      }\n      this.started[name] = Date.now();\n    },\n    timeEnd: function StatTimer_timeEnd(name) {\n      if (!this.enabled) {\n        return;\n      }\n      if (!(name in this.started)) {\n        warn('Timer has not been started for ' + name);\n      }\n      this.times.push({\n        'name': name,\n        'start': this.started[name],\n        'end': Date.now()\n      });\n      // Remove timer from started so it can be called again.\n      delete this.started[name];\n    },\n    toString: function StatTimer_toString() {\n      var i, ii;\n      var times = this.times;\n      var out = '';\n      // Find the longest name for padding purposes.\n      var longest = 0;\n      for (i = 0, ii = times.length; i < ii; ++i) {\n        var name = times[i]['name'];\n        if (name.length > longest) {\n          longest = name.length;\n        }\n      }\n      for (i = 0, ii = times.length; i < ii; ++i) {\n        var span = times[i];\n        var duration = span.end - span.start;\n        out += rpad(span['name'], ' ', longest) + ' ' + duration + 'ms\\n';\n      }\n      return out;\n    }\n  };\n  return StatTimer;\n})();\n\nPDFJS.createBlob = function createBlob(data, contentType) {\n  if (typeof Blob !== 'undefined') {\n    return new Blob([data], { type: contentType });\n  }\n  // Blob builder is deprecated in FF14 and removed in FF18.\n  var bb = new MozBlobBuilder();\n  bb.append(data);\n  return bb.getBlob(contentType);\n};\n\nPDFJS.createObjectURL = (function createObjectURLClosure() {\n  // Blob/createObjectURL is not available, falling back to data schema.\n  var digits =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  return function createObjectURL(data, contentType) {\n    if (!PDFJS.disableCreateObjectURL &&\n        typeof URL !== 'undefined' && URL.createObjectURL) {\n      var blob = PDFJS.createBlob(data, contentType);\n      return URL.createObjectURL(blob);\n    }\n\n    var buffer = 'data:' + contentType + ';base64,';\n    for (var i = 0, ii = data.length; i < ii; i += 3) {\n      var b1 = data[i] & 0xFF;\n      var b2 = data[i + 1] & 0xFF;\n      var b3 = data[i + 2] & 0xFF;\n      var d1 = b1 >> 2, d2 = ((b1 & 3) << 4) | (b2 >> 4);\n      var d3 = i + 1 < ii ? ((b2 & 0xF) << 2) | (b3 >> 6) : 64;\n      var d4 = i + 2 < ii ? (b3 & 0x3F) : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n    return buffer;\n  };\n})();\n\nfunction MessageHandler(name, comObj) {\n  this.name = name;\n  this.comObj = comObj;\n  this.callbackIndex = 1;\n  this.postMessageTransfers = true;\n  var callbacksCapabilities = this.callbacksCapabilities = {};\n  var ah = this.actionHandler = {};\n\n  ah['console_log'] = [function ahConsoleLog(data) {\n    console.log.apply(console, data);\n  }];\n  ah['console_error'] = [function ahConsoleError(data) {\n    console.error.apply(console, data);\n  }];\n  ah['_unsupported_feature'] = [function ah_unsupportedFeature(data) {\n    UnsupportedManager.notify(data);\n  }];\n\n  comObj.onmessage = function messageHandlerComObjOnMessage(event) {\n    var data = event.data;\n    if (data.isReply) {\n      var callbackId = data.callbackId;\n      if (data.callbackId in callbacksCapabilities) {\n        var callback = callbacksCapabilities[callbackId];\n        delete callbacksCapabilities[callbackId];\n        if ('error' in data) {\n          callback.reject(data.error);\n        } else {\n          callback.resolve(data.data);\n        }\n      } else {\n        error('Cannot resolve callback ' + callbackId);\n      }\n    } else if (data.action in ah) {\n      var action = ah[data.action];\n      if (data.callbackId) {\n        Promise.resolve().then(function () {\n          return action[0].call(action[1], data.data);\n        }).then(function (result) {\n          comObj.postMessage({\n            isReply: true,\n            callbackId: data.callbackId,\n            data: result\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            isReply: true,\n            callbackId: data.callbackId,\n            error: reason\n          });\n        });\n      } else {\n        action[0].call(action[1], data.data);\n      }\n    } else {\n      error('Unknown action from worker: ' + data.action);\n    }\n  };\n}\n\nMessageHandler.prototype = {\n  on: function messageHandlerOn(actionName, handler, scope) {\n    var ah = this.actionHandler;\n    if (ah[actionName]) {\n      error('There is already an actionName called \"' + actionName + '\"');\n    }\n    ah[actionName] = [handler, scope];\n  },\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {String} actionName Action to call.\n   * @param {JSON} data JSON data to send.\n   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers\n   */\n  send: function messageHandlerSend(actionName, data, transfers) {\n    var message = {\n      action: actionName,\n      data: data\n    };\n    this.postMessage(message, transfers);\n  },\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that other side will callback with the response.\n   * @param {String} actionName Action to call.\n   * @param {JSON} data JSON data to send.\n   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise:\n    function messageHandlerSendWithPromise(actionName, data, transfers) {\n    var callbackId = this.callbackIndex++;\n    var message = {\n      action: actionName,\n      data: data,\n      callbackId: callbackId\n    };\n    var capability = createPromiseCapability();\n    this.callbacksCapabilities[callbackId] = capability;\n    try {\n      this.postMessage(message, transfers);\n    } catch (e) {\n      capability.reject(e);\n    }\n    return capability.promise;\n  },\n  /**\n   * Sends raw message to the comObj.\n   * @private\n   * @param message {Object} Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   */\n  postMessage: function (message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n};\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = JpxImage;\n}\n\nfunction loadJpegStream(id, imageUrl, objs) {\n  var img = new Image();\n  img.onload = (function loadJpegStream_onloadClosure() {\n    objs.resolve(id, img);\n  });\n  img.onerror = (function loadJpegStream_onerrorClosure() {\n    objs.resolve(id, null);\n    warn('Error during JPEG image loading');\n  });\n  img.src = imageUrl;\n}","// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// when used in node, this will actually load the util module we depend on\n// versus loading the builtin util module as happens otherwise\n// this is a bug in node module loading as far as I am concerned\nvar util = require('util/');\n\nvar pSlice = Array.prototype.slice;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  }\n  else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = stackStartFunction.name;\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction replacer(key, value) {\n  if (util.isUndefined(value)) {\n    return '' + value;\n  }\n  if (util.isNumber(value) && !isFinite(value)) {\n    return value.toString();\n  }\n  if (util.isFunction(value) || util.isRegExp(value)) {\n    return value.toString();\n  }\n  return value;\n}\n\nfunction truncate(s, n) {\n  if (util.isString(s)) {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\n\nfunction getMessage(self) {\n  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(JSON.stringify(self.expected, replacer), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {\n    if (actual.length != expected.length) return false;\n\n    for (var i = 0; i < actual.length; i++) {\n      if (actual[i] !== expected[i]) return false;\n    }\n\n    return true;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!util.isObject(actual) && !util.isObject(expected)) {\n    return actual == expected;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b) {\n  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b)) {\n    return a === b;\n  }\n  var aIsArgs = isArguments(a),\n      bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b);\n  }\n  var ka = objectKeys(a),\n      kb = objectKeys(b),\n      key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key])) return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  } else if (actual instanceof expected) {\n    return true;\n  } else if (expected.call({}, actual) === true) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (util.isString(expected)) {\n    message = expected;\n    expected = null;\n  }\n\n  try {\n    block();\n  } catch (e) {\n    actual = e;\n  }\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  if (!shouldThrow && expectedException(actual, expected)) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/message) {\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));\n};\n\nassert.ifError = function(err) { if (err) {throw err;}};\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","'use strict';\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\n\n// 1 11111111 00000000000000000000000 => 4286578688 => 0xff800000 (see IEEE 754-2008)\nvar NINF = 0xff800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = NINF;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_VIEW[ 0 ];\n","'use strict';\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\n\n// 0 11111111 00000000000000000000000 => 2139095040 => 0x7f800000 (see IEEE 754-2008)\nvar PINF = 0x7f800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = PINF;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_VIEW[ 0 ];\n","/*! dicom-parser - v1.1.0 - 2015-07-20 | (c) 2014 Chris Hafey | https://github.com/chafey/dicomParser */\n(function (root, factory) {\n\n    // node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    }\n    else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else {\n        // Browser globals\n        if(typeof cornerstone === 'undefined'){\n            dicomParser = {};\n\n            // meteor\n            if (typeof Package !== 'undefined') {\n                root.dicomParser = dicomParser;\n            }\n        }\n        dicomParser = factory();\n    }\n}(this, function () {\n\n    /**\n     * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.  If the options\n     * argument is supplied and it contains the untilTag property, parsing will stop once that\n     * tag is encoutered.  This can be used to parse partial byte streams.\n     *\n     * @param byteArray the byte array\n     * @param options object to control parsing behavior (optional)\n     * @returns {DataSet}\n     * @throws error if an error occurs while parsing.  The exception object will contain a property dataSet with the\n     *         elements successfully parsed before the error.\n     */\nvar dicomParser = (function(dicomParser) {\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.parseDicom = function(byteArray, options) {\n\n        if(byteArray === undefined)\n        {\n            throw \"dicomParser.parseDicom: missing required parameter 'byteArray'\";\n        }\n\n        var littleEndianByteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n\n        function readPrefix()\n        {\n            littleEndianByteStream.seek(128);\n            var prefix = littleEndianByteStream.readFixedString(4);\n            if(prefix !== \"DICM\")\n            {\n                throw \"dicomParser.parseDicom: DICM prefix not found at location 132\";\n            }\n        }\n\n        function readPart10Header()\n        {\n            // Per the DICOM standard, the header is always encoded in Explicit VR Little Endian (see PS3.10, section 7.1)\n            // so use littleEndianByteStream throughout this method regardless of the transfer syntax\n            readPrefix();\n\n            var warnings = [];\n            var elements = {};\n            while(littleEndianByteStream.position < littleEndianByteStream.byteArray.length) {\n                var position = littleEndianByteStream.position;\n                var element = dicomParser.readDicomElementExplicit(littleEndianByteStream, warnings);\n                if(element.tag > 'x0002ffff') {\n                    littleEndianByteStream.position = position;\n                    break;\n                }\n                // Cache the littleEndianByteArrayParser for meta header elements, since the rest of the data set may be big endian\n                // and this parser will be needed later if the meta header values are to be read.\n                element.parser = dicomParser.littleEndianByteArrayParser;\n                elements[element.tag] = element;\n            }\n            var metaHeaderDataSet = new dicomParser.DataSet(littleEndianByteStream.byteArrayParser, littleEndianByteStream.byteArray, elements);\n            metaHeaderDataSet.warnings = littleEndianByteStream.warnings;\n            return metaHeaderDataSet;\n        }\n\n        function readTransferSyntax(metaHeaderDataSet) {\n            if(metaHeaderDataSet.elements.x00020010 === undefined) {\n                throw 'dicomParser.parseDicom: missing required meta header attribute 0002,0010';\n            }\n            var transferSyntaxElement = metaHeaderDataSet.elements.x00020010;\n            return dicomParser.readFixedString(littleEndianByteStream.byteArray, transferSyntaxElement.dataOffset, transferSyntaxElement.length);\n        }\n\n        function isExplicit(transferSyntax) {\n            if(transferSyntax === '1.2.840.10008.1.2') // implicit little endian\n            {\n                return false;\n            }\n            // all other transfer syntaxes should be explicit\n            return true;\n        }\n\n        function getDataSetByteStream(transferSyntax) {\n            if(transferSyntax === '1.2.840.10008.1.2.2') // explicit big endian\n            {\n                return new dicomParser.ByteStream(dicomParser.bigEndianByteArrayParser, byteArray, littleEndianByteStream.position);\n            }\n            else\n            {\n                // all other transfer syntaxes are little endian; only the pixel encoding differs\n                // make a new stream so the metaheader warnings don't come along for the ride\n                return new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray, littleEndianByteStream.position);\n            }\n        }\n\n        function mergeDataSets(metaHeaderDataSet, instanceDataSet)\n        {\n            for (var propertyName in metaHeaderDataSet.elements)\n            {\n                if(metaHeaderDataSet.elements.hasOwnProperty(propertyName))\n                {\n                    instanceDataSet.elements[propertyName] = metaHeaderDataSet.elements[propertyName];\n                }\n            }\n            if (metaHeaderDataSet.warnings !== undefined) {\n                instanceDataSet.warnings = metaHeaderDataSet.warnings.concat(instanceDataSet.warnings);\n            }\n            return instanceDataSet;\n        }\n\n        function readDataSet(metaHeaderDataSet)\n        {\n            var transferSyntax = readTransferSyntax(metaHeaderDataSet);\n            var explicit = isExplicit(transferSyntax);\n            var dataSetByteStream = getDataSetByteStream(transferSyntax);\n\n            var elements = {};\n            var dataSet = new dicomParser.DataSet(dataSetByteStream.byteArrayParser, dataSetByteStream.byteArray, elements);\n            dataSet.warnings = dataSetByteStream.warnings;\n\n            try{\n                if(explicit) {\n                    dicomParser.parseDicomDataSetExplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n                }\n                else\n                {\n                    dicomParser.parseDicomDataSetImplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n                }\n            }\n            catch(e) {\n                var ex = {\n                    exception: e,\n                    dataSet: dataSet\n                };\n                throw ex;\n            }\n            return dataSet;\n        }\n\n        // main function here\n        function parseTheByteStream() {\n            var metaHeaderDataSet = readPart10Header();\n\n            var dataSet = readDataSet(metaHeaderDataSet);\n\n            return mergeDataSets(metaHeaderDataSet, dataSet);\n        }\n\n        // This is where we actually start parsing\n        return parseTheByteStream();\n    };\n\n    return dicomParser;\n})(dicomParser);\n\nvar dicomParser = (function (dicomParser) {\n    \"use strict\";\n\n    if (dicomParser === undefined) {\n        dicomParser = {};\n    }\n\n    /**\n     * converts an explicit dataSet to a javascript object\n     * @param dataSet\n     * @param options\n     */\n    dicomParser.explicitDataSetToJS = function (dataSet, options) {\n\n        if(dataSet === undefined) {\n            throw 'dicomParser.explicitDataSetToJS: missing required parameter dataSet';\n        }\n\n        options = options || {\n            omitPrivateAttibutes: true, // true if private elements should be omitted\n            maxElementLength : 128      // maximum element length to try and convert to string format\n        };\n\n        var result = {\n\n        };\n\n        for(var tag in dataSet.elements) {\n            var element = dataSet.elements[tag];\n\n            // skip this element if it a private element and our options specify that we should\n            if(options.omitPrivateAttibutes === true && dicomParser.isPrivateTag(tag))\n            {\n                continue;\n            }\n\n            if(element.items) {\n                // handle sequences\n                var sequenceItems = [];\n                for(var i=0; i < element.items.length; i++) {\n                    sequenceItems.push(dicomParser.explicitDataSetToJS(element.items[i].dataSet, options));\n                }\n                result[tag] = sequenceItems;\n            } else {\n                var asString;\n                asString = undefined;\n                if(element.length < options.maxElementLength) {\n                    asString = dicomParser.explicitElementToString(dataSet, element);\n                }\n\n                if(asString !== undefined) {\n                    result[tag] = asString;\n                }  else {\n                    result[tag] = {\n                        dataOffset: element.dataOffset,\n                        length : element.length\n                    };\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\nvar dicomParser = (function (dicomParser) {\n    \"use strict\";\n\n    if (dicomParser === undefined) {\n        dicomParser = {};\n    }\n\n    /**\n     * Converts an explicit VR element to a string or undefined if it is not possible to convert.\n     * Throws an error if an implicit element is supplied\n     * @param dataSet\n     * @param element\n     * @returns {*}\n     */\n    dicomParser.explicitElementToString = function(dataSet, element)\n    {\n        if(dataSet === undefined || element === undefined) {\n            throw 'dicomParser.explicitElementToString: missing required parameters';\n        }\n        if(element.vr === undefined) {\n            throw 'dicomParser.explicitElementToString: cannot convert implicit element to string';\n        }\n        var vr = element.vr;\n        var tag = element.tag;\n\n        var textResult;\n\n        function multiElementToString(numItems, func) {\n            var result = \"\";\n            for(var i=0; i < numItems; i++) {\n                if(i !== 0) {\n                    result += '/';\n                }\n                result += func.call(dataSet, tag).toString();\n            }\n            return result;\n        }\n\n        if(dicomParser.isStringVr(vr) === true)\n        {\n            textResult = dataSet.string(tag);\n        }\n        else if (vr == 'AT') {\n            var num = dataSet.uint32(tag);\n            if(num === undefined) {\n                return undefined;\n            }\n            if (num < 0)\n            {\n                num = 0xFFFFFFFF + num + 1;\n            }\n\n            return 'x' + num.toString(16).toUpperCase();\n        }\n        else if (vr == 'US')\n        {\n            textResult = multiElementToString(element.length / 2, dataSet.uint16);\n        }\n        else if(vr === 'SS')\n        {\n            textResult = multiElementToString(element.length / 2, dataSet.int16);\n        }\n        else if (vr == 'UL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.uint32);\n        }\n        else if(vr === 'SL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.int32);\n        }\n        else if(vr == 'FD')\n        {\n            textResult = multiElementToString(element.length / 8, dataSet.int32);\n        }\n        else if(vr == 'FL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.float);\n        }\n\n        return textResult;\n    };\n    return dicomParser;\n}(dicomParser));\n/**\n * Utility functions for dealing with DICOM\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    var stringVrs = {\n        AE: true,\n        AS: true,\n        AT: false,\n        CS: true,\n        DA: true,\n        DS: true,\n        DT: true,\n        FL: false,\n        FD: false,\n        IS: true,\n        LO: true,\n        LT: true,\n        OB: false,\n        OD: false,\n        OF: false,\n        OW: false,\n        PN: true,\n        SH: true,\n        SL: false,\n        SQ: false,\n        SS: false,\n        ST: true,\n        TM: true,\n        UI: true,\n        UL: false,\n        UN: undefined, // dunno\n        UR: true,\n        US: false,\n        UT: true\n    };\n\n    /**\n     * Tests to see if vr is a string or not.\n     * @param vr\n     * @returns true if string, false it not string, undefined if unknown vr or UN type\n     */\n    dicomParser.isStringVr = function(vr)\n    {\n        return stringVrs[vr];\n    };\n\n    /**\n     * Tests to see if a given tag in the format xggggeeee is a private tag or not\n     * @param tag\n     * @returns {boolean}\n     */\n    dicomParser.isPrivateTag = function(tag)\n    {\n        var lastGroupDigit = parseInt(tag[4]);\n        var groupIsOdd = (lastGroupDigit % 2) === 1;\n        return groupIsOdd;\n    };\n\n    /**\n     * Parses a PN formatted string into a javascript object with properties for givenName, familyName, middleName, prefix and suffix\n     * @param personName a string in the PN VR format\n     * @param index\n     * @returns {*} javascript object with properties for givenName, familyName, middleName, prefix and suffix or undefined if no element or data\n     */\n    dicomParser.parsePN = function(personName) {\n        if(personName === undefined) {\n            return undefined;\n        }\n        var stringValues = personName.split('^');\n        return {\n            familyName: stringValues[0],\n            givenName: stringValues[1],\n            middleName: stringValues[2],\n            prefix: stringValues[3],\n            suffix: stringValues[4]\n        };\n    };\n\n    /**\n     * Parses a DA formatted string into a Javascript object\n     * @param date a string in the DA VR format\n     * @returns {*} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n     */\n    dicomParser.parseDA = function(date)\n    {\n        if(date && date.length === 8)\n        {\n            var yyyy = parseInt(date.substring(0, 4), 10);\n            var mm = parseInt(date.substring(4, 6), 10);\n            var dd = parseInt(date.substring(6, 8), 10);\n\n            return {\n                year: yyyy,\n                month: mm,\n                day: dd\n            };\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n     * @param time a string in the TM VR format\n     * @returns {*} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n     */\n    dicomParser.parseTM = function(time) {\n\n        if (time.length >= 2) // must at least have HH\n        {\n            // 0123456789\n            // HHMMSS.FFFFFF\n            var hh = parseInt(time.substring(0, 2), 10);\n            var mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n            var ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n            var ffffff = time.length >= 8 ? parseInt(time.substring(7, 13), 10) : undefined;\n\n            return {\n                hours: hh,\n                minutes: mm,\n                seconds: ss,\n                fractionalSeconds: ffffff\n            };\n        }\n        return undefined;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getPixelDataFromFragments(byteStream, fragments, bufferSize)\n    {\n        // if there is only one fragment, return a view on this array to avoid copying\n        if(fragments.length === 1) {\n            return new Uint8Array(byteStream.byteArray.buffer, fragments[0].dataOffset, fragments[0].length);\n        }\n\n        // more than one fragment, combine all of the fragments into one buffer\n        var pixelData = new Uint8Array(bufferSize);\n        var pixelDataIndex = 0;\n        for(var i=0; i < fragments.length; i++) {\n            var fragmentOffset = fragments[i].dataOffset;\n            for(var j=0; j < fragments[i].length; j++) {\n                pixelData[pixelDataIndex++] = byteStream.byteArray[fragmentOffset++];\n            }\n        }\n\n        return pixelData;\n    }\n\n    function readFragmentsUntil(byteStream, endOfFrame) {\n        // Read fragments until we reach endOfFrame\n        var fragments = [];\n        var bufferSize = 0;\n        while(byteStream.position < endOfFrame && byteStream.position < byteStream.byteArray.length) {\n            var fragment = dicomParser.readSequenceItem(byteStream);\n            // NOTE: we only encounter this for the sequence delimiter tag when extracting the last frame\n            if(fragment.tag === 'xfffee0dd') {\n                break;\n            }\n            fragments.push(fragment);\n            byteStream.seek(fragment.length);\n            bufferSize += fragment.length;\n        }\n\n        // Convert the fragments into a single pixelData buffer\n        var pixelData = getPixelDataFromFragments(byteStream, fragments, bufferSize);\n        return pixelData;\n    }\n\n    function readEncapsulatedPixelDataWithBasicOffsetTable(pixelDataElement, byteStream, frame) {\n        //  validate that we have an offset for this frame\n        var numFrames = pixelDataElement.basicOffsetTable.length;\n        if(frame > numFrames) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter frame exceeds number of frames in basic offset table\";\n        }\n\n        // move to the start of this frame\n        var frameOffset = pixelDataElement.basicOffsetTable[frame];\n        byteStream.seek(frameOffset);\n\n        // Find the end of this frame\n        var endOfFrameOffset = pixelDataElement.basicOffsetTable[frame + 1];\n        if(endOfFrameOffset === undefined) { // special case for last frame\n            endOfFrameOffset = byteStream.position + pixelDataElement.length;\n        }\n\n        // read this frame\n        var pixelData = readFragmentsUntil(byteStream, endOfFrameOffset);\n        return pixelData;\n    }\n\n    function readEncapsulatedDataNoBasicOffsetTable(pixelDataElement, byteStream, frame) {\n        // if the basic offset table is empty, this is a single frame so make sure the requested\n        // frame is 0\n        if(frame !== 0) {\n            throw 'dicomParser.readEncapsulatedPixelData: non zero frame specified for single frame encapsulated pixel data';\n        }\n\n        // read this frame\n        var endOfFrame = byteStream.position + pixelDataElement.length;\n        var pixelData = readFragmentsUntil(byteStream, endOfFrame);\n        return pixelData;\n    }\n\n    /**\n     * Returns the pixel data for the specified frame in an encapsulated pixel data element\n     *\n     * @param dataSet - the dataSet containing the encapsulated pixel data\n     * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n     * @param frame - the zero based frame index\n     * @returns Uint8Array with the encapsulated pixel data\n     */\n    dicomParser.readEncapsulatedPixelData = function(dataSet, pixelDataElement, frame)\n    {\n        if(dataSet === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'dataSet'\";\n        }\n        if(pixelDataElement === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'element'\";\n        }\n        if(frame === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'frame'\";\n        }\n        if(pixelDataElement.tag !== 'x7fe00010') {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to non pixel data tag (expected tag = x7fe00010'\";\n        }\n        if(pixelDataElement.encapsulatedPixelData !== true) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.hadUndefinedLength !== true) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.basicOffsetTable === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.fragments === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(frame < 0) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'frame' must be >= 0\";\n        }\n\n        // seek past the basic offset table (no need to parse it again since we already have)\n        var byteStream = new dicomParser.ByteStream(dataSet.byteArrayParser, dataSet.byteArray, pixelDataElement.dataOffset);\n        var basicOffsetTable = dicomParser.readSequenceItem(byteStream);\n        if(basicOffsetTable.tag !== 'xfffee000')\n        {\n            throw \"dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000\";\n        }\n        byteStream.seek(basicOffsetTable.length);\n\n        // If the basic offset table is empty (no entries), it is a single frame.  If it is not empty,\n        // it has at least one frame so use the basic offset table to find the bytes\n        if(pixelDataElement.basicOffsetTable.length !== 0)\n        {\n            return readEncapsulatedPixelDataWithBasicOffsetTable(pixelDataElement, byteStream, frame);\n        }\n        else\n        {\n            return readEncapsulatedDataNoBasicOffsetTable(pixelDataElement, byteStream, frame);\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n\n/**\n * Internal helper functions for parsing different types from a big-endian byte array\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.bigEndianByteArrayParser = {\n        /**\n         *\n         * Parses an unsigned int 16 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readUint16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n            }\n            return (byteArray[position] << 8) + byteArray[position + 1];\n        },\n\n        /**\n         *\n         * Parses a signed int 16 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readInt16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n            }\n            var int16 = (byteArray[position] << 8) + byteArray[position + 1];\n            // fix sign\n            if (int16 & 0x8000) {\n                int16 = int16 - 0xFFFF - 1;\n            }\n            return int16;\n        },\n\n        /**\n         * Parses an unsigned int 32 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readUint32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n            }\n\n            var uint32 = (256 * (256 * (256 * byteArray[position] +\n                                              byteArray[position + 1]) +\n                                              byteArray[position + 2]) +\n                                              byteArray[position + 3]);\n\n            return uint32;\n        },\n\n        /**\n         * Parses a signed int 32 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readInt32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n            }\n\n            var int32 = ((byteArray[position] << 24) +\n                         (byteArray[position + 1] << 16) +\n                         (byteArray[position + 2] << 8) +\n                          byteArray[position + 3]);\n\n            return int32;\n        },\n\n        /**\n         * Parses 32-bit float from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 32-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readFloat: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readFloat: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(4);\n            byteArrayForParsingFloat[3] = byteArray[position];\n            byteArrayForParsingFloat[2] = byteArray[position + 1];\n            byteArrayForParsingFloat[1] = byteArray[position + 2];\n            byteArrayForParsingFloat[0] = byteArray[position + 3];\n            var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        },\n\n        /**\n         * Parses 64-bit float from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 64-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readDouble: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readDouble: position cannot be less than 0';\n            }\n\n            if (position + 8 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(8);\n            byteArrayForParsingFloat[7] = byteArray[position];\n            byteArrayForParsingFloat[6] = byteArray[position + 1];\n            byteArrayForParsingFloat[5] = byteArray[position + 2];\n            byteArrayForParsingFloat[4] = byteArray[position + 3];\n            byteArrayForParsingFloat[3] = byteArray[position + 4];\n            byteArrayForParsingFloat[2] = byteArray[position + 5];\n            byteArrayForParsingFloat[1] = byteArray[position + 6];\n            byteArrayForParsingFloat[0] = byteArray[position + 7];\n            var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions common to parsing byte arrays of any type\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.  Trailing and leading\n     * spaces are preserved (not trimmed)\n     * @param byteArray the byteArray to read from\n     * @param position the position in the byte array to read from\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n    dicomParser.readFixedString = function(byteArray, position, length)\n    {\n        if(length < 0)\n        {\n            throw 'readFixedString - length cannot be less than 0';\n        }\n\n        if(position + length > byteArray.length) {\n            throw 'dicomParser.readFixedString: attempt to read past end of buffer';\n        }\n\n        var result = \"\";\n        for(var i=0; i < length; i++)\n        {\n            var byte = byteArray[position + i];\n            if(byte === 0) {\n                position +=  length;\n                return result;\n            }\n            result += String.fromCharCode(byte);\n        }\n\n        return result;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n *\n * Internal helper class to assist with parsing. Supports reading from a byte\n * stream contained in a Uint8Array.  Example usage:\n *\n *  var byteArray = new Uint8Array(32);\n *  var byteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n *\n * */\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Constructor for ByteStream objects.\n     * @param byteArrayParser a parser for parsing the byte array\n     * @param byteArray a Uint8Array containing the byte stream\n     * @param position (optional) the position to start reading from.  0 if not specified\n     * @constructor\n     * @throws will throw an error if the byteArrayParser parameter is not present\n     * @throws will throw an error if the byteArray parameter is not present or invalid\n     * @throws will throw an error if the position parameter is not inside the byte array\n     */\n    dicomParser.ByteStream = function(byteArrayParser, byteArray, position) {\n        if(byteArrayParser === undefined)\n        {\n            throw \"dicomParser.ByteStream: missing required parameter 'byteArrayParser'\";\n        }\n        if(byteArray === undefined)\n        {\n            throw \"dicomParser.ByteStream: missing required parameter 'byteArray'\";\n        }\n        if((byteArray instanceof Uint8Array) === false) {\n            throw 'dicomParser.ByteStream: parameter byteArray is not of type Uint8Array';\n        }\n        if(position < 0)\n        {\n            throw \"dicomParser.ByteStream: parameter 'position' cannot be less than 0\";\n        }\n        if(position >= byteArray.length)\n        {\n            throw \"dicomParser.ByteStream: parameter 'position' cannot be greater than or equal to 'byteArray' length\";\n\n        }\n        this.byteArrayParser = byteArrayParser;\n        this.byteArray = byteArray;\n        this.position = position ? position : 0;\n        this.warnings = []; // array of string warnings encountered while parsing\n    };\n\n    /**\n     * Safely seeks through the byte stream.  Will throw an exception if an attempt\n     * is made to seek outside of the byte array.\n     * @param offset the number of bytes to add to the position\n     * @throws error if seek would cause position to be outside of the byteArray\n     */\n    dicomParser.ByteStream.prototype.seek = function(offset)\n    {\n        if(this.position + offset < 0)\n        {\n            throw \"cannot seek to position < 0\";\n        }\n        this.position += offset;\n    };\n\n    /**\n     * Returns a new ByteStream object from the current position and of the requested number of bytes\n     * @param numBytes the length of the byte array for the ByteStream to contain\n     * @returns {dicomParser.ByteStream}\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readByteStream = function(numBytes)\n    {\n        if(this.position + numBytes > this.byteArray.length) {\n            throw 'readByteStream - buffer overread';\n        }\n        var byteArrayView = new Uint8Array(this.byteArray.buffer, this.position, numBytes);\n        this.position += numBytes;\n        return new dicomParser.ByteStream(this.byteArrayParser, byteArrayView);\n    };\n\n    /**\n     *\n     * Parses an unsigned int 16 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readUint16 = function()\n    {\n        var result = this.byteArrayParser.readUint16(this.byteArray, this.position);\n        this.position += 2;\n        return result;\n    };\n\n    /**\n     * Parses an unsigned int 32 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parse unsigned int 32\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readUint32 = function()\n    {\n        var result = this.byteArrayParser.readUint32(this.byteArray, this.position);\n        this.position += 4;\n        return result;\n    };\n\n    /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readFixedString = function(length)\n    {\n        var result = dicomParser.readFixedString(this.byteArray, this.position, length);\n        this.position += length;\n        return result;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n *\n * The DataSet class encapsulates a collection of DICOM Elements and provides various functions\n * to access the data in those elements\n *\n * Rules for handling padded spaces:\n * DS = Strip leading and trailing spaces\n * DT = Strip trailing spaces\n * IS = Strip leading and trailing spaces\n * PN = Strip trailing spaces\n * TM = Strip trailing spaces\n * AE = Strip leading and trailing spaces\n * CS = Strip leading and trailing spaces\n * SH = Strip leading and trailing spaces\n * LO = Strip leading and trailing spaces\n * LT = Strip trailing spaces\n * ST = Strip trailing spaces\n * UT = Strip trailing spaces\n *\n */\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getByteArrayParser(element, defaultParser)\n    {\n        return (element.parser !== undefined ? element.parser : defaultParser);\n    }\n\n    /**\n     * Constructs a new DataSet given byteArray and collection of elements\n     * @param byteArrayParser\n     * @param byteArray\n     * @param elements\n     * @constructor\n     */\n    dicomParser.DataSet = function(byteArrayParser, byteArray, elements)\n    {\n        this.byteArrayParser = byteArrayParser;\n        this.byteArray = byteArray;\n        this.elements = elements;\n    };\n\n    /**\n     * Finds the element for tag and returns an unsigned int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 16 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.uint16 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readUint16(this.byteArray, element.dataOffset + (index *2));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an signed int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 16 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.int16 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readInt16(this.byteArray, element.dataOffset + (index * 2));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an unsigned int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 32 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.uint32 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readUint32(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an signed int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 32 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.int32 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readInt32(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns a 32 bit floating point number (VR=FL) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.float = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readFloat(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns a 64 bit floating point number (VR=FD) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or doesn't has data of length 0\n     */\n    dicomParser.DataSet.prototype.double = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readDouble(this.byteArray, element.dataOffset + (index * 8));\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns the number of string values for the element\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @returns {*} the number of string values or undefined if the attribute is not present or has zero length data\n     */\n    dicomParser.DataSet.prototype.numStringValues = function(tag)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            var numMatching = fixedString.match(/\\\\/g);\n            if(numMatching === null)\n            {\n                return 1;\n            }\n            return numMatching.length + 1;\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns a string for the element.  If index is provided, the element is assumed to be\n     * multi-valued and will return the component specified by index.  Undefined is returned\n     * if there is no component with the specified index, the element does not exist or is zero length.\n     *\n     * Use this function for VR types of AE, CS, SH and LO\n     *\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the entire string\n     * @returns {*}\n     */\n    dicomParser.DataSet.prototype.string = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            if(index >= 0)\n            {\n                var values = fixedString.split('\\\\');\n                // trim trailing spaces\n                return values[index].trim();\n            }\n            else\n            {\n                // trim trailing spaces\n                return fixedString.trim();\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns a string with the leading spaces preserved and trailing spaces removed.\n     *\n     * Use this function to access data for VRs of type UT, ST and LT\n     *\n     * @param tag\n     * @param index\n     * @returns {*}\n     */\n    dicomParser.DataSet.prototype.text = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            if(index >= 0)\n            {\n                var values = fixedString.split('\\\\');\n                return values[index].replace(/ +$/, '');\n            }\n            else\n            {\n                return fixedString.replace(/ +$/, '');\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a string to a float for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} a floating point number or undefined if not present or data not long enough\n     */\n    dicomParser.DataSet.prototype.floatString = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            index = (index !== undefined) ? index : 0;\n            var value = this.string(tag, index);\n            if(value !== undefined) {\n                return parseFloat(value);\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a string to an integer for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} an integer or undefined if not present or data not long enough\n     */\n    dicomParser.DataSet.prototype.intString = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0) {\n            index = (index !== undefined) ? index : 0;\n            var value = this.string(tag, index);\n            if(value !== undefined) {\n                return parseInt(value);\n            }\n        }\n        return undefined;\n    };\n\n    //dicomParser.DataSet = DataSet;\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads an encapsulated pixel data element and adds an array of fragments to the element\n     * containing the offset and length of each fragment and any offsets from the basic offset\n     * table\n     * @param byteStream\n     * @param element\n     */\n    dicomParser.findEndOfEncapsulatedElement = function(byteStream, element, warnings)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'element'\";\n        }\n\n        element.encapsulatedPixelData = true;\n        element.basicOffsetTable = [];\n        element.fragments = [];\n        var basicOffsetTableItemTag = dicomParser.readTag(byteStream);\n        if(basicOffsetTableItemTag !== 'xfffee000') {\n            throw \"dicomParser.findEndOfEncapsulatedElement: basic offset table not found\";\n        }\n        var basicOffsetTableItemlength = byteStream.readUint32();\n        var numFragments = basicOffsetTableItemlength / 4;\n        for(var i =0; i < numFragments; i++) {\n            var offset = byteStream.readUint32();\n            element.basicOffsetTable.push(offset);\n        }\n        var baseOffset = byteStream.position;\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var tag = dicomParser.readTag(byteStream);\n            var length = byteStream.readUint32();\n            if(tag === 'xfffee0dd')\n            {\n                byteStream.seek(length);\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n            else if(tag === 'xfffee000')\n            {\n                element.fragments.push({\n                    offset: byteStream.position - baseOffset - 8,\n                    position : byteStream.position,\n                    length : length\n                });\n            }\n            else {\n                if(warnings) {\n                    warnings.push('unexpected tag ' + tag + ' while searching for end of pixel data element with undefined length');\n                }\n                if(length > byteStream.byteArray.length - byteStream.position)\n                {\n                    // fix length\n                    length = byteStream.byteArray.length - byteStream.position;\n                }\n                element.fragments.push({\n                    offset: byteStream.position - baseOffset - 8,\n                    position : byteStream.position,\n                    length : length\n                });\n                byteStream.seek(length);\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n\n            byteStream.seek(length);\n        }\n\n        if(warnings) {\n            warnings.push(\"pixel data element \" + element.tag + \" missing sequence delimiter tag xfffee0dd\");\n        }\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * reads from the byte stream until it finds the magic numbers for the item delimitation item\n     * and then sets the length of the element\n     * @param byteStream\n     * @param element\n     */\n    dicomParser.findItemDelimitationItemAndSetElementLength = function(byteStream, element)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'\";\n        }\n\n        var itemDelimitationItemLength = 8; // group, element, length\n        var maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n        while(byteStream.position <= maxPosition)\n        {\n            var groupNumber = byteStream.readUint16();\n            if(groupNumber === 0xfffe)\n            {\n                var elementNumber = byteStream.readUint16();\n                if(elementNumber === 0xe00d)\n                {\n                    // NOTE: It would be better to also check for the length to be 0 as part of the check above\n                    // but we will just log a warning for now\n                    var itemDelimiterLength = byteStream.readUint32(); // the length\n                    if(itemDelimiterLength !== 0) {\n                        byteStream.warnings('encountered non zero length following item delimiter at position' + byteStream.position - 4 + \" while reading element of undefined length with tag ' + element.tag\");\n                    }\n                    element.length = byteStream.position - element.dataOffset;\n                    return;\n\n                }\n            }\n        }\n\n        // No item delimitation item - silently set the length to the end of the buffer and set the position past the end of the buffer\n        element.length = byteStream.byteArray.length - element.dataOffset;\n        byteStream.seek(byteStream.byteArray.length - byteStream.position);\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing different types from a little-endian byte array\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.littleEndianByteArrayParser = {\n        /**\n         *\n         * Parses an unsigned int 16 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readUint16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n            }\n            return byteArray[position] + (byteArray[position + 1] * 256);\n        },\n\n        /**\n         *\n         * Parses a signed int 16 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readInt16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n            }\n            var int16 = byteArray[position] + (byteArray[position + 1] << 8);\n            // fix sign\n            if (int16 & 0x8000) {\n                int16 = int16 - 0xFFFF - 1;\n            }\n            return int16;\n        },\n\n\n        /**\n         * Parses an unsigned int 32 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readUint32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n            }\n\n            var uint32 = (byteArray[position] +\n            (byteArray[position + 1] * 256) +\n            (byteArray[position + 2] * 256 * 256) +\n            (byteArray[position + 3] * 256 * 256 * 256 ));\n\n            return uint32;\n        },\n\n        /**\n         * Parses a signed int 32 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readInt32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n            }\n\n            var int32 = (byteArray[position] +\n            (byteArray[position + 1] << 8) +\n            (byteArray[position + 2] << 16) +\n            (byteArray[position + 3] << 24));\n\n            return int32;\n\n        },\n\n        /**\n         * Parses 32-bit float from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 32-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readFloat: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readFloat: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(4);\n            byteArrayForParsingFloat[0] = byteArray[position];\n            byteArrayForParsingFloat[1] = byteArray[position + 1];\n            byteArrayForParsingFloat[2] = byteArray[position + 2];\n            byteArrayForParsingFloat[3] = byteArray[position + 3];\n            var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        },\n\n        /**\n         * Parses 64-bit float from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 64-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readDouble: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readDouble: position cannot be less than 0';\n            }\n\n            if (position + 8 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(8);\n            byteArrayForParsingFloat[0] = byteArray[position];\n            byteArrayForParsingFloat[1] = byteArray[position + 1];\n            byteArrayForParsingFloat[2] = byteArray[position + 2];\n            byteArrayForParsingFloat[3] = byteArray[position + 3];\n            byteArrayForParsingFloat[4] = byteArray[position + 4];\n            byteArrayForParsingFloat[5] = byteArray[position + 5];\n            byteArrayForParsingFloat[6] = byteArray[position + 6];\n            byteArrayForParsingFloat[7] = byteArray[position + 7];\n            var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing implicit and explicit DICOM data sets\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * reads an explicit data set\n     * @param byteStream the byte stream to read from\n     * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n     */\n    dicomParser.parseDicomDataSetExplicit = function (dataSet, byteStream, maxPosition, options) {\n\n        maxPosition = (maxPosition === undefined) ? byteStream.byteArray.length : maxPosition ;\n        options = options || {};\n\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.parseDicomDataSetExplicit: missing required parameter 'byteStream'\";\n        }\n        if(maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length)\n        {\n            throw \"dicomParser.parseDicomDataSetExplicit: invalid value for parameter 'maxPosition'\";\n        }\n        var elements = dataSet.elements;\n\n        while(byteStream.position < maxPosition)\n        {\n            var element = dicomParser.readDicomElementExplicit(byteStream, dataSet.warnings, options.untilTag);\n            elements[element.tag] = element;\n            if(element.tag === options.untilTag) {\n                return;\n            }\n        }\n        if(byteStream.position > maxPosition) {\n            throw \"dicomParser:parseDicomDataSetExplicit: buffer overrun\";\n        }\n    };\n\n    /**\n     * reads an implicit data set\n     * @param byteStream the byte stream to read from\n     * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n     */\n    dicomParser.parseDicomDataSetImplicit = function(dataSet, byteStream, maxPosition, options)\n    {\n        maxPosition = (maxPosition === undefined) ? dataSet.byteArray.length : maxPosition ;\n        options = options || {};\n\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.parseDicomDataSetImplicit: missing required parameter 'byteStream'\";\n        }\n        if(maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length)\n        {\n            throw \"dicomParser.parseDicomDataSetImplicit: invalid value for parameter 'maxPosition'\";\n        }\n\n        var elements = dataSet.elements;\n\n        while(byteStream.position < maxPosition)\n        {\n            var element = dicomParser.readDicomElementImplicit(byteStream, options.untilTag);\n            elements[element.tag] = element;\n            if(element.tag === options.untilTag) {\n                return;\n            }\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getDataLengthSizeInBytesForVR(vr)\n    {\n        if( vr === 'OB' ||\n            vr === 'OW' ||\n            vr === 'SQ' ||\n            vr === 'OF' ||\n            vr === 'UT' ||\n            vr === 'UN')\n        {\n            return 4;\n        }\n        else\n        {\n            return 2;\n        }\n    }\n\n    dicomParser.readDicomElementExplicit = function(byteStream, warnings, untilTag)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementExplicit: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            vr : byteStream.readFixedString(2)\n            // length set below based on VR\n            // dataOffset set below based on VR and size of length\n        };\n\n        var dataLengthSizeBytes = getDataLengthSizeInBytesForVR(element.vr);\n        if(dataLengthSizeBytes === 2)\n        {\n            element.length = byteStream.readUint16();\n            element.dataOffset = byteStream.position;\n        }\n        else\n        {\n            byteStream.seek(2);\n            element.length = byteStream.readUint32();\n            element.dataOffset = byteStream.position;\n        }\n\n        if(element.length === 4294967295)\n        {\n            element.hadUndefinedLength = true;\n        }\n\n        if(element.tag === untilTag) {\n            return element;\n        }\n\n        // if VR is SQ, parse the sequence items\n        if(element.vr === 'SQ')\n        {\n            dicomParser.readSequenceItemsExplicit(byteStream, element, warnings);\n            return element;\n        }\n        if(element.length === 4294967295)\n        {\n            if(element.tag === 'x7fe00010') {\n                dicomParser.findEndOfEncapsulatedElement(byteStream, element, warnings);\n                return element;\n            } else {\n                dicomParser.findItemDelimitationItemAndSetElementLength(byteStream, element);\n                return element;\n            }\n        }\n\n        byteStream.seek(element.length);\n        return element;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.readDicomElementImplicit = function(byteStream, untilTag)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            length: byteStream.readUint32(),\n            dataOffset :  byteStream.position\n        };\n\n        if(element.length === 4294967295)\n        {\n            element.hadUndefinedLength = true;\n        }\n\n        if(element.tag === untilTag) {\n            return element;\n        }\n\n        // peek ahead at the next tag to see if it looks like a sequence.  This is not 100%\n        // safe because a non sequence item could have data that has these bytes, but this\n        // is how to do it without a data dictionary.\n        if ((byteStream.position + 4) <= byteStream.byteArray.length) {\n            var nextTag = dicomParser.readTag(byteStream);\n            byteStream.seek(-4);\n\n            if (nextTag === 'xfffee000') {\n                // parse the sequence\n                dicomParser.readSequenceItemsImplicit(byteStream, element);\n                //element.length = byteStream.byteArray.length - element.dataOffset;\n                return element;\n            }\n        }\n\n        // if element is not a sequence and has undefined length, we have to\n        // scan the data for a magic number to figure out when it ends.\n        if(element.length === 4294967295)\n        {\n            dicomParser.findItemDelimitationItemAndSetElementLength(byteStream, element);\n            return element;\n        }\n\n        // non sequence element with known length, skip over the data part\n        byteStream.seek(element.length);\n        return element;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function readDicomDataSetExplicitUndefinedLength(byteStream, warnings)\n    {\n        var elements = {};\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var element = dicomParser.readDicomElementExplicit(byteStream, warnings);\n            elements[element.tag] = element;\n\n            // we hit an item delimiter tag, return the current offset to mark\n            // the end of this sequence item\n            if(element.tag === 'xfffee00d')\n            {\n                return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n            }\n\n        }\n\n        // eof encountered - log a warning and return what we have for the element\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item while reading sequence item of undefined length');\n        return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n\n    function readSequenceItemExplicit(byteStream, warnings)\n    {\n        var item = dicomParser.readSequenceItem(byteStream);\n\n        if(item.length === 4294967295)\n        {\n            item.hadUndefinedLength = true;\n            item.dataSet = readDicomDataSetExplicitUndefinedLength(byteStream, warnings);\n            item.length = byteStream.position - item.dataOffset;\n        }\n        else\n        {\n            item.dataSet = new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n            dicomParser.parseDicomDataSetExplicit(item.dataSet, byteStream, byteStream.position + item.length);\n        }\n        return item;\n    }\n\n    function readSQElementUndefinedLengthExplicit(byteStream, element, warnings)\n    {\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var item = readSequenceItemExplicit(byteStream, warnings);\n            element.items.push(item);\n\n            // If this is the sequence delimitation item, return the offset of the next element\n            if(item.tag === 'xfffee0dd')\n            {\n                // sequence delimitation item, update attr data length and return\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n        }\n\n        // eof encountered - log a warning and set the length of the element based on the buffer size\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item in sequence element of undefined length with tag ' + element.tag);\n        element.length = byteStream.byteArray.length - element.dataOffset;\n    }\n\n    function readSQElementKnownLengthExplicit(byteStream, element, warnings)\n    {\n        var maxPosition = element.dataOffset + element.length;\n        while(byteStream.position < maxPosition)\n        {\n            var item = readSequenceItemExplicit(byteStream, warnings);\n            element.items.push(item);\n        }\n    }\n\n    dicomParser.readSequenceItemsExplicit = function(byteStream, element, warnings)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsExplicit: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsExplicit: missing required parameter 'element'\";\n        }\n\n        element.items = [];\n\n        if(element.length === 4294967295)\n        {\n            readSQElementUndefinedLengthExplicit(byteStream, element);\n        }\n        else\n        {\n            readSQElementKnownLengthExplicit(byteStream, element, warnings);\n        }\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function readDicomDataSetImplicitUndefinedLength(byteStream)\n    {\n        var elements = {};\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var element = dicomParser.readDicomElementImplicit(byteStream);\n            elements[element.tag] = element;\n\n            // we hit an item delimiter tag, return the current offset to mark\n            // the end of this sequence item\n            if(element.tag === 'xfffee00d')\n            {\n                return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n            }\n        }\n        // eof encountered - log a warning and return what we have for the element\n        byteStream.warnings.push('eof encountered before finding sequence item delimiter in sequence item of undefined length');\n        return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n\n    function readSequenceItemImplicit(byteStream)\n    {\n        var item = dicomParser.readSequenceItem(byteStream);\n\n        if(item.length === 4294967295)\n        {\n            item.hadUndefinedLength = true;\n            item.dataSet = readDicomDataSetImplicitUndefinedLength(byteStream);\n            item.length = byteStream.position - item.dataOffset;\n        }\n        else\n        {\n            item.dataSet = new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n            dicomParser.parseDicomDataSetImplicit(item.dataSet, byteStream, byteStream.position + item.length);\n        }\n        return item;\n    }\n\n    function readSQElementUndefinedLengthImplicit(byteStream, element)\n    {\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var item = readSequenceItemImplicit(byteStream);\n            element.items.push(item);\n\n            // If this is the sequence delimitation item, return the offset of the next element\n            if(item.tag === 'xfffee0dd')\n            {\n                // sequence delimitation item, update attr data length and return\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n        }\n\n        // eof encountered - log a warning and set the length of the element based on the buffer size\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item in sequence of undefined length');\n        element.length = byteStream.byteArray.length - element.dataOffset;\n    }\n\n    function readSQElementKnownLengthImplicit(byteStream, element)\n    {\n        var maxPosition = element.dataOffset + element.length;\n        while(byteStream.position < maxPosition)\n        {\n            var item = readSequenceItemImplicit(byteStream);\n            element.items.push(item);\n        }\n    }\n\n    /**\n     * Reads sequence items for an element in an implicit little endian byte stream\n     * @param byteStream the implicit little endian byte stream\n     * @param element the element to read the sequence items for\n     */\n    dicomParser.readSequenceItemsImplicit = function(byteStream, element)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsImplicit: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsImplicit: missing required parameter 'element'\";\n        }\n\n        element.items = [];\n\n        if(element.length === 4294967295)\n        {\n            readSQElementUndefinedLengthImplicit(byteStream, element);\n        }\n        else\n        {\n            readSQElementKnownLengthImplicit(byteStream, element);\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads the tag and length of a sequence item and returns them as an object with the following properties\n     *  tag : string for the tag of this element in the format xggggeeee\n     *  length: the number of bytes in this item or 4294967295 if undefined\n     *  dataOffset: the offset into the byteStream of the data for this item\n     * @param byteStream the byte\n     * @returns {{tag: string, length: integer, dataOffset: integer}}\n     */\n    dicomParser.readSequenceItem = function(byteStream)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItem: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            length : byteStream.readUint32(),\n            dataOffset :  byteStream.position\n        };\n\n        return element;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads a tag (group number and element number) from a byteStream\n     * @param byteStream the byte stream to read from\n     * @returns {string} the tag in format xggggeeee where gggg is the lowercase hex value of the group number\n     * and eeee is the lower case hex value of the element number\n     */\n    dicomParser.readTag = function(byteStream)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readTag: missing required parameter 'byteStream'\";\n        }\n\n        var groupNumber =  byteStream.readUint16() * 256 * 256;\n        var elementNumber = byteStream.readUint16();\n        var tag = \"x\" + ('00000000' + (groupNumber + elementNumber).toString(16)).substr(-8);\n        return tag;\n    };\n\n    return dicomParser;\n}(dicomParser));\n    return dicomParser;\n}));\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\n\n\n/*** Constructor ***/\njpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || function () {\n    this.hSamp = 0; // Horizontal sampling factor\n    this.quantTableSel = 0; // Quantization table destination selector\n    this.vSamp = 0; // Vertical\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.ComponentSpec;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\n\n\n/*** Constructor ***/\njpeg.lossless.DataStream = jpeg.lossless.DataStream || function (data, offset, length) {\n    this.buffer = new DataView(data, offset, length);\n    this.index = 0;\n};\n\n\n\njpeg.lossless.DataStream.prototype.get16 = function () {\n    var value = this.buffer.getUint16(this.index, false);\n    this.index += 2;\n    return value;\n};\n\n\n\njpeg.lossless.DataStream.prototype.get8 = function () {\n    var value = this.buffer.getUint8(this.index);\n    this.index += 1;\n    return value;\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.DataStream;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\njpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);\njpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || ((typeof require !== 'undefined') ? require('./huffman-table.js') : null);\njpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || ((typeof require !== 'undefined') ? require('./quantization-table.js') : null);\njpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || ((typeof require !== 'undefined') ? require('./scan-header.js') : null);\njpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || ((typeof require !== 'undefined') ? require('./frame-header.js') : null);\njpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);\n\n\n/*** Constructor ***/\njpeg.lossless.Decoder = jpeg.lossless.Decoder || function (buffer, numBytes) {\n    this.buffer = buffer;\n    this.frame = new jpeg.lossless.FrameHeader();\n    this.huffTable = new jpeg.lossless.HuffmanTable();\n    this.quantTable = new jpeg.lossless.QuantizationTable();\n    this.scan = new jpeg.lossless.ScanHeader();\n    this.DU = jpeg.lossless.Utils.createArray(10, 4, 64); // at most 10 data units in a MCU, at most 4 data units in one component\n    this.HuffTab = jpeg.lossless.Utils.createArray(4, 2, 50 * 256);\n    this.IDCT_Source = [];\n    this.nBlock = []; // number of blocks in the i-th Comp in a scan\n    this.acTab = jpeg.lossless.Utils.createArray(10, 1); // ac HuffTab for the i-th Comp in a scan\n    this.dcTab = jpeg.lossless.Utils.createArray(10, 1); // dc HuffTab for the i-th Comp in a scan\n    this.qTab = jpeg.lossless.Utils.createArray(10, 1); // quantization table for the i-th Comp in a scan\n    this.marker = 0;\n    this.markerIndex = 0;\n    this.numComp = 0;\n    this.restartInterval = 0;\n    this.selection = 0;\n    this.xDim = 0;\n    this.yDim = 0;\n    this.xLoc = 0;\n    this.yLoc = 0;\n    this.numBytes = 0;\n    this.outputData = null;\n    this.restarting = false;\n    this.mask = 0;\n\n    if (typeof numBytes !== \"undefined\") {\n        this.numBytes = numBytes;\n    }\n};\n\n\n/*** Static Pseudo-constants ***/\n\njpeg.lossless.Decoder.IDCT_P = [0, 5, 40, 16, 45, 2, 7, 42, 21, 56, 8, 61, 18, 47, 1, 4, 41, 23, 58, 13, 32, 24, 37, 10, 63, 17, 44, 3, 6, 43, 20,\n    57, 15, 34, 29, 48, 53, 26, 39, 9, 60, 19, 46, 22, 59, 12, 33, 31, 50, 55, 25, 36, 11, 62, 14, 35, 28, 49, 52, 27, 38, 30, 51, 54];\njpeg.lossless.Decoder.TABLE = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53,\n    10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];\njpeg.lossless.Decoder.MAX_HUFFMAN_SUBTREE = 50;\njpeg.lossless.Decoder.MSB = 0x80000000;\njpeg.lossless.Decoder.RESTART_MARKER_BEGIN = 0xFFD0;\njpeg.lossless.Decoder.RESTART_MARKER_END = 0xFFD7;\n\n/*** Prototype Methods ***/\n\njpeg.lossless.Decoder.prototype.decompress = function (buffer, offset, length) {\n    return this.decode(buffer, offset, length).buffer;\n};\n\n\n\njpeg.lossless.Decoder.prototype.decode = function (buffer, offset, length, numBytes) {\n    /*jslint bitwise: true */\n\n    var current, scanNum = 0, pred = [], i, compN, temp = [], index = [], mcuNum;\n\n    if (typeof buffer !== \"undefined\") {\n        this.buffer = buffer;\n    }\n\n    if (typeof numBytes !== \"undefined\") {\n        this.numBytes = numBytes;\n    }\n\n    this.stream = new jpeg.lossless.DataStream(this.buffer, offset, length);\n    this.buffer = null;\n\n    this.xLoc = 0;\n    this.yLoc = 0;\n    current = this.stream.get16();\n\n    if (current !== 0xFFD8) { // SOI\n        throw new Error(\"Not a JPEG file\");\n    }\n\n    current = this.stream.get16();\n\n    while ((((current >> 4) !== 0x0FFC) || (current === 0xFFC4))) { // SOF 0~15\n        switch (current) {\n            case 0xFFC4: // DHT\n                this.huffTable.read(this.stream, this.HuffTab);\n                break;\n            case 0xFFCC: // DAC\n                throw new Error(\"Program doesn't support arithmetic coding. (format throw new IOException)\");\n            case 0xFFDB:\n                this.quantTable.read(this.stream, jpeg.lossless.Decoder.TABLE);\n                break;\n            case 0xFFDD:\n                this.restartInterval = this.readNumber();\n                break;\n            case 0xFFE0:\n            case 0xFFE1:\n            case 0xFFE2:\n            case 0xFFE3:\n            case 0xFFE4:\n            case 0xFFE5:\n            case 0xFFE6:\n            case 0xFFE7:\n            case 0xFFE8:\n            case 0xFFE9:\n            case 0xFFEA:\n            case 0xFFEB:\n            case 0xFFEC:\n            case 0xFFED:\n            case 0xFFEE:\n            case 0xFFEF:\n                this.readApp();\n                break;\n            case 0xFFFE:\n                this.readComment();\n                break;\n            default:\n                if ((current >> 8) !== 0xFF) {\n                    throw new Error(\"ERROR: format throw new IOException! (decode)\");\n                }\n        }\n\n        current = this.stream.get16();\n    }\n\n    if ((current < 0xFFC0) || (current > 0xFFC7)) {\n        throw new Error(\"ERROR: could not handle arithmetic code!\");\n    }\n\n    this.frame.read(this.stream);\n    current = this.stream.get16();\n\n    do {\n        while (current !== 0x0FFDA) { // SOS\n            switch (current) {\n                case 0xFFC4: // DHT\n                    this.huffTable.read(this.stream, this.HuffTab);\n                    break;\n                case 0xFFCC: // DAC\n                    throw new Error(\"Program doesn't support arithmetic coding. (format throw new IOException)\");\n                case 0xFFDB:\n                    this.quantTable.read(this.stream, jpeg.lossless.Decoder.TABLE);\n                    break;\n                case 0xFFDD:\n                    this.restartInterval = this.readNumber();\n                    break;\n                case 0xFFE0:\n                case 0xFFE1:\n                case 0xFFE2:\n                case 0xFFE3:\n                case 0xFFE4:\n                case 0xFFE5:\n                case 0xFFE6:\n                case 0xFFE7:\n                case 0xFFE8:\n                case 0xFFE9:\n                case 0xFFEA:\n                case 0xFFEB:\n                case 0xFFEC:\n                case 0xFFED:\n                case 0xFFEE:\n                case 0xFFEF:\n                    this.readApp();\n                    break;\n                case 0xFFFE:\n                    this.readComment();\n                    break;\n                default:\n                    if ((current >> 8) !== 0xFF) {\n                        throw new Error(\"ERROR: format throw new IOException! (Parser.decode)\");\n                    }\n            }\n\n            current = this.stream.get16();\n        }\n\n        this.precision = this.frame.precision;\n        this.components = this.frame.components;\n\n        if (!this.numBytes) {\n            this.numBytes = parseInt(Math.ceil(this.precision / 8));\n        }\n\n        if (this.numBytes == 1) {\n            this.mask = 0xFF;\n        } else {\n            this.mask = 0xFFFF;\n        }\n\n        this.scan.read(this.stream);\n        this.numComp = this.scan.numComp;\n        this.selection = this.scan.selection;\n\n        if (this.numBytes === 1) {\n            if (this.numComp === 3) {\n                this.getter = this.getValueRGB;\n                this.setter = this.setValueRGB;\n                this.output = this.outputRGB;\n            } else {\n                this.getter = this.getValue8;\n                this.setter = this.setValue8;\n                this.output = this.outputSingle;\n            }\n        } else {\n            this.getter = this.getValue16;\n            this.setter = this.setValue16;\n            this.output = this.outputSingle;\n        }\n\n        switch (this.selection) {\n            case 2:\n                this.selector = this.select2;\n                break;\n            case 3:\n                this.selector = this.select3;\n                break;\n            case 4:\n                this.selector = this.select4;\n                break;\n            case 5:\n                this.selector = this.select5;\n                break;\n            case 6:\n                this.selector = this.select6;\n                break;\n            case 7:\n                this.selector = this.select7;\n                break;\n            default:\n                this.selector = this.select1;\n                break;\n        }\n\n        this.scanComps = this.scan.components;\n        this.quantTables = this.quantTable.quantTables;\n\n        for (i = 0; i < this.numComp; i+=1) {\n            compN = this.scanComps[i].scanCompSel;\n            this.qTab[i] = this.quantTables[this.components[compN].quantTableSel];\n            this.nBlock[i] = this.components[compN].vSamp * this.components[compN].hSamp;\n            this.dcTab[i] = this.HuffTab[this.scanComps[i].dcTabSel][0];\n            this.acTab[i] = this.HuffTab[this.scanComps[i].acTabSel][1];\n        }\n\n        this.xDim = this.frame.dimX;\n        this.yDim = this.frame.dimY;\n        this.outputData = new DataView(new ArrayBuffer(this.xDim * this.yDim * this.numBytes * this.numComp));\n\n        scanNum+=1;\n\n        while (true) { // Decode one scan\n            temp[0] = 0;\n            index[0] = 0;\n\n            for (i = 0; i < 10; i+=1) {\n                pred[i] = (1 << (this.precision - 1));\n            }\n\n            if (this.restartInterval === 0) {\n                current = this.decodeUnit(pred, temp, index);\n\n                while ((current === 0) && ((this.xLoc < this.xDim) && (this.yLoc < this.yDim))) {\n                    this.output(pred);\n                    current = this.decodeUnit(pred, temp, index);\n                }\n\n                break; //current=MARKER\n            }\n\n            for (mcuNum = 0; mcuNum < this.restartInterval; mcuNum+=1) {\n                this.restarting = (mcuNum == 0);\n                current = this.decodeUnit(pred, temp, index);\n                this.output(pred);\n\n                if (current !== 0) {\n                    break;\n                }\n            }\n\n            if (current === 0) {\n                if (this.markerIndex !== 0) {\n                    current = (0xFF00 | this.marker);\n                    this.markerIndex = 0;\n                } else {\n                    current = this.stream.get16();\n                }\n            }\n\n            if (!((current >= jpeg.lossless.Decoder.RESTART_MARKER_BEGIN) &&\n                (current <= jpeg.lossless.Decoder.RESTART_MARKER_END))) {\n                break; //current=MARKER\n            }\n        }\n\n        if ((current === 0xFFDC) && (scanNum === 1)) { //DNL\n            this.readNumber();\n            current = this.stream.get16();\n        }\n    } while ((current !== 0xFFD9) && ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) && (scanNum === 0));\n\n    return this.outputData;\n};\n\n\n\njpeg.lossless.Decoder.prototype.decodeUnit = function (prev, temp, index) {\n    if (this.numComp == 1) {\n        return this.decodeSingle(prev, temp, index);\n    } else if (this.numComp == 3) {\n        return this.decodeRGB(prev, temp, index);\n    } else {\n        return -1;\n    }\n};\n\n\n\njpeg.lossless.Decoder.prototype.select1 = function (compOffset) {\n    return this.getPreviousX(compOffset);\n};\n\n\n\njpeg.lossless.Decoder.prototype.select2 = function (compOffset) {\n    return this.getPreviousY(compOffset);\n};\n\n\n\njpeg.lossless.Decoder.prototype.select3 = function (compOffset) {\n    return this.getPreviousXY(compOffset);\n};\n\n\n\njpeg.lossless.Decoder.prototype.select4 = function (compOffset) {\n    return (this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) - this.getPreviousXY(compOffset);\n};\n\n\n\njpeg.lossless.Decoder.prototype.select5 = function (compOffset) {\n    return this.getPreviousX(compOffset) + ((this.getPreviousY(compOffset) - this.getPreviousXY(compOffset)) >> 1);\n};\n\n\n\njpeg.lossless.Decoder.prototype.select6 = function (compOffset) {\n    return this.getPreviousY(compOffset) + ((this.getPreviousX(compOffset) - this.getPreviousXY(compOffset)) >> 1);\n};\n\n\n\njpeg.lossless.Decoder.prototype.select7 = function (compOffset) {\n    return ((this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) / 2);\n};\n\n\n\njpeg.lossless.Decoder.prototype.decodeRGB = function (prev, temp, index) {\n    /*jslint bitwise: true */\n\n    var value, actab, dctab, qtab, ctrC, i, k, j;\n\n    prev[0] = this.selector(0);\n    prev[1] = this.selector(1);\n    prev[2] = this.selector(2);\n\n    for (ctrC = 0; ctrC < this.numComp; ctrC+=1) {\n        qtab = this.qTab[ctrC];\n        actab = this.acTab[ctrC];\n        dctab = this.dcTab[ctrC];\n        for (i = 0; i < this.nBlock[ctrC]; i+=1) {\n            for (k = 0; k < this.IDCT_Source.length; k+=1) {\n                this.IDCT_Source[k] = 0;\n            }\n\n            value = this.getHuffmanValue(dctab, temp, index);\n\n            if (value >= 0xFF00) {\n                return value;\n            }\n\n            prev[ctrC] = this.IDCT_Source[0] = prev[ctrC] + this.getn(index, value, temp, index);\n            this.IDCT_Source[0] *= qtab[0];\n\n            for (j = 1; j < 64; j+=1) {\n                value = this.getHuffmanValue(actab, temp, index);\n\n                if (value >= 0xFF00) {\n                    return value;\n                }\n\n                j += (value >> 4);\n\n                if ((value & 0x0F) === 0) {\n                    if ((value >> 4) === 0) {\n                        break;\n                    }\n                } else {\n                    this.IDCT_Source[jpeg.lossless.Decoder.IDCT_P[j]] = this.getn(index, value & 0x0F, temp, index) * qtab[j];\n                }\n            }\n        }\n    }\n\n    return 0;\n};\n\n\n\njpeg.lossless.Decoder.prototype.decodeSingle = function (prev, temp, index) {\n    /*jslint bitwise: true */\n\n    var value, i, n, nRestart;\n\n    if (this.restarting) {\n        this.restarting = false;\n        prev[0] = (1 << (this.frame.precision - 1));\n    } else {\n        prev[0] = this.selector();\n    }\n\n    for (i = 0; i < this.nBlock[0]; i+=1) {\n        value = this.getHuffmanValue(this.dcTab[0], temp, index);\n        if (value >= 0xFF00) {\n            return value;\n        }\n\n        n = this.getn(prev, value, temp, index);\n        nRestart = (n >> 8);\n\n        if ((nRestart >= jpeg.lossless.Decoder.RESTART_MARKER_BEGIN) && (nRestart <= jpeg.lossless.Decoder.RESTART_MARKER_END)) {\n            return nRestart;\n        }\n\n        prev[0] += n;\n    }\n\n    return 0;\n};\n\n\n\n//\tHuffman table for fast search: (HuffTab) 8-bit Look up table 2-layer search architecture, 1st-layer represent 256 node (8 bits) if codeword-length > 8\n//\tbits, then the entry of 1st-layer = (# of 2nd-layer table) | MSB and it is stored in the 2nd-layer Size of tables in each layer are 256.\n//\tHuffTab[*][*][0-256] is always the only 1st-layer table.\n//\n//\tAn entry can be: (1) (# of 2nd-layer table) | MSB , for code length > 8 in 1st-layer (2) (Code length) << 8 | HuffVal\n//\n//\tHuffmanValue(table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)\n//\t                ):\n//\t    return: Huffman Value of table\n//\t            0xFF?? if it receives a MARKER\n//\t    Parameter:  table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)\n//\t                temp    temp storage for remainded bits\n//\t                index   index to bit of temp\n//\t                in      FILE pointer\n//\t    Effect:\n//\t        temp  store new remainded bits\n//\t        index change to new index\n//\t        in    change to new position\n//\t    NOTE:\n//\t      Initial by   temp=0; index=0;\n//\t    NOTE: (explain temp and index)\n//\t      temp: is always in the form at calling time or returning time\n//\t       |  byte 4  |  byte 3  |  byte 2  |  byte 1  |\n//\t       |     0    |     0    | 00000000 | 00000??? |  if not a MARKER\n//\t                                               ^index=3 (from 0 to 15)\n//\t                                               321\n//\t    NOTE (marker and marker_index):\n//\t      If get a MARKER from 'in', marker=the low-byte of the MARKER\n//\t        and marker_index=9\n//\t      If marker_index=9 then index is always > 8, or HuffmanValue()\n//\t        will not be called\njpeg.lossless.Decoder.prototype.getHuffmanValue = function (table, temp, index) {\n    /*jslint bitwise: true */\n\n    var code, input, mask;\n    mask = 0xFFFF;\n\n    if (index[0] < 8) {\n        temp[0] <<= 8;\n        input = this.stream.get8();\n        if (input === 0xFF) {\n            this.marker = this.stream.get8();\n            if (this.marker !== 0) {\n                this.markerIndex = 9;\n            }\n        }\n        temp[0] |= input;\n    } else {\n        index[0] -= 8;\n    }\n\n    code = table[temp[0] >> index[0]];\n\n    if ((code & jpeg.lossless.Decoder.MSB) !== 0) {\n        if (this.markerIndex !== 0) {\n            this.markerIndex = 0;\n            return 0xFF00 | this.marker;\n        }\n\n        temp[0] &= (mask >> (16 - index[0]));\n        temp[0] <<= 8;\n        input = this.stream.get8();\n\n        if (input === 0xFF) {\n            this.marker = this.stream.get8();\n            if (this.marker !== 0) {\n                this.markerIndex = 9;\n            }\n        }\n\n        temp[0] |= input;\n        code = table[((code & 0xFF) * 256) + (temp[0] >> index[0])];\n        index[0] += 8;\n    }\n\n    index[0] += 8 - (code >> 8);\n\n    if (index[0] < 0) {\n        throw new Error(\"index=\" + index[0] + \" temp=\" + temp[0] + \" code=\" + code + \" in HuffmanValue()\");\n    }\n\n    if (index[0] < this.markerIndex) {\n        this.markerIndex = 0;\n        return 0xFF00 | this.marker;\n    }\n\n    temp[0] &= (mask >> (16 - index[0]));\n    return code & 0xFF;\n};\n\n\n\njpeg.lossless.Decoder.prototype.getn = function (PRED, n, temp, index) {\n    /*jslint bitwise: true */\n\n    var result, one, n_one, mask, input;\n    one = 1;\n    n_one = -1;\n    mask = 0xFFFF;\n\n    if (n === 0) {\n        return 0;\n    }\n\n    if (n === 16) {\n        if (PRED[0] >= 0) {\n            return -32768;\n        } else {\n            return 32768;\n        }\n    }\n\n    index[0] -= n;\n\n    if (index[0] >= 0) {\n        if ((index[0] < this.markerIndex) && !this.isLastPixel()) { // this was corrupting the last pixel in some cases\n            this.markerIndex = 0;\n            return (0xFF00 | this.marker) << 8;\n        }\n\n        result = temp[0] >> index[0];\n        temp[0] &= (mask >> (16 - index[0]));\n    } else {\n        temp[0] <<= 8;\n        input = this.stream.get8();\n\n        if (input === 0xFF) {\n            this.marker = this.stream.get8();\n            if (this.marker !== 0) {\n                this.markerIndex = 9;\n            }\n        }\n\n        temp[0] |= input;\n        index[0] += 8;\n\n        if (index[0] < 0) {\n            if (this.markerIndex !== 0) {\n                this.markerIndex = 0;\n                return (0xFF00 | this.marker) << 8;\n            }\n\n            temp[0] <<= 8;\n            input = this.stream.get8();\n\n            if (input === 0xFF) {\n                this.marker = this.stream.get8();\n                if (this.marker !== 0) {\n                    this.markerIndex = 9;\n                }\n            }\n\n            temp[0] |= input;\n            index[0] += 8;\n        }\n\n        if (index[0] < 0) {\n            throw new Error(\"index=\" + index[0] + \" in getn()\");\n        }\n\n        if (index[0] < this.markerIndex) {\n            this.markerIndex = 0;\n            return (0xFF00 | this.marker) << 8;\n        }\n\n        result = temp[0] >> index[0];\n        temp[0] &= (mask >> (16 - index[0]));\n    }\n\n    if (result < (one << (n - 1))) {\n        result += (n_one << n) + 1;\n    }\n\n    return result;\n};\n\n\n\njpeg.lossless.Decoder.prototype.getPreviousX = function (compOffset) {\n    /*jslint bitwise: true */\n\n    if (this.xLoc > 0) {\n        return this.getter((((this.yLoc * this.xDim) + this.xLoc) - 1), compOffset);\n    } else if (this.yLoc > 0) {\n        return this.getPreviousY(compOffset);\n    } else {\n        return (1 << (this.frame.precision - 1));\n    }\n};\n\n\n\njpeg.lossless.Decoder.prototype.getPreviousXY = function (compOffset) {\n    /*jslint bitwise: true */\n\n    if ((this.xLoc > 0) && (this.yLoc > 0)) {\n        return this.getter(((((this.yLoc - 1) * this.xDim) + this.xLoc) - 1), compOffset);\n    } else {\n        return this.getPreviousY(compOffset);\n    }\n};\n\n\n\njpeg.lossless.Decoder.prototype.getPreviousY = function (compOffset) {\n    /*jslint bitwise: true */\n\n    if (this.yLoc > 0) {\n        return this.getter((((this.yLoc - 1) * this.xDim) + this.xLoc), compOffset);\n    } else {\n        return this.getPreviousX(compOffset);\n    }\n};\n\n\n\njpeg.lossless.Decoder.prototype.isLastPixel = function () {\n    return (this.xLoc === (this.xDim - 1)) && (this.yLoc === (this.yDim - 1));\n};\n\n\n\njpeg.lossless.Decoder.prototype.outputSingle = function (PRED) {\n    if ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) {\n        this.setter((((this.yLoc * this.xDim) + this.xLoc)), this.mask & PRED[0]);\n\n        this.xLoc+=1;\n\n        if (this.xLoc >= this.xDim) {\n            this.yLoc+=1;\n            this.xLoc = 0;\n        }\n    }\n};\n\n\n\njpeg.lossless.Decoder.prototype.outputRGB = function (PRED) {\n    var offset = ((this.yLoc * this.xDim) + this.xLoc);\n\n    if ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) {\n        this.setter(offset, PRED[0], 0);\n        this.setter(offset, PRED[1], 1);\n        this.setter(offset, PRED[2], 2);\n\n        this.xLoc+=1;\n\n        if (this.xLoc >= this.xDim) {\n            this.yLoc+=1;\n            this.xLoc = 0;\n        }\n    }\n};\n\n\n\njpeg.lossless.Decoder.prototype.setValue16 = function (index, val) {\n    this.outputData.setInt16(index * 2, val, true);\n};\n\n\n\njpeg.lossless.Decoder.prototype.getValue16 = function (index) {\n    return this.outputData.getInt16(index * 2, true);\n};\n\n\n\njpeg.lossless.Decoder.prototype.setValue8 = function (index, val) {\n    this.outputData.setInt8(index, val);\n};\n\n\n\njpeg.lossless.Decoder.prototype.getValue8 = function (index) {\n    return this.outputData.getInt8(index);\n};\n\n\n\njpeg.lossless.Decoder.prototype.setValueRGB = function (index, val, compOffset) {\n    this.outputData.setUint8(index * 3 + compOffset, val);\n};\n\n\n\njpeg.lossless.Decoder.prototype.getValueRGB = function (index, compOffset) {\n    return this.outputData.getUint8(index * 3 + compOffset);\n};\n\n\n\njpeg.lossless.Decoder.prototype.readApp = function() {\n    var count = 0, length = this.stream.get16();\n    count += 2;\n\n    while (count < length) {\n        this.stream.get8();\n        count+=1;\n    }\n\n    return length;\n};\n\n\n\njpeg.lossless.Decoder.prototype.readComment = function () {\n    var sb = \"\", count = 0, length;\n\n    length = this.stream.get16();\n    count += 2;\n\n    while (count < length) {\n        sb += this.stream.get8();\n        count+=1;\n    }\n\n    return sb;\n};\n\n\n\njpeg.lossless.Decoder.prototype.readNumber = function() {\n    var Ld = this.stream.get16();\n\n    if (Ld !== 4) {\n        throw new Error(\"ERROR: Define number format throw new IOException [Ld!=4]\");\n    }\n\n    return this.stream.get16();\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.Decoder;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\njpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || ((typeof require !== 'undefined') ? require('./component-spec.js') : null);\njpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);\n\n\n/*** Constructor ***/\njpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || function () {\n    this.components = []; // Components\n    this.dimX = 0; // Number of samples per line\n    this.dimY = 0; // Number of lines\n    this.numComp = 0; // Number of component in the frame\n    this.precision = 0; // Sample Precision (from the original image)\n};\n\n\n\n/*** Prototype Methods ***/\n\njpeg.lossless.FrameHeader.prototype.read = function (data) {\n    /*jslint bitwise: true */\n\n    var count = 0, length, i, c, temp;\n\n    length = data.get16();\n    count += 2;\n\n    this.precision = data.get8();\n    count+=1;\n\n    this.dimY = data.get16();\n    count += 2;\n\n    this.dimX = data.get16();\n    count += 2;\n\n    this.numComp = data.get8();\n    count+=1;\n    for (i = 1; i <= this.numComp; i+=1) {\n        if (count > length) {\n            throw new Error(\"ERROR: frame format error\");\n        }\n\n        c = data.get8();\n        count+=1;\n\n        if (count >= length) {\n            throw new Error(\"ERROR: frame format error [c>=Lf]\");\n        }\n\n        temp = data.get8();\n        count+=1;\n\n        if (!this.components[c]) {\n            this.components[c] = new jpeg.lossless.ComponentSpec();\n        }\n\n        this.components[c].hSamp = temp >> 4;\n        this.components[c].vSamp = temp & 0x0F;\n        this.components[c].quantTableSel = data.get8();\n        count+=1;\n    }\n\n    if (count !== length) {\n        throw new Error(\"ERROR: frame format error [Lf!=count]\");\n    }\n\n    return 1;\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.FrameHeader;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\njpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);\njpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);\n\n\n/*** Constructor ***/\njpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || function () {\n    this.l = jpeg.lossless.Utils.createArray(4, 2, 16);\n    this.th = [];\n    this.v = jpeg.lossless.Utils.createArray(4, 2, 16, 200);\n    this.tc = jpeg.lossless.Utils.createArray(4, 2);\n\n    this.tc[0][0] = 0;\n    this.tc[1][0] = 0;\n    this.tc[2][0] = 0;\n    this.tc[3][0] = 0;\n    this.tc[0][1] = 0;\n    this.tc[1][1] = 0;\n    this.tc[2][1] = 0;\n    this.tc[3][1] = 0;\n    this.th[0] = 0;\n    this.th[1] = 0;\n    this.th[2] = 0;\n    this.th[3] = 0;\n};\n\n\n\n/*** Static Pseudo-constants ***/\n\njpeg.lossless.HuffmanTable.MSB = 0x80000000;\n\n\n/*** Prototype Methods ***/\n\njpeg.lossless.HuffmanTable.prototype.read = function(data, HuffTab) {\n    /*jslint bitwise: true */\n\n    var count = 0, length, temp, t, c, i, j;\n\n    length = data.get16();\n    count += 2;\n\n    while (count < length) {\n        temp = data.get8();\n        count+=1;\n        t = temp & 0x0F;\n        if (t > 3) {\n            throw new Error(\"ERROR: Huffman table ID > 3\");\n        }\n\n        c = temp >> 4;\n        if (c > 2) {\n            throw new Error(\"ERROR: Huffman table [Table class > 2 ]\");\n        }\n\n        this.th[t] = 1;\n        this.tc[t][c] = 1;\n\n        for (i = 0; i < 16; i+=1) {\n            this.l[t][c][i] = data.get8();\n            count+=1;\n        }\n\n        for (i = 0; i < 16; i+=1) {\n            for (j = 0; j < this.l[t][c][i]; j+=1) {\n                if (count > length) {\n                    throw new Error(\"ERROR: Huffman table format error [count>Lh]\");\n                }\n\n                this.v[t][c][i][j] = data.get8();\n                count+=1;\n            }\n        }\n    }\n\n    if (count !== length) {\n        throw new Error(\"ERROR: Huffman table format error [count!=Lf]\");\n    }\n\n    for (i = 0; i < 4; i+=1) {\n        for (j = 0; j < 2; j+=1) {\n            if (this.tc[i][j] !== 0) {\n                this.buildHuffTable(HuffTab[i][j], this.l[i][j], this.v[i][j]);\n            }\n        }\n    }\n\n    return 1;\n};\n\n\n\n//\tBuild_HuffTab()\n//\tParameter:  t       table ID\n//\t            c       table class ( 0 for DC, 1 for AC )\n//\t            L[i]    # of codewords which length is i\n//\t            V[i][j] Huffman Value (length=i)\n//\tEffect:\n//\t    build up HuffTab[t][c] using L and V.\njpeg.lossless.HuffmanTable.prototype.buildHuffTable = function(tab, L, V) {\n    /*jslint bitwise: true */\n\n    var currentTable, temp, k, i, j, n;\n    temp = 256;\n    k = 0;\n\n    for (i = 0; i < 8; i+=1) { // i+1 is Code length\n        for (j = 0; j < L[i]; j+=1) {\n            for (n = 0; n < (temp >> (i + 1)); n+=1) {\n                tab[k] = V[i][j] | ((i + 1) << 8);\n                k+=1;\n            }\n        }\n    }\n\n    for (i = 1; k < 256; i+=1, k+=1) {\n        tab[k] = i | jpeg.lossless.HuffmanTable.MSB;\n    }\n\n    currentTable = 1;\n    k = 0;\n\n    for (i = 8; i < 16; i+=1) { // i+1 is Code length\n        for (j = 0; j < L[i]; j+=1) {\n            for (n = 0; n < (temp >> (i - 7)); n+=1) {\n                tab[(currentTable * 256) + k] = V[i][j] | ((i + 1) << 8);\n                k+=1;\n            }\n\n            if (k >= 256) {\n                if (k > 256) {\n                    throw new Error(\"ERROR: Huffman table error(1)!\");\n                }\n\n                k = 0;\n                currentTable+=1;\n            }\n        }\n    }\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.HuffmanTable;\n}\n","/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\njpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || ((typeof require !== 'undefined') ? require('./component-spec.js') : null);\njpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);\njpeg.lossless.Decoder = jpeg.lossless.Decoder || ((typeof require !== 'undefined') ? require('./decoder.js') : null);\njpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || ((typeof require !== 'undefined') ? require('./frame-header.js') : null);\njpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || ((typeof require !== 'undefined') ? require('./huffman-table.js') : null);\njpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || ((typeof require !== 'undefined') ? require('./quantization-table.js') : null);\njpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || ((typeof require !== 'undefined') ? require('./scan-component.js') : null);\njpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || ((typeof require !== 'undefined') ? require('./scan-header.js') : null);\njpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);\n\n\n/*** Exports ***/\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\njpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);\njpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);\n\n\n/*** Constructor ***/\njpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || function () {\n    this.precision = []; // Quantization precision 8 or 16\n    this.tq = []; // 1: this table is presented\n    this.quantTables = jpeg.lossless.Utils.createArray(4, 64); // Tables\n\n    this.tq[0] = 0;\n    this.tq[1] = 0;\n    this.tq[2] = 0;\n    this.tq[3] = 0;\n};\n\n\n\n/*** Static Methods ***/\n\njpeg.lossless.QuantizationTable.enhanceQuantizationTable = function(qtab, table) {\n    /*jslint bitwise: true */\n\n    var i;\n\n    for (i = 0; i < 8; i+=1) {\n        qtab[table[(0 * 8) + i]] *= 90;\n        qtab[table[(4 * 8) + i]] *= 90;\n        qtab[table[(2 * 8) + i]] *= 118;\n        qtab[table[(6 * 8) + i]] *= 49;\n        qtab[table[(5 * 8) + i]] *= 71;\n        qtab[table[(1 * 8) + i]] *= 126;\n        qtab[table[(7 * 8) + i]] *= 25;\n        qtab[table[(3 * 8) + i]] *= 106;\n    }\n\n    for (i = 0; i < 8; i+=1) {\n        qtab[table[0 + (8 * i)]] *= 90;\n        qtab[table[4 + (8 * i)]] *= 90;\n        qtab[table[2 + (8 * i)]] *= 118;\n        qtab[table[6 + (8 * i)]] *= 49;\n        qtab[table[5 + (8 * i)]] *= 71;\n        qtab[table[1 + (8 * i)]] *= 126;\n        qtab[table[7 + (8 * i)]] *= 25;\n        qtab[table[3 + (8 * i)]] *= 106;\n    }\n\n    for (i = 0; i < 64; i+=1) {\n        qtab[i] >>= 6;\n    }\n};\n\n\n/*** Prototype Methods ***/\n\njpeg.lossless.QuantizationTable.prototype.read = function (data, table) {\n    /*jslint bitwise: true */\n\n    var count = 0, length, temp, t, i;\n\n    length = data.get16();\n    count += 2;\n\n    while (count < length) {\n        temp = data.get8();\n        count+=1;\n        t = temp & 0x0F;\n\n        if (t > 3) {\n            throw new Error(\"ERROR: Quantization table ID > 3\");\n        }\n\n        this.precision[t] = temp >> 4;\n\n        if (this.precision[t] === 0) {\n            this.precision[t] = 8;\n        } else if (this.precision[t] === 1) {\n            this.precision[t] = 16;\n        } else {\n            throw new Error(\"ERROR: Quantization table precision error\");\n        }\n\n        this.tq[t] = 1;\n\n        if (this.precision[t] === 8) {\n            for (i = 0; i < 64; i+=1) {\n                if (count > length) {\n                    throw new Error(\"ERROR: Quantization table format error\");\n                }\n\n                this.quantTables[t][i] = data.get8();\n                count+=1;\n            }\n\n            jpeg.lossless.QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);\n        } else {\n            for (i = 0; i < 64; i+=1) {\n                if (count > length) {\n                    throw new Error(\"ERROR: Quantization table format error\");\n                }\n\n                this.quantTables[t][i] = data.get16();\n                count += 2;\n            }\n\n            jpeg.lossless.QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);\n        }\n    }\n\n    if (count !== length) {\n        throw new Error(\"ERROR: Quantization table error [count!=Lq]\");\n    }\n\n    return 1;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.QuantizationTable;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\n\n\n/*** Constructor ***/\njpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || function () {\n    this.acTabSel = 0; // AC table selector\n    this.dcTabSel = 0; // DC table selector\n    this.scanCompSel = 0; // Scan component selector\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.ScanComponent;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\njpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);\njpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || ((typeof require !== 'undefined') ? require('./scan-component.js') : null);\n\n\n/*** Constructor ***/\njpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || function () {\n    this.ah = 0;\n    this.al = 0;\n    this.numComp = 0; // Number of components in the scan\n    this.selection = 0; // Start of spectral or predictor selection\n    this.spectralEnd = 0; // End of spectral selection\n    this.components = [];\n};\n\n\n/*** Prototype Methods ***/\n\njpeg.lossless.ScanHeader.prototype.read = function(data) {\n    /*jslint bitwise: true */\n\n    var count = 0, length, i, temp;\n\n    length = data.get16();\n    count += 2;\n\n    this.numComp = data.get8();\n    count+=1;\n\n    for (i = 0; i < this.numComp; i+=1) {\n        this.components[i] = new jpeg.lossless.ScanComponent();\n\n        if (count > length) {\n            throw new Error(\"ERROR: scan header format error\");\n        }\n\n        this.components[i].scanCompSel = data.get8();\n        count+=1;\n\n        temp = data.get8();\n        count+=1;\n\n        this.components[i].dcTabSel = (temp >> 4);\n        this.components[i].acTabSel = (temp & 0x0F);\n    }\n\n    this.selection = data.get8();\n    count+=1;\n\n    this.spectralEnd = data.get8();\n    count+=1;\n\n    temp = data.get8();\n    this.ah = (temp >> 4);\n    this.al = (temp & 0x0F);\n    count+=1;\n\n    if (count !== length) {\n        throw new Error(\"ERROR: scan header format error [count!=Ns]\");\n    }\n\n    return 1;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.ScanHeader;\n}\n","/*\n * Copyright (C) 2015 Michael Martinez\n * Changes: Added support for selection values 2-7, fixed minor bugs &\n * warnings, split into multiple class files, and general clean up.\n *\n * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.\n */\n\n/*\n * Copyright (C) Helmut Dersch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\nvar jpeg = jpeg || {};\njpeg.lossless = jpeg.lossless || {};\n\n\n/*** Constructor ***/\njpeg.lossless.Utils = jpeg.lossless.Utils || {};\n\n\n/*** Static methods ***/\n\n// http://stackoverflow.com/questions/966225/how-can-i-create-a-two-dimensional-array-in-javascript\njpeg.lossless.Utils.createArray = function (length) {\n    var arr = new Array(length || 0),\n        i = length;\n\n    if (arguments.length > 1) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        while(i--) arr[length-1 - i] = jpeg.lossless.Utils.createArray.apply(this, args);\n    }\n\n    return arr;\n};\n\n\n// http://stackoverflow.com/questions/18638900/javascript-crc32\njpeg.lossless.Utils.makeCRCTable = function(){\n    var c;\n    var crcTable = [];\n    for(var n =0; n < 256; n++){\n        c = n;\n        for(var k =0; k < 8; k++){\n            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n};\n\njpeg.lossless.Utils.crc32 = function(dataView) {\n    var crcTable = jpeg.lossless.Utils.crcTable || (jpeg.lossless.Utils.crcTable = jpeg.lossless.Utils.makeCRCTable());\n    var crc = 0 ^ (-1);\n\n    for (var i = 0; i < dataView.byteLength; i++ ) {\n        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];\n    }\n\n    return (crc ^ (-1)) >>> 0;\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = jpeg.lossless.Utils;\n}\n","'use strict';\n\n/**\n* FUNCTION: abs( x )\n*\tComputes the absolute value of `x`.\n*\n* @param {Number} x - input value\n* @returns {Number} absolute value\n*/\nfunction abs( x ) {\n\tif ( x < 0 ) {\n\t\treturn -x;\n\t}\n\tif ( x === 0 ) {\n\t\treturn 0; // handle negative zero\n\t}\n\treturn x;\n} // end FUNCTION abs()\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n","'use strict';\n\n// EXPORTS //\n\nmodule.exports = Math.ceil;\n","'use strict';\n\n// MODULES //\n\nvar floor = require( 'math-floor' );\n\n\n// DIV2 //\n\n/**\n* FUNCTION: div2( x )\n*\tConverts a nonnegative integer to a literal bit representation using the divide-by-2 algorithm.\n*\n* @param {Number} x - nonnegative integer\n* @returns {String} bit representation\n*/\nfunction div2( x ) {\n\tvar str = '';\n\tvar y;\n\n\t// We repeatedly divide by 2 and check for a remainder. If a remainder exists, the number is odd and we add a '1' bit...\n\twhile ( x > 0 ) {\n\t\ty = x / 2;\n\t\tx = floor( y );\n\t\tif ( y === x ) {\n\t\t\tstr = '0' + str;\n\t\t} else {\n\t\t\tstr = '1' + str;\n\t\t}\n\t}\n\treturn str;\n} // end FUNCTION div2()\n\n\n// EXPORTS //\n\nmodule.exports = div2;\n","'use strict';\n\n// MODULES //\n\nvar pinf = require( 'const-pinf-float32' );\nvar ninf = require( 'const-ninf-float32' );\nvar abs = require( 'math-abs' );\nvar floor = require( 'math-floor' );\nvar rpad = require( 'utils-right-pad-string' );\nvar lpad = require( 'utils-left-pad-string' );\nvar repeat = require( 'utils-repeat-string' );\nvar div2 = require( './div2.js' );\nvar mult2 = require( './mult2.js' );\n\n\n// CONSTANTS //\n\nvar BIAS = 127; // exponent bias => (2**8)/2 - 1\n\n\n// BINARY STRING //\n\n/**\n* FUNCTION: binaryString( x )\n*\tReturns a string giving the literal bit representation of a single-precision floating-point number.\n*\n* @param {Number} x - input value\n* @returns {String} bit representation\n*/\nfunction binaryString( x ) {\n\tvar nbits;\n\tvar sign;\n\tvar str;\n\tvar exp;\n\tvar n;\n\tvar f;\n\tvar i;\n\n\t// Check for a negative value or negative zero...\n\tif ( x < 0 || 1/x === ninf ) {\n\t\tsign = '1';\n\t} else {\n\t\tsign = '0';\n\t}\n\t// Special case: +-infinity\n\tif ( x === pinf || x === ninf ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', 8 ); // all 1s\n\t\tstr = repeat( '0', 23 ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: NaN\n\tif ( x !== x ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '1', 8 ); // all 1s\n\t\tstr = '1' + repeat( '0', 22 ); // can't be all 0s\n\t\treturn sign + exp + str;\n\t}\n\t// Special case: +-0\n\tif ( x === 0 ) {\n\t\t// Based on IEEE 754-2008...\n\t\texp = repeat( '0', 8 ); // all 0s\n\t\tstr = repeat( '0', 23 ); // all 0s\n\t\treturn sign + exp + str;\n\t}\n\tx = abs( x );\n\n\t// Isolate the integer part (digits before the decimal):\n\tn = floor( x );\n\n\t// Isolate the fractional part (digits after the decimal):\n\tf = x - n;\n\n\t// Convert the integer and fractional parts to bit strings:\n\tn = div2( n );\n\tf = mult2( f );\n\n\t// Determine the exponent needed to normalize the integer+fractional parts...\n\tif ( n ) {\n\t\t// Move the decimal `d` digits to the left:\n\t\texp = n.length - 1;\n\t} else {\n\t\t// Find the first '1' bit...\n\t\tfor ( i = 0; i < f.length; i++ ) {\n\t\t\tif ( f[ i ] === '1' ) {\n\t\t\t\tnbits = i + 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Move the decimal `d` digits to the right:\n\t\texp = -nbits;\n\t}\n\t// Normalize the combined integer+fractional string...\n\tstr = n + f;\n\tif ( exp < 0 ) {\n\t\t// Handle subnormals...\n\t\tif ( exp <= -BIAS ) {\n\t\t\t// Cap the number of bits removed:\n\t\t\tnbits = BIAS - 1;\n\t\t}\n\t\t// Remove all leading zeros and the first '1' for normal values, and, for subnormals, remove at most BIAS-1 leading bits:\n\t\tstr = str.substring( nbits );\n\t} else {\n\t\t// Remove the leading '1' (implicit/hidden bit):\n\t\tstr = str.substring( 1 );\n\t}\n\t// Convert the exponent to a bit string:\n\texp = div2( exp + BIAS );\n\texp = lpad( exp, 8, '0' );\n\n\t// Fill in any trailing zeros and ensure we have only 23 fraction bits:\n\tstr = rpad( str, 23, '0' ).substring( 0, 23 );\n\n\t// Return a bit representation:\n\treturn sign + exp + str;\n} // end FUNCTION binaryString()\n\n\n// EXPORTS //\n\nmodule.exports = binaryString;\n","'use strict';\n\n// VARIABLES //\n\nvar MAX_ITER = 149; // 127+22 (subnormals)\nvar MAX_BITS = 24; // only 23 bits for fraction\n\n\n// MULT2 //\n\n/**\n* FUNCTION: mult2( x )\n*\tConverts a fraction to a literal bit representation using the multiply-by-2 algorithm.\n*\n* @param {Number} x - number less than 1\n* @returns {String} bit representation\n*/\nfunction mult2( x ) {\n\tvar str;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tstr = '';\n\tif ( x === 0 ) {\n\t\treturn str;\n\t}\n\tj = MAX_ITER;\n\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor ( i = 0; i < MAX_ITER; i++ ) {\n\t\ty = x * 2;\n\t\tif ( y >= 1 ) {\n\t\t\tx = y - 1;\n\t\t\tstr += '1';\n\t\t\tif ( j === MAX_ITER ) {\n\t\t\t\tj = i; // first '1'\n\t\t\t}\n\t\t} else {\n\t\t\tx = y;\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif ( y === 1 || i-j > MAX_BITS ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn str;\n} // end FUNCTION mult2()\n\n\n// EXPORTS //\n\nmodule.exports = mult2;\n","'use strict';\n\n// EXPORTS //\n\nmodule.exports = Math.floor;\n","\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\n\n/**\n * nifti\n * @type {*|{}}\n */\nvar nifti = nifti || {};\nnifti.NIFTI1 = nifti.NIFTI1 || ((typeof require !== 'undefined') ? require('./nifti1.js') : null);\nnifti.NIFTI2 = nifti.NIFTI2 || ((typeof require !== 'undefined') ? require('./nifti2.js') : null);\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\n\nvar pako = pako || ((typeof require !== 'undefined') ? require('pako') : null);\n\n\n\n/*** Static Methods ***/\n\n/**\n * Returns true if this data represents a NIFTI-1 header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI1 = function (data) {\n    var buf, mag1, mag2, mag3;\n\n    buf = new DataView(data);\n    mag1 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 2);\n\n    return !!((mag1 === nifti.NIFTI1.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI1.MAGIC_NUMBER[1]) &&\n        (mag3 === nifti.NIFTI1.MAGIC_NUMBER[2]));\n};\n\n\n/**\n * Returns true if this data represents a NIFTI-2 header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI2 = function (data) {\n    var buf, mag1, mag2, mag3;\n\n    buf = new DataView(data);\n    mag1 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION);\n    mag2 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 1);\n    mag3 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 2);\n\n    return !!((mag1 === nifti.NIFTI2.MAGIC_NUMBER[0]) && (mag2 === nifti.NIFTI2.MAGIC_NUMBER[1]) &&\n    (mag3 === nifti.NIFTI2.MAGIC_NUMBER[2]));\n};\n\n\n\n/**\n * Returns true if this data represents a NIFTI header.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isNIFTI = function (data) {\n    return (nifti.isNIFTI1(data) || nifti.isNIFTI2(data));\n};\n\n\n\n/**\n * Returns true if this data is GZIP compressed.\n * @param {ArrayBuffer} data\n * @returns {boolean}\n */\nnifti.isCompressed = function (data) {\n    var buf, magicCookie1, magicCookie2;\n\n    if (data) {\n        buf = new DataView(data);\n\n        magicCookie1 = buf.getUint8(0);\n        magicCookie2 = buf.getUint8(1);\n\n        if (magicCookie1 === nifti.Utils.GUNZIP_MAGIC_COOKIE1) {\n            return true;\n        }\n\n        if (magicCookie2 === nifti.Utils.GUNZIP_MAGIC_COOKIE2) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n\n\n/**\n * Returns decompressed data.\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.decompress = function (data) {\n    return pako.inflate(data).buffer;\n};\n\n\n\n/**\n * Reads and returns the header object.\n * @param {ArrayBuffer} data\n * @returns {nifti.NIFTI1|nifti.NIFTI2|null}\n */\nnifti.readHeader = function (data) {\n    var header = null;\n\n    if (nifti.isCompressed(data)) {\n        data = nifti.decompress(data);\n    }\n\n    if (nifti.isNIFTI1(data)) {\n        header = new nifti.NIFTI1();\n    } else if (nifti.isNIFTI2(data)) {\n        header = new nifti.NIFTI2();\n    }\n\n    if (header) {\n        header.readHeader(data);\n    } else {\n        console.error(\"That file does not appear to be NIFTI!\");\n    }\n\n    return header;\n};\n\n\n\n/**\n * Returns true if this header contains an extension.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @returns {boolean}\n */\nnifti.hasExtension = function (header) {\n    return (header.extensionFlag[0] != 0);\n};\n\n\n\n/**\n * Returns the image data.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readImage = function (header, data) {\n    var imageOffset = header.vox_offset,\n        timeDim = 1,\n        statDim = 1;\n\n    if (header.dims[4]) {\n        timeDim = header.dims[4];\n    }\n\n    if (header.dims[5]) {\n        statDim = header.dims[5];\n    }\n\n    var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);\n    return data.slice(imageOffset, imageOffset + imageSize);\n};\n\n\n\n/**\n * Returns the extension data (including extension header).\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readExtension = function (header, data) {\n    var loc = header.getExtensionLocation(),\n        size = header.extensionSize;\n\n    return data.slice(loc, loc + size);\n};\n\n\n\n/**\n * Returns the extension data.\n * @param {nifti.NIFTI1|nifti.NIFTI2} header\n * @param {ArrayBuffer} data\n * @returns {ArrayBuffer}\n */\nnifti.readExtensionData = function (header, data) {\n    var loc = header.getExtensionLocation(),\n        size = header.extensionSize;\n\n    return data.slice(loc + 8, loc + size - 8);\n};\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti;\n}\n","\n/*jslint browser: true, node: true */\n/*global */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\n\n\n\n/*** Constructor ***/\n\n/**\n * The NIFTI1 constructor.\n * @constructor\n * @property {boolean} littleEndian\n * @property {number} dim_info\n * @property {number[]} dims - image dimensions\n * @property {number} intent_p1\n * @property {number} intent_p2\n * @property {number} intent_p3\n * @property {number} intent_code\n * @property {number} datatypeCode\n * @property {number} numBitsPerVoxel\n * @property {number} slice_start\n * @property {number} slice_end\n * @property {number} slice_code\n * @property {number[]} pixDims - voxel dimensions\n * @property {number} vox_offset\n * @property {number} scl_slope\n * @property {number} scl_inter\n * @property {number} xyzt_units\n * @property {number} cal_max\n * @property {number} cal_min\n * @property {number} slice_duration\n * @property {number} toffset\n * @property {string} description\n * @property {string} aux_file\n * @property {string} intent_name\n * @property {number} qform_code\n * @property {number} sform_code\n * @property {number} quatern_b\n * @property {number} quatern_c\n * @property {number} quatern_d\n * @property {number} quatern_x\n * @property {number} quatern_y\n * @property {number} quatern_z\n * @property {Array.<Array.<number>>} affine\n * @property {string} magic\n * @property {boolean} isHDR - if hdr/img format\n * @property {number[]} extensionFlag\n * @property {number} extensionSize\n * @property {number} extensionCode\n * @type {Function}\n */\nnifti.NIFTI1 = nifti.NIFTI1 || function () {\n    this.littleEndian = false;\n    this.dim_info = 0;\n    this.dims = [];\n    this.intent_p1 = 0;\n    this.intent_p2 = 0;\n    this.intent_p3 = 0;\n    this.intent_code = 0;\n    this.datatypeCode = 0;\n    this.numBitsPerVoxel = 0;\n    this.slice_start = 0;\n    this.slice_end = 0;\n    this.slice_code = 0;\n    this.pixDims = [];\n    this.vox_offset = 0;\n    this.scl_slope = 1;\n    this.scl_inter = 0;\n    this.xyzt_units = 0;\n    this.cal_max = 0;\n    this.cal_min = 0;\n    this.slice_duration = 0;\n    this.toffset = 0;\n    this.description = \"\";\n    this.aux_file = \"\";\n    this.intent_name = \"\";\n    this.qform_code = 0;\n    this.sform_code = 0;\n    this.quatern_b = 0;\n    this.quatern_c = 0;\n    this.quatern_d = 0;\n    this.qoffset_x = 0;\n    this.qoffset_y = 0;\n    this.qoffset_z = 0;\n    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    this.magic = 0;\n    this.isHDR = false;\n    this.extensionFlag = [0, 0, 0, 0];\n    this.extensionSize = 0;\n    this.extensionCode = 0;\n};\n\n\n\n/*** Static Pseudo-constants ***/\n\n// datatype codes\nnifti.NIFTI1.TYPE_NONE            = 0;\nnifti.NIFTI1.TYPE_BINARY          = 1;\nnifti.NIFTI1.TYPE_UINT8           = 2;\nnifti.NIFTI1.TYPE_INT16           = 4;\nnifti.NIFTI1.TYPE_INT32           = 8;\nnifti.NIFTI1.TYPE_FLOAT32        = 16;\nnifti.NIFTI1.TYPE_COMPLEX64      = 32;\nnifti.NIFTI1.TYPE_FLOAT64        = 64;\nnifti.NIFTI1.TYPE_RGB24         = 128;\nnifti.NIFTI1.TYPE_INT8          = 256;\nnifti.NIFTI1.TYPE_UINT16        = 512;\nnifti.NIFTI1.TYPE_UINT32        = 768;\nnifti.NIFTI1.TYPE_INT64        = 1024;\nnifti.NIFTI1.TYPE_UINT64       = 1280;\nnifti.NIFTI1.TYPE_FLOAT128     = 1536;\nnifti.NIFTI1.TYPE_COMPLEX128   = 1792;\nnifti.NIFTI1.TYPE_COMPLEX256   = 2048;\n\n// transform codes\nnifti.NIFTI1.XFORM_UNKNOWN        = 0;\nnifti.NIFTI1.XFORM_SCANNER_ANAT   = 1;\nnifti.NIFTI1.XFORM_ALIGNED_ANAT   = 2;\nnifti.NIFTI1.XFORM_TALAIRACH      = 3;\nnifti.NIFTI1.XFORM_MNI_152        = 4;\n\n// unit codes\nnifti.NIFTI1.SPATIAL_UNITS_MASK = 0x07;\nnifti.NIFTI1.TEMPORAL_UNITS_MASK = 0x38;\nnifti.NIFTI1.UNITS_UNKNOWN        = 0;\nnifti.NIFTI1.UNITS_METER          = 1;\nnifti.NIFTI1.UNITS_MM             = 2;\nnifti.NIFTI1.UNITS_MICRON         = 3;\nnifti.NIFTI1.UNITS_SEC            = 8;\nnifti.NIFTI1.UNITS_MSEC          = 16;\nnifti.NIFTI1.UNITS_USEC          = 24;\nnifti.NIFTI1.UNITS_HZ            = 32;\nnifti.NIFTI1.UNITS_PPM           = 40;\nnifti.NIFTI1.UNITS_RADS          = 48;\n\n// nifti1 codes\nnifti.NIFTI1.MAGIC_COOKIE = 348;\nnifti.NIFTI1.MAGIC_NUMBER_LOCATION = 344;\nnifti.NIFTI1.MAGIC_NUMBER = [0x6E, 0x2B, 0x31];  // n+1 (.nii)\nnifti.NIFTI1.MAGIC_NUMBER2 = [0x6E, 0x69, 0x31];  // ni1 (.hdr/.img)\nnifti.NIFTI1.EXTENSION_HEADER_SIZE = 8;\n\n\n/*** Prototype Methods ***/\n\n/**\n * Reads the header data.\n * @param {ArrayBuffer} data\n */\nnifti.NIFTI1.prototype.readHeader = function (data) {\n    var rawData = new DataView(data),\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index;\n\n    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {  // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n\n    if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n\n    this.dim_info = nifti.Utils.getByteAt(rawData, 39);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 40 + (ctr * 2);\n        this.dims[ctr] = nifti.Utils.getShortAt(rawData, index, this.littleEndian);\n    }\n\n    this.intent_p1 = nifti.Utils.getFloatAt(rawData, 56, this.littleEndian);\n    this.intent_p2 = nifti.Utils.getFloatAt(rawData, 60, this.littleEndian);\n    this.intent_p3 = nifti.Utils.getFloatAt(rawData, 64, this.littleEndian);\n    this.intent_code = nifti.Utils.getShortAt(rawData, 68, this.littleEndian);\n\n    this.datatypeCode = nifti.Utils.getShortAt(rawData, 70, this.littleEndian);\n    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 72, this.littleEndian);\n\n    this.slice_start = nifti.Utils.getShortAt(rawData, 74, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 76 + (ctr * 4);\n        this.pixDims[ctr] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);\n    }\n\n    this.vox_offset = nifti.Utils.getFloatAt(rawData, 108, this.littleEndian);\n\n    this.scl_slope = nifti.Utils.getFloatAt(rawData, 112, this.littleEndian);\n    this.scl_inter = nifti.Utils.getFloatAt(rawData, 116, this.littleEndian);\n\n    this.slice_end = nifti.Utils.getShortAt(rawData, 120, this.littleEndian);\n    this.slice_code = nifti.Utils.getByteAt(rawData, 122);\n\n    this.xyzt_units = nifti.Utils.getByteAt(rawData, 123);\n\n    this.cal_max = nifti.Utils.getFloatAt(rawData, 124, this.littleEndian);\n    this.cal_min = nifti.Utils.getFloatAt(rawData, 128, this.littleEndian);\n\n    this.slice_duration = nifti.Utils.getFloatAt(rawData, 132, this.littleEndian);\n    this.toffset = nifti.Utils.getFloatAt(rawData, 136, this.littleEndian);\n\n    this.description = nifti.Utils.getStringAt(rawData, 148, 228);\n    this.aux_file = nifti.Utils.getStringAt(rawData, 228, 252);\n\n    this.qform_code = nifti.Utils.getShortAt(rawData, 252, this.littleEndian);\n    this.sform_code = nifti.Utils.getShortAt(rawData, 254, this.littleEndian);\n\n    this.quatern_b = nifti.Utils.getFloatAt(rawData, 256, this.littleEndian);\n    this.quatern_c = nifti.Utils.getFloatAt(rawData, 260, this.littleEndian);\n    this.quatern_d = nifti.Utils.getFloatAt(rawData, 264, this.littleEndian);\n    this.qoffset_x = nifti.Utils.getFloatAt(rawData, 268, this.littleEndian);\n    this.qoffset_y = nifti.Utils.getFloatAt(rawData, 272, this.littleEndian);\n    this.qoffset_z = nifti.Utils.getFloatAt(rawData, 276, this.littleEndian);\n\n    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 280 + (((ctrOut * 4) + ctrIn) * 4);\n            this.affine[ctrOut][ctrIn] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);\n        }\n    }\n\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n\n    this.intent_name = nifti.Utils.getStringAt(rawData, 328, 344);\n    this.magic = nifti.Utils.getStringAt(rawData, 344, 348);\n\n    this.isHDR = (this.magic === nifti.NIFTI1.MAGIC_NUMBER2);\n\n    if (rawData.byteLength > nifti.NIFTI1.MAGIC_COOKIE) {\n        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 348);\n        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 348 + 1);\n        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 348 + 2);\n        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 348 + 3);\n\n        if (this.extensionFlag[0]) {\n            this.extensionSize = this.getExtensionSize(rawData);\n            this.extensionCode = this.getExtensionCode(rawData);\n        }\n    }\n};\n\n\n/**\n * Returns a formatted string of header fields.\n * @returns {string}\n */\nnifti.NIFTI1.prototype.toFormattedString = function () {\n    var fmt = nifti.Utils.formatNumber,\n        string = \"\";\n\n    string += (\"Dim Info = \" + this.dim_info + \"\\n\");\n\n    string += (\"Image Dimensions (1-8): \" +\n        this.dims[0] + \", \" +\n        this.dims[1] + \", \" +\n        this.dims[2] + \", \" +\n        this.dims[3] + \", \" +\n        this.dims[4] + \", \" +\n        this.dims[5] + \", \" +\n        this.dims[6] + \", \" +\n        this.dims[7] + \"\\n\");\n\n    string += (\"Intent Parameters (1-3): \" +\n        this.intent_p1 + \", \" +\n        this.intent_p2 + \", \" +\n        this.intent_p3) + \"\\n\";\n\n    string += (\"Intent Code = \" + this.intent_code + \"\\n\");\n    string += (\"Datatype = \" + this.datatypeCode +  \" (\" + this.getDatatypeCodeString(this.datatypeCode) + \")\\n\");\n    string += (\"Bits Per Voxel = \" + this.numBitsPerVoxel + \"\\n\");\n    string += (\"Slice Start = \" + this.slice_start + \"\\n\");\n    string += (\"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) + \", \" +\n        fmt(this.pixDims[1]) + \", \" +\n        fmt(this.pixDims[2]) + \", \" +\n        fmt(this.pixDims[3]) + \", \" +\n        fmt(this.pixDims[4]) + \", \" +\n        fmt(this.pixDims[5]) + \", \" +\n        fmt(this.pixDims[6]) + \", \" +\n        fmt(this.pixDims[7]) + \"\\n\");\n\n    string += (\"Image Offset = \" + this.vox_offset + \"\\n\");\n    string += (\"Data Scale:  Slope = \" + fmt(this.scl_slope) + \"  Intercept = \" + fmt(this.scl_inter) + \"\\n\");\n    string += (\"Slice End = \" + this.slice_end + \"\\n\");\n    string += (\"Slice Code = \" + this.slice_code + \"\\n\");\n    string += (\"Units Code = \" + this.xyzt_units + \" (\" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + \", \" + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + \")\\n\");\n    string += (\"Display Range:  Max = \" + fmt(this.cal_max) + \"  Min = \" + fmt(this.cal_min) + \"\\n\");\n    string += (\"Slice Duration = \" + this.slice_duration + \"\\n\");\n    string += (\"Time Axis Shift = \" + this.toffset + \"\\n\");\n    string += (\"Description: \\\"\" + this.description + \"\\\"\\n\");\n    string += (\"Auxiliary File: \\\"\" + this.aux_file + \"\\\"\\n\");\n    string += (\"Q-Form Code = \" + this.qform_code + \" (\" + this.getTransformCodeString(this.qform_code) + \")\\n\");\n    string += (\"S-Form Code = \" + this.sform_code + \" (\" + this.getTransformCodeString(this.sform_code) + \")\\n\");\n    string += (\"Quaternion Parameters:  \" +\n        \"b = \" + fmt(this.quatern_b) + \"  \" +\n        \"c = \" + fmt(this.quatern_c) + \"  \" +\n        \"d = \" + fmt(this.quatern_d) + \"\\n\");\n\n    string += (\"Quaternion Offsets:  \" +\n        \"x = \" + this.qoffset_x + \"  \" +\n        \"y = \" + this.qoffset_y + \"  \" +\n        \"z = \" + this.qoffset_z + \"\\n\");\n\n    string += (\"S-Form Parameters X: \" +\n        fmt(this.affine[0][0]) + \", \" +\n        fmt(this.affine[0][1]) + \", \" +\n        fmt(this.affine[0][2]) + \", \" +\n        fmt(this.affine[0][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Y: \" +\n        fmt(this.affine[1][0]) + \", \" +\n        fmt(this.affine[1][1]) + \", \" +\n        fmt(this.affine[1][2]) + \", \" +\n        fmt(this.affine[1][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Z: \" +\n        fmt(this.affine[2][0]) + \", \" +\n        fmt(this.affine[2][1]) + \", \" +\n        fmt(this.affine[2][2]) + \", \" +\n        fmt(this.affine[2][3]) + \"\\n\");\n\n    string += (\"Intent Name: \\\"\" + this.intent_name + \"\\\"\\n\");\n\n    if (this.extensionFlag[0]) {\n        string += (\"Extension: Size = \" + this.extensionSize + \"  Code = \" + this.extensionCode + \"\\n\");\n\n    }\n\n    return string;\n};\n\n\n/**\n * Returns a human-readable string of datatype.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getDatatypeCodeString = function (code) {\n    if (code === nifti.NIFTI1.TYPE_UINT8) {\n        return \"1-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT16) {\n        return \"2-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT32) {\n        return \"4-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_FLOAT32) {\n        return \"4-Byte Float\";\n    } else if (code === nifti.NIFTI1.TYPE_FLOAT64) {\n        return \"8-Byte Float\";\n    } else if (code === nifti.NIFTI1.TYPE_RGB24) {\n        return \"RGB\";\n    } else if (code === nifti.NIFTI1.TYPE_INT8) {\n        return \"1-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT16) {\n        return \"2-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT32) {\n        return \"4-Byte Unsigned Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_INT64) {\n        return \"8-Byte Signed Integer\";\n    } else if (code === nifti.NIFTI1.TYPE_UINT64) {\n        return \"8-Byte Unsigned Integer\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns a human-readable string of transform type.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getTransformCodeString = function (code) {\n    if (code === nifti.NIFTI1.XFORM_SCANNER_ANAT) {\n        return \"Scanner\";\n    } else if (code === nifti.NIFTI1.XFORM_ALIGNED_ANAT) {\n        return \"Aligned\";\n    } else if (code === nifti.NIFTI1.XFORM_TALAIRACH) {\n        return \"Talairach\";\n    } else if (code === nifti.NIFTI1.XFORM_MNI_152) {\n        return \"MNI\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns a human-readable string of spatial and temporal units.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI1.prototype.getUnitsCodeString = function (code) {\n    if (code === nifti.NIFTI1.UNITS_METER) {\n        return \"Meters\";\n    } else if (code === nifti.NIFTI1.UNITS_MM) {\n        return \"Millimeters\";\n    } else if (code === nifti.NIFTI1.UNITS_MICRON) {\n        return \"Microns\";\n    } else if (code === nifti.NIFTI1.UNITS_SEC) {\n        return \"Seconds\";\n    } else if (code === nifti.NIFTI1.UNITS_MSEC) {\n        return \"Milliseconds\";\n    } else if (code === nifti.NIFTI1.UNITS_USEC) {\n        return \"Microseconds\";\n    } else if (code === nifti.NIFTI1.UNITS_HZ) {\n        return \"Hz\";\n    } else if (code === nifti.NIFTI1.UNITS_PPM) {\n        return \"PPM\";\n    } else if (code === nifti.NIFTI1.UNITS_RADS) {\n        return \"Rads\";\n    } else {\n        return \"Unknown\";\n    }\n};\n\n\n/**\n * Returns the qform matrix.\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI1.prototype.getQformMat = function () {\n    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x,\n        this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);\n};\n\n\n\n/**\n * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {number} qb\n * @param {number} qc\n * @param {number} qd\n * @param {number} qx\n * @param {number} qy\n * @param {number} qz\n * @param {number} dx\n * @param {number} dy\n * @param {number} dz\n * @param {number} qfac\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function (qb, qc, qd, qx, qy, qz, dx, dy, dz,\n                                                qfac) {\n    var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n        a,\n        b = qb,\n        c = qc,\n        d = qd,\n        xd,\n        yd,\n        zd;\n\n    // last row is always [ 0 0 0 1 ]\n    R[3][0] = R[3][1] = R[3][2] = 0.0;\n    R[3][3] = 1.0;\n\n    // compute a parameter from b,c,d\n    a = 1.0 - (b * b + c * c + d * d);\n    if (a < 0.0000001) {                   /* special case */\n\n        a = 1.0 / Math.sqrt(b * b + c * c + d * d);\n        b *= a;\n        c *= a;\n        d *= a;        /* normalize (b,c,d) vector */\n        a = 0.0;                        /* a = 0 ==> 180 degree rotation */\n    } else {\n\n        a = Math.sqrt(a);                     /* angle = 2*arccos(a) */\n    }\n\n    // load rotation matrix, including scaling factors for voxel sizes\n    xd = (dx > 0.0) ? dx : 1.0;       /* make sure are positive */\n    yd = (dy > 0.0) ? dy : 1.0;\n    zd = (dz > 0.0) ? dz : 1.0;\n\n    if (qfac < 0.0) {\n        zd = -zd;         /* left handedness? */\n    }\n\n    R[0][0] =       (a * a + b * b - c * c - d * d) * xd;\n    R[0][1] = 2.0 * (b * c - a * d) * yd;\n    R[0][2] = 2.0 * (b * d + a * c) * zd;\n    R[1][0] = 2.0 * (b * c + a * d) * xd;\n    R[1][1] =       (a * a + c * c - b * b - d * d) * yd;\n    R[1][2] = 2.0 * (c * d - a * b) * zd;\n    R[2][0] = 2.0 * (b * d - a * c) * xd;\n    R[2][1] = 2.0 * (c * d + a * b) * yd;\n    R[2][2] =       (a * a + d * d - c * c - b * b) * zd;\n\n    // load offsets\n    R[0][3] = qx;\n    R[1][3] = qy;\n    R[2][3] = qz;\n\n    return R;\n};\n\n\n\n/**\n * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {Array.<Array.<number>>} R\n * @returns {string}\n */\nnifti.NIFTI1.prototype.convertNiftiSFormToNEMA = function (R) {\n    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest,\n        M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;\n    k = 0;\n\n    Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n    P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n\n    //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */\n\n    //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */\n\n    /* load column vectors for each (i,j,k) direction from matrix */\n\n    /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/\n\n    xi = R[0][0];\n    xj = R[0][1];\n    xk = R[0][2];\n\n    yi = R[1][0];\n    yj = R[1][1];\n    yk = R[1][2];\n\n    zi = R[2][0];\n    zj = R[2][1];\n    zk = R[2][2];\n\n    /* normalize column vectors to get unit vectors along each ijk-axis */\n\n    /* normalize i axis */\n    val = Math.sqrt(xi * xi + yi * yi + zi * zi);\n    if (val === 0.0) {  /* stupid input */\n        return null;\n    }\n\n    xi /= val;\n    yi /= val;\n    zi /= val;\n\n    /* normalize j axis */\n    val = Math.sqrt(xj * xj + yj * yj + zj * zj);\n    if (val === 0.0) {  /* stupid input */\n        return null;\n    }\n\n    xj /= val;\n    yj /= val;\n    zj /= val;\n\n    /* orthogonalize j axis to i axis, if needed */\n    val = xi * xj + yi * yj + zi * zj;    /* dot product between i and j */\n    if (Math.abs(val) > 1.E-4) {\n        xj -= val * xi;\n        yj -= val * yi;\n        zj -= val * zi;\n        val = Math.sqrt(xj * xj + yj * yj + zj * zj);  /* must renormalize */\n        if (val === 0.0) {              /* j was parallel to i? */\n            return null;\n        }\n        xj /= val;\n        yj /= val;\n        zj /= val;\n    }\n\n    /* normalize k axis; if it is zero, make it the cross product i x j */\n    val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n    if (val === 0.0) {\n        xk = yi * zj - zi * yj;\n        yk = zi * xj - zj * xi;\n        zk = xi * yj - yi * xj;\n    } else {\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    /* orthogonalize k to i */\n    val = xi * xk + yi * yk + zi * zk;    /* dot product between i and k */\n    if (Math.abs(val) > 1.E-4) {\n        xk -= val * xi;\n        yk -= val * yi;\n        zk -= val * zi;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {    /* bad */\n            return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    /* orthogonalize k to j */\n    val = xj * xk + yj * yk + zj * zk;    /* dot product between j and k */\n    if (Math.abs(val) > 1.e-4) {\n        xk -= val * xj;\n        yk -= val * yj;\n        zk -= val * zj;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {     /* bad */\n            return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n    }\n\n    Q[0][0] = xi;\n    Q[0][1] = xj;\n    Q[0][2] = xk;\n    Q[1][0] = yi;\n    Q[1][1] = yj;\n    Q[1][2] = yk;\n    Q[2][0] = zi;\n    Q[2][1] = zj;\n    Q[2][2] = zk;\n\n    /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */\n\n    detQ = this.nifti_mat33_determ(Q);\n    if (detQ === 0.0) { /* shouldn't happen unless user is a DUFIS */\n        return null;\n    }\n\n    /* Build and test all possible +1/-1 coordinate permutation matrices P;\n     then find the P such that the rotation matrix M=PQ is closest to the\n     identity, in the sense of M having the smallest total rotation angle. */\n\n    /* Despite the formidable looking 6 nested loops, there are\n     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */\n\n    vbest = -666.0;\n    ibest = pbest = qbest = rbest = 1;\n    jbest = 2;\n    kbest = 3;\n\n    for (i = 1; i <= 3; i += 1) {     /* i = column number to use for row #1 */\n        for (j = 1; j <= 3; j += 1) {    /* j = column number to use for row #2 */\n            if (i !== j) {\n                for (k = 1; k <= 3; k += 1) {  /* k = column number to use for row #3 */\n                    if (!(i === k || j === k)) {\n                        P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;\n                        for (p = -1; p <= 1; p += 2) {    /* p,q,r are -1 or +1      */\n                            for (q = -1; q <= 1; q += 2) {   /* and go into rows #1,2,3 */\n                                for (r = -1; r <= 1; r += 2) {\n                                    P[0][i - 1] = p;\n                                    P[1][j - 1] = q;\n                                    P[2][k - 1] = r;\n                                    detP = this.nifti_mat33_determ(P);           /* sign of permutation */\n                                    if ((detP * detQ) > 0.0) {\n                                        M = this.nifti_mat33_mul(P, Q);\n\n                                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */\n                                        /* we want largest trace(M) == smallest angle == M nearest to I */\n\n                                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */\n                                        if (val > vbest) {\n                                            vbest = val;\n                                            ibest = i;\n                                            jbest = j;\n                                            kbest = k;\n                                            pbest = p;\n                                            qbest = q;\n                                            rbest = r;\n                                        }\n                                    }  /* doesn't match sign of Q */\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.\n\n     The matrix P that corresponds is the best permutation approximation\n     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates\n     to the (i,j,k) axes.\n\n     For example, the first row of P (which contains pbest in column ibest)\n     determines the way the i axis points relative to the anatomical\n     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,\n     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).\n\n     So, using ibest and pbest, we can assign the output code for\n     the i axis.  Mutatis mutandis for the j and k axes, of course. */\n\n    iChar = jChar = kChar = iSense = jSense = kSense = 0;\n\n    switch (ibest * pbest) {\n        case 1: /*i = NIFTI_L2R*/\n            iChar = 'X';\n            iSense = '+';\n            break;\n        case -1: /*i = NIFTI_R2L*/\n            iChar = 'X';\n            iSense = '-';\n            break;\n        case 2: /*i = NIFTI_P2A*/\n            iChar = 'Y';\n            iSense = '+';\n            break;\n        case -2: /*i = NIFTI_A2P*/\n            iChar = 'Y';\n            iSense = '-';\n            break;\n        case 3: /*i = NIFTI_I2S*/\n            iChar = 'Z';\n            iSense = '+';\n            break;\n        case -3: /*i = NIFTI_S2I*/\n            iChar = 'Z';\n            iSense = '-';\n            break;\n    }\n\n    switch (jbest * qbest) {\n        case 1: /*j = NIFTI_L2R*/\n            jChar = 'X';\n            jSense = '+';\n            break;\n        case -1: /*j = NIFTI_R2L*/\n            jChar = 'X';\n            jSense = '-';\n            break;\n        case 2: /*j = NIFTI_P2A*/\n            jChar = 'Y';\n            jSense = '+';\n            break;\n        case -2: /*j = NIFTI_A2P*/\n            jChar = 'Y';\n            jSense = '-';\n            break;\n        case 3: /*j = NIFTI_I2S*/\n            jChar = 'Z';\n            jSense = '+';\n            break;\n        case -3: /*j = NIFTI_S2I*/\n            jChar = 'Z';\n            jSense = '-';\n            break;\n    }\n\n    switch (kbest * rbest) {\n        case 1: /*k = NIFTI_L2R*/\n            kChar = 'X';\n            kSense = '+';\n            break;\n        case -1: /*k = NIFTI_R2L*/\n            kChar = 'X';\n            kSense = '-';\n            break;\n        case 2: /*k = NIFTI_P2A*/\n            kChar = 'Y';\n            kSense = '+';\n            break;\n        case -2: /*k = NIFTI_A2P*/\n            kChar = 'Y';\n            kSense = '-';\n            break;\n        case 3: /*k = NIFTI_I2S*/\n            kChar = 'Z';\n            kSense = '+';\n            break;\n        case -3: /*k = NIFTI_S2I*/\n            kChar = 'Z';\n            kSense = '-';\n            break;\n    }\n\n    return (iChar + jChar + kChar + iSense + jSense + kSense);\n};\n\n\n\nnifti.NIFTI1.prototype.nifti_mat33_mul = function (A, B) {\n    var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        i,\n        j;\n\n    for (i = 0; i < 3; i += 1) {\n        for (j = 0; j < 3; j += 1) {\n            C[i][j] =  A[i][0] * B[0][j]  + A[i][1] * B[1][j] + A[i][2] * B[2][j];\n        }\n    }\n\n    return C;\n};\n\n\n\nnifti.NIFTI1.prototype.nifti_mat33_determ = function (R) {\n    var r11, r12, r13, r21, r22, r23, r31, r32, r33;\n    /*  INPUT MATRIX:  */\n    r11 = R[0][0];\n    r12 = R[0][1];\n    r13 = R[0][2];\n    r21 = R[1][0];\n    r22 = R[1][1];\n    r23 = R[1][2];\n    r31 = R[2][0];\n    r32 = R[2][1];\n    r33 = R[2][2];\n\n    return (r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13);\n};\n\n\n/**\n * Returns the byte index of the extension.\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionLocation = function() {\n    return nifti.NIFTI1.MAGIC_COOKIE + 4;\n};\n\n\n/**\n * Returns the extension size.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionSize = function(data) {\n    return nifti.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);\n};\n\n\n\n/**\n * Returns the extension code.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI1.prototype.getExtensionCode = function(data) {\n    return nifti.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.NIFTI1;\n}\n","\n/*jslint browser: true, node: true */\n/*global */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || ((typeof require !== 'undefined') ? require('./utilities.js') : null);\nnifti.NIFTI1 = nifti.NIFTI1 || ((typeof require !== 'undefined') ? require('./nifti1.js') : null);\n\n\n/*** Constructor ***/\n\n/**\n * The NIFTI2 constructor.\n * @constructor\n * @property {boolean} littleEndian\n * @property {number} dim_info\n * @property {number[]} dims - image dimensions\n * @property {number} intent_p1\n * @property {number} intent_p2\n * @property {number} intent_p3\n * @property {number} intent_code\n * @property {number} datatypeCode\n * @property {number} numBitsPerVoxel\n * @property {number} slice_start\n * @property {number} slice_end\n * @property {number} slice_code\n * @property {number[]} pixDims - voxel dimensions\n * @property {number} vox_offset\n * @property {number} scl_slope\n * @property {number} scl_inter\n * @property {number} xyzt_units\n * @property {number} cal_max\n * @property {number} cal_min\n * @property {number} slice_duration\n * @property {number} toffset\n * @property {string} description\n * @property {string} aux_file\n * @property {string} intent_name\n * @property {number} qform_code\n * @property {number} sform_code\n * @property {number} quatern_b\n * @property {number} quatern_c\n * @property {number} quatern_d\n * @property {number} quatern_x\n * @property {number} quatern_y\n * @property {number} quatern_z\n * @property {Array.<Array.<number>>} affine\n * @property {string} magic\n * @property {number[]} extensionFlag\n * @type {Function}\n */\nnifti.NIFTI2 = nifti.NIFTI2 || function () {\n    this.littleEndian = false;\n    this.dim_info = 0;\n    this.dims = [];\n    this.intent_p1 = 0;\n    this.intent_p2 = 0;\n    this.intent_p3 = 0;\n    this.intent_code = 0;\n    this.datatypeCode = 0;\n    this.numBitsPerVoxel = 0;\n    this.slice_start = 0;\n    this.slice_end = 0;\n    this.slice_code = 0;\n    this.pixDims = [];\n    this.vox_offset = 0;\n    this.scl_slope = 1;\n    this.scl_inter = 0;\n    this.xyzt_units = 0;\n    this.cal_max = 0;\n    this.cal_min = 0;\n    this.slice_duration = 0;\n    this.toffset = 0;\n    this.description = \"\";\n    this.aux_file = \"\";\n    this.intent_name = \"\";\n    this.qform_code = 0;\n    this.sform_code = 0;\n    this.quatern_b = 0;\n    this.quatern_c = 0;\n    this.quatern_d = 0;\n    this.qoffset_x = 0;\n    this.qoffset_y = 0;\n    this.qoffset_z = 0;\n    this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    this.magic = 0;\n    this.extensionFlag = [0, 0, 0, 0];\n};\n\n\n\n/*** Static Pseudo-constants ***/\n\nnifti.NIFTI2.MAGIC_COOKIE = 540;\nnifti.NIFTI2.MAGIC_NUMBER_LOCATION = 4;\nnifti.NIFTI2.MAGIC_NUMBER = [0x6E, 0x2B, 0x32, 0, 0x0D, 0x0A, 0x1A, 0x0A];  // n+2\\0\n\n\n\n/*** Prototype Methods ***/\n\n/**\n * Reads the header data.\n * @param {ArrayBuffer} data\n */\nnifti.NIFTI2.prototype.readHeader = function (data) {\n    var rawData = new DataView(data),\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index,\n        array;\n\n    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {  // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n\n    if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n\n    this.datatypeCode = nifti.Utils.getShortAt(rawData, 12, this.littleEndian);\n    this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 14, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 16 + (ctr * 8);\n        this.dims[ctr] = nifti.Utils.getLongAt(rawData, index, this.littleEndian);\n    }\n\n    this.intent_p1 = nifti.Utils.getDoubleAt(rawData, 80, this.littleEndian);\n    this.intent_p2 = nifti.Utils.getDoubleAt(rawData, 88, this.littleEndian);\n    this.intent_p3 = nifti.Utils.getDoubleAt(rawData, 96, this.littleEndian);\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 104 + (ctr * 8);\n        this.pixDims[ctr] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);\n    }\n\n    this.vox_offset = nifti.Utils.getLongAt(rawData, 168, this.littleEndian);\n\n    this.scl_slope = nifti.Utils.getDoubleAt(rawData, 176, this.littleEndian);\n    this.scl_inter = nifti.Utils.getDoubleAt(rawData, 184, this.littleEndian);\n\n    this.cal_max = nifti.Utils.getDoubleAt(rawData, 192, this.littleEndian);\n    this.cal_min = nifti.Utils.getDoubleAt(rawData, 200, this.littleEndian);\n\n    this.slice_duration = nifti.Utils.getDoubleAt(rawData, 208, this.littleEndian);\n\n    this.toffset = nifti.Utils.getDoubleAt(rawData, 216, this.littleEndian);\n\n    this.slice_start = nifti.Utils.getLongAt(rawData, 224, this.littleEndian);\n    this.slice_end = nifti.Utils.getLongAt(rawData, 232, this.littleEndian);\n\n    this.description = nifti.Utils.getStringAt(rawData, 240, 240 + 80);\n    this.aux_file = nifti.Utils.getStringAt(rawData, 320, 320 + 24);\n\n    this.qform_code = nifti.Utils.getIntAt(rawData, 344, this.littleEndian);\n    this.sform_code = nifti.Utils.getIntAt(rawData, 348, this.littleEndian);\n\n    this.quatern_b = nifti.Utils.getDoubleAt(rawData, 352, this.littleEndian);\n    this.quatern_c = nifti.Utils.getDoubleAt(rawData, 360, this.littleEndian);\n    this.quatern_d = nifti.Utils.getDoubleAt(rawData, 368, this.littleEndian);\n    this.qoffset_x = nifti.Utils.getDoubleAt(rawData, 376, this.littleEndian);\n    this.qoffset_y = nifti.Utils.getDoubleAt(rawData, 384, this.littleEndian);\n    this.qoffset_z = nifti.Utils.getDoubleAt(rawData, 392, this.littleEndian);\n\n    for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 400 + (((ctrOut * 4) + ctrIn) * 8);\n            this.affine[ctrOut][ctrIn] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);\n        }\n    }\n\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n\n    this.slice_code = nifti.Utils.getIntAt(rawData, 496, this.littleEndian);\n    this.xyzt_units = nifti.Utils.getIntAt(rawData, 500, this.littleEndian);\n    this.intent_code = nifti.Utils.getIntAt(rawData, 504, this.littleEndian);\n    this.intent_name = nifti.Utils.getStringAt(rawData, 508, 508 + 16);\n\n    this.dim_info = nifti.Utils.getByteAt(rawData, 524);\n\n    if (rawData.byteLength > nifti.NIFTI2.MAGIC_COOKIE) {\n        this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 540);\n        this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 540 + 1);\n        this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 540 + 2);\n        this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 540 + 3);\n\n        if (this.extensionFlag[0]) {\n            this.extensionSize = this.getExtensionSize(rawData);\n            this.extensionCode = this.getExtensionCode(rawData);\n        }\n    }\n};\n\n\n\n/**\n * Returns a formatted string of header fields.\n * @returns {string}\n */\nnifti.NIFTI2.prototype.toFormattedString = function () {\n    var fmt = nifti.Utils.formatNumber,\n        string = \"\";\n\n    string += (\"Datatype = \" +  + this.datatypeCode + \" (\" + this.getDatatypeCodeString(this.datatypeCode) + \")\\n\");\n    string += (\"Bits Per Voxel = \" + \" = \" + this.numBitsPerVoxel + \"\\n\");\n    string += (\"Image Dimensions\" + \" (1-8): \" +\n        this.dims[0] + \", \" +\n        this.dims[1] + \", \" +\n        this.dims[2] + \", \" +\n        this.dims[3] + \", \" +\n        this.dims[4] + \", \" +\n        this.dims[5] + \", \" +\n        this.dims[6] + \", \" +\n        this.dims[7] + \"\\n\");\n\n    string += (\"Intent Parameters (1-3): \" +\n        this.intent_p1 + \", \" +\n        this.intent_p2 + \", \" +\n        this.intent_p3) + \"\\n\";\n\n    string += (\"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) + \", \" +\n        fmt(this.pixDims[1]) + \", \" +\n        fmt(this.pixDims[2]) + \", \" +\n        fmt(this.pixDims[3]) + \", \" +\n        fmt(this.pixDims[4]) + \", \" +\n        fmt(this.pixDims[5]) + \", \" +\n        fmt(this.pixDims[6]) + \", \" +\n        fmt(this.pixDims[7]) + \"\\n\");\n\n    string += (\"Image Offset = \" + this.vox_offset + \"\\n\");\n    string += (\"Data Scale:  Slope = \" + fmt(this.scl_slope) + \"  Intercept = \" + fmt(this.scl_inter) + \"\\n\");\n    string += (\"Display Range:  Max = \" + fmt(this.cal_max) + \"  Min = \" + fmt(this.cal_min) + \"\\n\");\n    string += (\"Slice Duration = \" + this.slice_duration + \"\\n\");\n    string += (\"Time Axis Shift = \" + this.toffset + \"\\n\");\n    string += (\"Slice Start = \" + this.slice_start + \"\\n\");\n    string += (\"Slice End = \" + this.slice_end + \"\\n\");\n    string += (\"Description: \\\"\" + this.description + \"\\\"\\n\");\n    string += (\"Auxiliary File: \\\"\" + this.aux_file + \"\\\"\\n\");\n    string += (\"Q-Form Code = \" + this.qform_code + \" (\" + this.getTransformCodeString(this.qform_code) + \")\\n\");\n    string += (\"S-Form Code = \" + this.sform_code + \" (\" + this.getTransformCodeString(this.sform_code) + \")\\n\");\n    string += (\"Quaternion Parameters:  \" +\n    \"b = \" + fmt(this.quatern_b) + \"  \" +\n    \"c = \" + fmt(this.quatern_c) + \"  \" +\n    \"d = \" + fmt(this.quatern_d) + \"\\n\");\n\n    string += (\"Quaternion Offsets:  \" +\n    \"x = \" + this.qoffset_x + \"  \" +\n    \"y = \" + this.qoffset_y + \"  \" +\n    \"z = \" + this.qoffset_z + \"\\n\");\n\n    string += (\"S-Form Parameters X: \" +\n    fmt(this.affine[0][0]) + \", \" +\n    fmt(this.affine[0][1]) + \", \" +\n    fmt(this.affine[0][2]) + \", \" +\n    fmt(this.affine[0][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Y: \" +\n    fmt(this.affine[1][0]) + \", \" +\n    fmt(this.affine[1][1]) + \", \" +\n    fmt(this.affine[1][2]) + \", \" +\n    fmt(this.affine[1][3]) + \"\\n\");\n\n    string += (\"S-Form Parameters Z: \" +\n    fmt(this.affine[2][0]) + \", \" +\n    fmt(this.affine[2][1]) + \", \" +\n    fmt(this.affine[2][2]) + \", \" +\n    fmt(this.affine[2][3]) + \"\\n\");\n\n    string += (\"Slice Code = \" + this.slice_code + \"\\n\");\n    string += (\"Units Code = \" + this.xyzt_units + \" (\" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + \", \" + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + \")\\n\");\n    string += (\"Intent Code = \" + this.intent_code + \"\\n\");\n    string += (\"Intent Name: \\\"\" + this.intent_name + \"\\\"\\n\");\n\n    string += (\"Dim Info = \" + this.dim_info + \"\\n\");\n\n    return string;\n};\n\n\n\n/**\n * Returns the byte index of the extension.\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionLocation = function() {\n    return nifti.NIFTI2.MAGIC_COOKIE + 4;\n};\n\n\n\n/**\n * Returns the extension size.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionSize = nifti.NIFTI1.prototype.getExtensionSize;\n\n\n\n/**\n * Returns the extension code.\n * @param {DataView} data\n * @returns {number}\n */\nnifti.NIFTI2.prototype.getExtensionCode = nifti.NIFTI1.prototype.getExtensionCode;\n\n\n\n/**\n * Returns a human-readable string of datatype.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getDatatypeCodeString = nifti.NIFTI1.prototype.getDatatypeCodeString;\n\n\n\n/**\n * Returns a human-readable string of transform type.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getTransformCodeString = nifti.NIFTI1.prototype.getTransformCodeString;\n\n\n\n/**\n * Returns a human-readable string of spatial and temporal units.\n * @param {number} code\n * @returns {string}\n */\nnifti.NIFTI2.prototype.getUnitsCodeString = nifti.NIFTI1.prototype.getUnitsCodeString;\n\n\n\n/**\n * Returns the qform matrix.\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI2.prototype.getQformMat = nifti.NIFTI1.prototype.getQformMat;\n\n\n\n/**\n * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {number} qb\n * @param {number} qc\n * @param {number} qd\n * @param {number} qx\n * @param {number} qy\n * @param {number} qz\n * @param {number} dx\n * @param {number} dy\n * @param {number} dz\n * @param {number} qfac\n * @returns {Array.<Array.<number>>}\n */\nnifti.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;\n\n\n\n/**\n * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n * @param {Array.<Array.<number>>} R\n * @returns {string}\n */\nnifti.NIFTI2.prototype.convertNiftiSFormToNEMA = nifti.NIFTI1.prototype.convertNiftiSFormToNEMA;\n\n\n\nnifti.NIFTI2.prototype.nifti_mat33_mul = nifti.NIFTI1.prototype.nifti_mat33_mul;\n\n\n\nnifti.NIFTI2.prototype.nifti_mat33_determ = nifti.NIFTI1.prototype.nifti_mat33_determ;\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.NIFTI2;\n}\n","\n/*jslint browser: true, node: true */\n/*global require, module */\n\n\"use strict\";\n\n/*** Imports ***/\n\nvar nifti = nifti || {};\nnifti.Utils = nifti.Utils || {};\n\n\n\n/*** Static Pseudo-constants ***/\n\nnifti.Utils.crcTable = null;\nnifti.Utils.GUNZIP_MAGIC_COOKIE1 = 31;\nnifti.Utils.GUNZIP_MAGIC_COOKIE2 = 139;\n\n\n\n/*** Static methods ***/\n\nnifti.Utils.getStringAt = function (data, start, end) {\n    var str = \"\", ctr, ch;\n\n    for (ctr = start; ctr < end; ctr += 1) {\n        ch = data.getUint8(ctr);\n\n        if (ch !== 0) {\n            str += String.fromCharCode(ch);\n        }\n    }\n\n    return str;\n};\n\n\n\nnifti.Utils.getByteAt = function (data, start) {\n    return data.getInt8(start);\n};\n\n\n\nnifti.Utils.getShortAt = function (data, start, littleEndian) {\n    return data.getInt16(start, littleEndian);\n};\n\n\n\nnifti.Utils.getIntAt = function (data, start, littleEndian) {\n    return data.getInt32(start, littleEndian);\n};\n\n\n\nnifti.Utils.getFloatAt = function (data, start, littleEndian) {\n    return data.getFloat32(start, littleEndian);\n};\n\n\n\nnifti.Utils.getDoubleAt = function (data, start, littleEndian) {\n    return data.getFloat64(start, littleEndian);\n};\n\n\n\nnifti.Utils.getLongAt = function (data, start, littleEndian) {\n    var ctr, array = [], value = 0;\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n        array[ctr] = nifti.Utils.getByteAt(data, start + ctr, littleEndian);\n    }\n\n    for (ctr = array.length - 1; ctr >= 0; ctr--) {\n        value = (value * 256) + array[ctr];\n    }\n\n    return value;\n};\n\n\n\nnifti.Utils.toArrayBuffer = function (buffer) {\n    var ab, view, i;\n\n    ab = new ArrayBuffer(buffer.length);\n    view = new Uint8Array(ab);\n    for (i = 0; i < buffer.length; i += 1) {\n        view[i] = buffer[i];\n    }\n    return ab;\n};\n\n\n\nnifti.Utils.isString = function (obj) {\n    return (typeof obj === \"string\" || obj instanceof String);\n};\n\n\nnifti.Utils.formatNumber = function (num, shortFormat) {\n    var val = 0;\n\n    if (nifti.Utils.isString(num)) {\n        val = Number(num);\n    } else {\n        val = num;\n    }\n\n    if (shortFormat) {\n        val = val.toPrecision(5);\n    } else {\n        val = val.toPrecision(7);\n    }\n\n    return parseFloat(val);\n};\n\n\n\n// http://stackoverflow.com/questions/18638900/javascript-crc32\nnifti.Utils.makeCRCTable = function(){\n    var c;\n    var crcTable = [];\n    for(var n =0; n < 256; n++){\n        c = n;\n        for(var k =0; k < 8; k++){\n            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n};\n\n\n\nnifti.Utils.crc32 = function(dataView) {\n    var crcTable = nifti.Utils.crcTable || (nifti.Utils.crcTable = nifti.Utils.makeCRCTable());\n    var crc = 0 ^ (-1);\n\n    for (var i = 0; i < dataView.byteLength; i++ ) {\n        crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];\n    }\n\n    return (crc ^ (-1)) >>> 0;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = nifti.Utils;\n}\n","\"use strict\";\nvar assert = require('assert');\n\nvar lineSeparatorRE = /[ \\f\\t\\v]*\\r?\\n/;\nvar NRRDMagicRE = /^NRRD\\d{4}$/;\nvar lineRE = /^([^:]*)(:[ =])(.*)$/;\nvar dataFileListRE = /^LIST(?: (\\d+))?$/;\n\n// The minimal object this accepts is formed like this:\n//   {data: SomeTypedArray, sizes: [...]}\n// On the other hand, if data is not given it must have a form like this:\n//   {buffer: SomeArrayBuffer, type: ..., endian: ..., sizes: [...]}\n// Of course, if 'type' is an 8-bit type, endian is not needed, and if 'type' equals 'block', 'blockSize' should be set instead of 'endian'. In this case, no interpretation of buffer is done (at all, it is written serialized directly to the buffer).\n// TODO: For now this only supports serializing \"inline\" files, or files for which you have already prepared the data.\nmodule.exports.serialize = function (nrrdOrg) {\n    var i, buffer, arr, totalLen = 1, nrrd = {}, prop, nativeType, nativeSize, bufferData, arrData, line, lines = [], header;\n    \n    // Copy nrrdOrg to nrrd to allow modifications without altering the original\n    for(prop in nrrdOrg) {\n        nrrd[prop] = nrrdOrg[prop];\n    }\n    \n    // For saving files we allow inferring certain information if it is not explicitly given.\n    // Also we normalize some fields to make our own lives easier.\n    if (nrrd.sizes===undefined) { // 'sizes' should ALWAYS be given\n        throw new Error(\"Sizes missing from NRRD file!\");\n    } else if (nrrd.dimension===undefined) {\n        nrrd.dimension = nrrd.sizes.length;\n    }\n    if (nrrd.data instanceof Int8Array) {\n        nativeType = \"int8\";\n    } else if (nrrd.data instanceof Uint8Array) {\n        nativeType = \"uint8\";\n    } else if (nrrd.data instanceof Int16Array) {\n        nativeType = \"int16\";\n    } else if (nrrd.data instanceof Uint16Array) {\n        nativeType = \"uint16\";\n    } else if (nrrd.data instanceof Int32Array) {\n        nativeType = \"int32\";\n    } else if (nrrd.data instanceof Uint32Array) {\n        nativeType = \"uint32\";\n    //} else if (nrrd.data instanceof Int64Array) {\n    //    nativeType = \"int64\";\n    //} else if (nrrd.data instanceof Uint64Array) {\n    //    nativeType = \"uint64\";\n    } else if (nrrd.data instanceof Float32Array) {\n        nativeType = \"float\";\n    } else if (nrrd.data instanceof Float64Array) {\n        nativeType = \"double\";\n    }\n    if (nrrd.type===undefined && nativeType!==undefined) {\n        nrrd.type = nativeType;\n    } else if (nrrd.type===undefined) {\n        throw new Error(\"Type of data is not given and cannot be inferred!\");\n    } else if ((typeof nrrd.type) == \"string\" || nrrd.type instanceof String) {\n        nrrd.type = parseNRRDType(nrrd.type);\n    }\n    if (nrrd.encoding===undefined) {\n        nrrd.encoding = \"raw\";\n    } else if ((typeof nrrd.encoding) == \"string\" || nrrd.encoding instanceof String) {\n        nrrd.encoding = parseNRRDEncoding(nrrd.encoding);\n    }\n    if (nrrd.data && nrrd.type != 'block' && nrrd.type != 'int8' && nrrd.type != 'uint8' && nrrd.encoding != 'ascii') {\n        nrrd.endian = systemEndianness;\n    } else if (nrrd.type == 'block' || nrrd.type == 'int8' || nrrd.type == 'uint8' || nrrd.encoding == 'ascii') {\n        nrrd.endian = undefined;\n    } else if ((typeof nrrd.endian) == \"string\" || nrrd.endian instanceof String) {\n        nrrd.endian = parseNRRDEndian(nrrd.endian);\n    }\n    \n    // Try to infer spatial dimension\n    var spaceDimension = undefined;\n    if (nrrd.spaceDimension!==undefined) {\n        spaceDimension = nrrd.spaceDimension;\n    } else if (nrrd.space!==undefined) {\n        switch(nrrd.space) {\n        case \"right-anterior-superior\":\n        case \"RAS\":\n            spaceDimension = 3;\n            break;\n        case \"left-anterior-superior\":\n        case \"LAS\":\n            spaceDimension = 3;\n            break;\n        case \"left-posterior-superior\":\n        case \"LPS\":\n            spaceDimension = 3;\n            break;\n     \t  case \"right-anterior-superior-time\":\n     \t  case \"RAST\":\n     \t      spaceDimension = 4;\n     \t      break;\n        case \"left-anterior-superior-time\":\n        case \"LAST\":\n            spaceDimension = 4;\n            break;\n        case \"left-posterior-superior-time\":\n        case \"LPST\":\n            spaceDimension = 4;\n            break;\n        case \"scanner-xyz\":\n            spaceDimension = 3;\n            break;\n        case \"scanner-xyz-time\":\n            spaceDimension = 4;\n            break;\n        case \"3D-right-handed\":\n            spaceDimension = 3;\n            break;\n        case \"3D-left-handed\":\n            spaceDimension = 3;\n            break;\n        case \"3D-right-handed-time\":\n            spaceDimension = 4;\n            break;\n        case \"3D-left-handed-time\":\n            spaceDimension = 4;\n            break;\n        default:\n            console.warn(\"Unrecognized space: \" + nrrd.space);\n        }\n    }\n    \n    // Now check that we have a valid nrrd structure.\n    checkNRRD(nrrd);\n\n    // Determine number of elements and check that we have enough data (if possible)\n    for(i=0; i<nrrd.sizes.length; i++) {\n        if (nrrd.sizes[i]<=0) throw new Error(\"Sizes should be a list of positive (>0) integers!\");\n        totalLen *= nrrd.sizes[i];\n    }\n    if (nrrd.data) {\n        if (nrrd.data.length < totalLen) {\n            throw new Error(\"Missing data to serialize!\");\n        }\n    } else if (nrrd.buffer) {\n        if (nrrd.encoding == \"raw\") {\n            if (nrrd.type==\"block\" && nrrd.blockSize!==undefined) {\n                nativeSize = nrrd.blockSize;\n            } else {\n                nativeSize = getNRRDTypeSize(nrrd.type);\n            }\n            if (nrrd.buffer.byteLength < totalLen*nativeSize) {\n                throw new Error(\"Missing data to serialize!\");\n            }\n        }\n    } else if (nrrd.dataFile) {\n        // Okay, if you have your data ready, we'll just write a header.\n    } else {\n        throw new Error(\"Will not serialize an empty NRRD file!\");\n    }\n    \n    // Make sure we have the correct buffer in bufferData.\n    if (nrrd.data) {\n        switch(nrrd.encoding) {\n        case 'raw':\n            if (nrrd.type == nativeType && nrrd.endian == systemEndianness) {\n                bufferData = nrrd.data.buffer.slice(nrrd.data.byteOffset, nrrd.data.byteOffset+nrrd.data.byteLength);\n            } else if (nrrd.endian == systemEndianness) {\n                bufferData = castTypedArray(nrrd.data, nrrd.type);\n                bufferData = bufferData.buffer.slice(bufferData.byteOffset, bufferData.byteOffset+bufferData.byteLength);\n            } else {\n                bufferData = serializeToBuffer(nrrd.data, nrrd.type, nrrd.endian);\n            }\n            break;\n        case 'ascii':\n            if (nrrd.type == nativeType) {\n                bufferData = serializeToTextBuffer(nrrd.data);\n            } else {\n                bufferData = serializeToTextBuffer(castTypedArray(nrrd.data, nrrd.type));\n            }\n            break;\n        default:\n            throw new Error(\"Unsupported NRRD encoding: \" + nrrd.encoding);\n        }\n    } else if (nrrd.buffer) {\n        bufferData = nrrd.buffer;\n    }\n    \n    // Start header\n    lines.push(\"NRRD0005\"); // TODO: Adjust version based on features that are actually used and/or the version specified by the user (if any).\n    lines.push(\"# Generated by nrrd-js\");\n    \n    // Put in dimension and space dimension (the NRRD spec requires that these are present before any lists whose length depends on them)\n    var firstProps = ['dimension', 'spaceDimension', 'space'];\n    for(i=0; i<firstProps.length; i++) {\n        prop = firstProps[i];\n        if (nrrd[prop] === undefined) continue; // Skip things we explicitly set to undefined.\n        line = serializeField(prop, nrrd[prop], nrrd.dimension, spaceDimension);\n        if (line!==undefined) lines.push(line);\n    }\n    \n    // Put in field specifications\n    for(prop in nrrd) {\n        if (nrrd[prop] === undefined) continue; // Skip things we explicitly set to undefined.\n        if (firstProps.indexOf(prop)>=0) continue; // Skip the fields we already output.\n        line = serializeField(prop, nrrd[prop], nrrd.dimension, spaceDimension);\n        if (line!==undefined) lines.push(line);\n    }\n    \n    // Put in keys (if any)\n    if (nrrd.keys) for(prop in nrrd.keys) {\n        if (prop.indexOf(\":=\")>=0) throw new Error(\"The combination ':=' is not allowed in an NRRD key!\");\n        lines.push(prop + \":=\" + escapeValue(nrrd[prop]));\n    }\n    \n    // Put in data file list (if any)\n    if (nrrd.dataFile && nrrd.dataFile.length) {\n        lines.push(\"data file: LIST\");\n        Array.prototype.push.apply(lines, nrrd.dataFile);\n    } else if (nrrd.dataFile && nrrd.dataFile.files && 'subdim' in nrrd.dataFile) {\n        lines.push(\"data file: LIST \" + nrrd.dataFile.subdim);\n        Array.prototype.push.apply(lines, nrrd.dataFile.files);\n    }\n    \n    // Put in empty line and inline data (if we have inline data) and convert lines to buffer\n    if (bufferData && !('dataFile' in nrrd)) {\n        lines.push(\"\");\n        lines.push(\"\"); // We actually need an extra blank line to make sure the previous is terminated.\n        header = lines.join(\"\\n\");\n        buffer = new ArrayBuffer(header.length + bufferData.byteLength);\n        arr = new Uint8Array(buffer);\n        for(i=0; i<header.length; i++) {\n            arr[i] = header.charCodeAt(i);\n        }\n        arrData = new Uint8Array(bufferData);\n        arr.set(arrData, header.length);\n    } else {\n        lines.push(\"\"); // Blank line to at least terminate the last line.\n        header = lines.join(\"\\n\");\n        buffer = new ArrayBuffer(header.length);\n        arr = new Uint8Array(buffer);\n        for(i=0; i<header.length; i++) {\n            arr[i] = header.charCodeAt(i);\n        }\n    }\n    \n    return buffer;\n};\n\n// This expects an ArrayBuffer.\nmodule.exports.parse = function (buffer) {\n    var i, header, dataStart, ret = {data: undefined/* parsed data */, buffer: undefined/* raw buffer holding data */, keys: {}, version: undefined},\n        lines, match, match2,\n        buf8 = new Uint8Array(buffer);\n\n    // A work-around for incompatibilities between Node's Buffer and ArrayBuffer.\n    if (buf8.buffer !== buffer) buffer = buf8.buffer;\n\n    // First find the separation between the header and the data (if there is one)\n    // Note that we need to deal with with LF and CRLF as possible line endings.\n    // Luckily this means the line always ends with LF, so we only need to consider\n    // LFLF and LFCRLF as patterns for the separating empty line.\n    i=2; // It is safe to start at position 2 (in fact, we could start even later), as the file HAS to start with a magic word.\n    while(i<buf8.length) {\n        if (buf8[i] == 10) { // We hit an LF\n            if (buf8[i-1] == 10 || (buf8[i-1] == 13 && buf8[i-2] == 10)) { // Safe because we start at position 2 and never move backwards\n                dataStart = i+1;\n                break;\n            } else {\n                i++; // Move forward just once\n            }\n        } else if (buf8[i] == 13) { // We hit a CR\n            i++; // Move forward just once\n        } else {\n            i += 2; // Move forward two places, \n        }\n    }\n    \n    // Now split up the header and data\n    if (dataStart === undefined) {\n        header = String.fromCharCode.apply(null, buf8);\n    } else {\n        header = String.fromCharCode.apply(null, buf8.subarray(0,dataStart));\n        ret.buffer = buffer.slice(dataStart);\n    }\n    \n    // Split header into lines, remove comments (and blank lines) and check magic.\n    // All remaining lines except the first should be field specifications or key/value pairs.\n    // TODO: This explicitly removes any whitespace at the end of lines, however, I am not sure that this is actually desired behaviour for all kinds of lines.\n    lines = header.split(lineSeparatorRE);\n    lines = lines.filter(function (l) { return l.length>0 && l[0] != '#'; }); // Remove comment lines\n    if (!NRRDMagicRE.test(lines[0])) {\n        throw new Error(\"File is not an NRRD file!\");\n    }\n    ret.version = parseInt(lines[0].substring(4, 8), 10);\n    if (ret.version>5) {\n        console.warn(\"Reading an unsupported version of the NRRD format; things may go haywire.\");\n    }\n\n    // Parse lines\n    for(i=1; i<lines.length; i++) {\n        match = lineRE.exec(lines[i]);\n        if (!match) {\n            console.warn(\"Unrecognized line in NRRD header: \" + lines[i]);\n            continue;\n        }\n        if (match[2] == ': ') { // Field specification\n            match[1] = mapNRRDToJavascript(match[1]);\n            if ( match[1] == 'dataFile' &&\n                 (match2 = dataFileListRE.exec(match[3]))) {\n                // This should be the last field specification,\n                // and the rest of the lines should contain file names.\n                if (match2.length == 2 && match2[1]) { // subdim specification\n                    ret[match[1]] = {\n                        files: lines.slice(i+1),\n                        subdim: parseNRRDInteger(match2[1])\n                    };\n                } else {\n                    ret[match[1]] = lines.slice(i+1);\n                }\n                lines.length = i;\n            } else {\n                ret[match[1]] = parseField(match[1], match[3]);\n            }\n        } else if (match[2] == ':=') { // Key/value pair\n            ret.keys[match[1]] = unescapeValue(match[3]);\n        } else {\n            throw new Error(\"Logic error in NRRD parser.\"); // This should never happen (unless the NRRD syntax is extended and the regexp is updated, but this section is not, or some other programmer error).\n        }\n    }\n\n    // Make sure the file satisfies the requirements of the NRRD format\n    checkNRRD(ret);\n    \n    // \"Parse\" data\n    if ('dataFile' in ret) {\n        console.warn(\"No support for external data yet!\");\n    } else {\n        switch(ret.encoding) {\n        case 'raw':\n            ret.data = parseNRRDRawData(ret.buffer, ret.type, ret.sizes, {\n                endian: ret.endian, blockSize: ret.blockSize\n            });\n            break;\n        case 'ascii':\n            ret.data = parseNRRDTextData(ret.buffer, ret.type, ret.sizes);\n            break;\n        default:\n            console.warn(\"Unsupported NRRD encoding: \" + ret.encoding);\n        }\n    }\n    \n    return ret;\n};\n\nfunction escapeValue(val) {\n    return val.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n');\n}\n\nfunction unescapeValue(val) {\n    return val.split('\\\\\\\\').map(\n        function(s) { return s.replace('\\\\n', '\\n'); }\n        ).join('\\\\');\n}\n\n// Serializes NRRD fields\nfunction serializeField(prop, value, dimension, spaceDimension) {\n    var line;\n    var propNRRD = mapJavascriptToNRRD(prop);\n    switch(prop) {\n    // nrrd-js stuff: skip\n    case 'data':\n    case 'buffer':\n    case 'keys':\n    case 'version':\n        break;\n    // Literal (uninterpreted) fields\n    case 'content':\n    case 'number':\n    case 'sampleUnits':\n    case 'space':\n        line = propNRRD + \": \" + value;\n        break;\n    // Integers (no infinity or whatever, just a plain integer, so the default serialization is good enough)\n    case 'blockSize':\n    case 'lineSkip':\n    case 'byteSkip':\n    case 'dimension':\n    case 'spaceDimension':\n        assert((typeof value) == \"number\" || value instanceof Number, \"Field \" + prop + \" should at least contain a number!\");\n        line = propNRRD + \": \" + value;\n        break;\n    // Floats (default serialization is good enough, as NaN contains nan, ignoring case, and similarly for Infinity inf)\n    case 'min':\n    case 'max':\n    case 'oldMin':\n    case 'oldMax':\n        assert((typeof value) == \"number\" || value instanceof Number, \"Field \" + prop + \" should contain a number!\");\n        line = propNRRD + \": \" + value;\n        break;\n    // Vectors\n    case 'spaceOrigin':\n        assert(value.length === spaceDimension, \"Field \" + prop + \" should be a list with length equal to the space dimension!\");\n        value.forEach(function (val) { assert((typeof val) == \"number\" || val instanceof Number, \"Field \" + prop + \" should be a list of numbers!\"); });\n        line = propNRRD + \": (\" + value.join(\",\") + \")\";\n        break;\n    // Lists of strings\n    case 'labels':\n    case 'units':\n    case 'spaceUnits':\n        assert(value.length !== undefined && value.length == dimension, \"Field \" + prop + \" should be a list with length equal to the dimension!\");\n        value.forEach(function (val) { assert((typeof val) == \"string\" || val instanceof String, \"Field \" + prop + \" should be a list of numbers!\"); });\n        line = propNRRD + \": \" + value.map(serializeNRRDQuotedString).join(\" \");\n        break;\n    // Lists of integers\n    case 'sizes':\n        assert(value.length !== undefined && value.length == dimension, \"Field \" + prop + \" should be a list with length equal to the dimension!\");\n        value.forEach(function (val) { assert((typeof val) == \"number\" || val instanceof Number, \"Field \" + prop + \" should be a list of numbers!\"); });\n        line = propNRRD + \": \" + value.join(\" \");\n        break;\n    // Lists of floats\n    case 'spacings':\n    case 'thicknesses':\n    case 'axisMins':\n    case 'axisMaxs':\n        assert(value.length !== undefined && value.length == dimension, \"Field \" + prop + \" should be a list with length equal to the dimension!\");\n        value.forEach(function (val) { assert((typeof val) == \"number\" || val instanceof Number, \"Field \" + prop + \" should be a list of numbers!\"); });\n        line = propNRRD + \": \" + value.join(\" \");\n        break;\n    // Lists of vectors (dimension sized)\n    case 'spaceDirections':\n        assert(value.length !== undefined && value.length === dimension, \"Field \" + prop + \" should be a list with length equal to the dimension!\");\n        value.forEach(function (vec) {\n          assert(vec === null || (vec.length !== undefined && vec.length === spaceDimension), \"The elements of field \" + prop + \" should be lists with length equal to the space dimension!\");\n          if (vec !== null) vec.forEach(function (val) { assert((typeof val) == \"number\" || val instanceof Number, \"The elements of field \" + prop + \" should be lists of numbers!\"); });\n        });\n        line = propNRRD + \": \" + value.map(function(vec) { return vec === null ? \"none\" : (\"(\" + vec.join(\",\") + \")\"); }).join(\" \");\n        break;\n    // Lists of vectors (space dimension sized)\n    case 'measurementFrame':\n        assert(value.length !== undefined && value.length === spaceDimension, \"Field \" + prop + \" should be a list with length equal to the space dimension!\");\n        value.forEach(function (vec) {\n          assert(vec === null || (vec.length !== undefined && vec.length === spaceDimension), \"The elements of field \" + prop + \" should be lists with length equal to the space dimension!\");\n          if (vec !== null) vec.forEach(function (val) { assert((typeof val) == \"number\" || val instanceof Number, \"The elements of field \" + prop + \" should be lists of numbers!\"); });\n        });\n        line = propNRRD + \": \" + value.map(function(vec) { return vec === null ? \"none\" : (\"(\" + vec.join(\",\") + \")\"); }).join(\" \");\n        break;\n    // One-of-a-kind fields\n    case 'type':\n        assert((typeof value) == \"string\" || value instanceof String, \"Field \" + prop + \" should contain a string!\");\n        line = propNRRD + \": \" + value;\n        break;\n    case 'encoding':\n        assert((typeof value) == \"string\" || value instanceof String, \"Field \" + prop + \" should contain a string!\");\n        line = propNRRD + \": \" + value;\n        break;\n    case 'endian':\n        assert((typeof value) == \"string\" || value instanceof String, \"Field \" + prop + \" should contain a string!\");\n        line = propNRRD + \": \" + value;\n        break;\n    case 'dataFile':\n        if (value.length || (value.files && 'subdim' in value)) {\n            // List of data files: skip for now\n        } else {\n            line = propNRRD + \": \" + serializeNRRDDataFile(value);\n        }\n        break;\n    case 'centers':\n        assert(value.length !== undefined && value.length == dimension, \"Field \" + prop + \" should be a list with length equal to the dimension!\");\n        line = propNRRD + \": \" + value.map(serializeNRRDOptional).join(\" \");\n        break;\n    case 'kinds':\n        assert(value.length !== undefined && value.length == dimension, \"Field \" + prop + \" should be a list with length equal to the dimension!\");\n        line = propNRRD + \": \" + value.map(serializeNRRDOptional).join(\" \");\n        break;\n    // Something unknown\n    default:\n        console.warn(\"Unrecognized NRRD field: \" + prop + \", skipping.\");\n    }\n    return line;\n}\n\n// Parses and normalizes NRRD fields, assumes the field names are already lower case.\nfunction parseField(identifier, descriptor) {\n    switch(identifier) {\n    // Literal (uninterpreted) fields\n    case 'content':\n    case 'number':\n    case 'sampleUnits':\n        break;\n    // Integers\n    case 'dimension':\n    case 'blockSize':\n    case 'lineSkip':\n    case 'byteSkip':\n    case 'spaceDimension':\n        descriptor = parseNRRDInteger(descriptor);\n        break;\n    // Floats\n    case 'min':\n    case 'max':\n    case 'oldMin':\n    case 'oldMax':\n        descriptor = parseNRRDFloat(descriptor);\n        break;\n    // Vectors\n    case 'spaceOrigin':\n        descriptor = parseNRRDVector(descriptor);\n        break;\n    // Lists of strings\n    case 'labels':\n    case 'units':\n    case 'spaceUnits':\n        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDQuotedString);\n        break;\n    // Lists of integers\n    case 'sizes':\n        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDInteger);\n        break;\n    // Lists of floats\n    case 'spacings':\n    case 'thicknesses':\n    case 'axisMins':\n    case 'axisMaxs':\n        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDFloat);\n        break;\n    // Lists of vectors\n    case 'spaceDirections':\n    case 'measurementFrame':\n        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDVector);\n        break;\n    // One-of-a-kind fields\n    case 'type':\n        descriptor = parseNRRDType(descriptor);\n        break;\n    case 'encoding':\n        descriptor = parseNRRDEncoding(descriptor);\n        break;\n    case 'endian':\n        descriptor = parseNRRDEndian(descriptor);\n        break;\n    case 'dataFile':\n        descriptor = parseNRRDDataFile(descriptor);\n        break;\n    case 'centers':\n        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDCenter);\n        break;\n    case 'kinds':\n        descriptor = parseNRRDWhitespaceSeparatedList(descriptor, parseNRRDKind);\n        break;\n    case 'space':\n        descriptor = parseNRRDSpace(descriptor);\n        break;\n    // Something unknown\n    default:\n        console.warn(\"Unrecognized NRRD field: \" + identifier);\n    }\n    return descriptor;\n}\n\n// This only includes names whose lower case form is different from the Javascript form.\nvar mapNRRDToJavascriptStatic = {\n    'block size': 'blockSize',\n    'blocksize': 'blockSize',\n    'old min': 'oldMin',\n    'oldmin': 'oldMin',\n    'old max': 'oldMax',\n    'oldmax': 'oldMax',\n    'data file': 'dataFile',\n    'datafile': 'dataFile',\n    'line skip': 'lineSkip',\n    'lineskip': 'lineSkip',\n    'byte skip': 'byteSkip',\n    'byteskip': 'byteSkip',\n    'sample units': 'sampleUnits',\n    'sampleunits': 'sampleUnits',\n    'axis mins': 'axisMins',\n    'axis maxs': 'axisMaxs',\n    'centers': 'centers', // Not different, just included so it is clear why centerings maps to centers\n    'centerings': 'centers',\n    'space dimension': 'spaceDimension',\n    'space units': 'spaceUnits',\n    'space origin': 'spaceOrigin',\n    'space directions': 'spaceDirections',\n    'measurement frame': 'measurementFrame'\n};\nvar mapJavascriptToNRRDStatic = function() {\n  var id, m = {};\n  for(id in mapNRRDToJavascriptStatic) {\n    m[mapNRRDToJavascriptStatic[id]] = id;\n  }\n  return m;\n}();\nfunction mapNRRDToJavascript(id) {\n    // In any case, use the lower case version of the id\n    id = id.toLowerCase();\n    // Filter out any fields for which we have an explicit Javascript name\n    if (id in mapNRRDToJavascriptStatic) return mapNRRDToJavascriptStatic[id];\n    // Otherwise, just return the (lower case) id\n    return id;\n}\nfunction mapJavascriptToNRRD(id) {\n    // Filter out any fields for which we have an explicit NRRD name\n    if (id in mapJavascriptToNRRDStatic) return mapJavascriptToNRRDStatic[id];\n    // Otherwise, just return the id\n    return id;\n}\n\nfunction parseNRRDInteger(str) {\n    var val = parseInt(str, 10);\n    if (Number.isNaN(val)) throw new Error(\"Malformed NRRD integer: \" + str);\n    return val;\n}\n\nfunction parseNRRDFloat(str) {\n    str = str.toLowerCase();\n    if (str.indexOf('nan')>=0) return NaN;\n    if (str.indexOf('-inf')>=0) return -Infinity;\n    if (str.indexOf('inf')>=0) return Infinity;\n    var val = parseFloat(str);\n    if (Number.isNaN(val)) throw new Error(\"Malformed NRRD float: \" + str);\n    return val;\n}\n\nfunction parseNRRDVector(str) {\n    if (str == \"none\") return null;\n    if (str.length<2 || str[0]!==\"(\" || str[str.length-1]!==\")\") throw new Error(\"Malformed NRRD vector: \" + str);\n    return str.slice(1, -1).split(\",\").map(parseNRRDFloat);\n}\n\nfunction parseNRRDQuotedString(str) {\n    if (length<2 || str[0]!='\"' || str[str.length-1]!='\"') {\n        throw new Error(\"Invalid NRRD quoted string: \" + str);\n    }\n    return str.slice(1, -1).replace('\\\\\"', '\"');\n}\n\nfunction serializeNRRDQuotedString(str) {\n    return '\"' + str.replace('\"', '\\\\\"') + '\"';\n}\n\nvar whitespaceListSeparator = /[ \\t]+/; // Note that this excludes other types of whitespace on purpose!\nfunction parseNRRDWhitespaceSeparatedList(str, parseElement) {\n    return str.split(whitespaceListSeparator).map(parseElement);\n}\n\nfunction parseNRRDType(descriptor) {\n    switch(descriptor.toLowerCase()) {\n    case \"signed char\":\n    case \"int8\":\n    case \"int8_t\":\n        return 'int8';\n    case \"uchar\":\n    case \"unsigned char\":\n    case \"uint8\":\n    case \"uint8_t\":\n        return 'uint8';\n    case \"short\":\n    case \"short int\":\n    case \"signed short\":\n    case \"signed short int\":\n    case \"int16\":\n    case \"int16_t\":\n        return 'int16';\n    case \"ushort\":\n    case \"unsigned short\":\n    case \"unsigned short int\":\n    case \"uint16\":\n    case \"uint16_t\":\n        return 'uint16';\n    case \"int\":\n    case \"signed int\":\n    case \"int32\":\n    case \"int32_t\":\n        return 'int32';\n    case \"uint\":\n    case \"unsigned int\":\n    case \"uint32\":\n    case \"uint32_t\":\n        return 'uint32';\n    case \"longlong\":\n    case \"long long\":\n    case \"long long int\":\n    case \"signed long long\":\n    case \"signed long long int\":\n    case \"int64\":\n    case \"int64_t\":\n        return 'int64';\n    case \"ulonglong\":\n    case \"unsigned long long\":\n    case \"unsigned long long int\":\n    case \"uint64\":\n    case \"uint64_t\":\n        return 'uint64';\n    case \"float\":\n        return 'float';\n    case \"double\":\n        return 'double';\n    case \"block\":\n        return 'block';\n    default:\n        console.warn(\"Unrecognized NRRD type: \" + descriptor);\n        return descriptor;\n    }\n}\n\nfunction parseNRRDEncoding(encoding) {\n    switch(encoding.toLowerCase()) {\n    case \"raw\":\n        return \"raw\";\n    case \"txt\":\n    case \"text\":\n    case \"ascii\":\n        return \"ascii\";\n    case \"hex\":\n        return \"hex\";\n    case \"gz\":\n    case \"gzip\":\n        return \"gzip\";\n    case \"bz2\":\n    case \"bzip2\":\n        return \"bzip2\";\n    default:\n        console.warn(\"Unrecognized NRRD encoding: \" + encoding);\n        return encoding;\n    }\n}\n\nfunction parseNRRDSpace(space) {\n    switch(space.toLowerCase()) {\n    case \"right-anterior-superior\":\n    case \"ras\":\n        return \"right-anterior-superior\";\n    case \"left-anterior-superior\":\n    case \"las\":\n        return \"left-anterior-superior\";\n    case \"left-posterior-superior\":\n    case \"lps\":\n        return \"left-posterior-superior\";\n \t  case \"right-anterior-superior-time\":\n \t  case \"rast\":\n        return \"right-anterior-superior-time\";\n    case \"left-anterior-superior-time\":\n    case \"last\":\n        return \"left-anterior-superior-time\";\n    case \"left-posterior-superior-time\":\n    case \"lpst\":\n        return \"left-posterior-superior-time\";\n    case \"scanner-xyz\":\n        return \"scanner-xyz\";\n    case \"scanner-xyz-time\":\n        return \"scanner-xyz-time\";\n    case \"3d-right-handed\":\n        return \"3D-right-handed\";\n    case \"3d-left-handed\":\n        return \"3D-left-handed\";\n    case \"3d-right-handed-time\":\n        return \"3D-right-handed-time\";\n    case \"3d-left-handed-time\":\n        return \"3D-left-handed-time\";\n    default:\n        console.warn(\"Unrecognized space: \" + space);\n        return space;\n    }\n}\n\nfunction parseNRRDEndian(endian) {\n    switch(endian.toLowerCase()) {\n    case 'little':\n        return 'little';\n    case 'big':\n        return 'big';\n    default:\n        console.warn(\"Unrecognized NRRD endianness: \" + endian);\n        return endian;\n    }\n}\n\n// Note that this function will never encounter the LIST data file specification format, as this is handled elsewhere.\nvar dataFileFormatRE = / (-?\\d+) (-?\\d+) (-?\\d+)(?: (\\d+))?$/;\nfunction parseNRRDDataFile(dataFile) {\n    var match = dataFileFormatRE.exec(dataFile);\n    if (match) { // We have a format specification\n        if (match.length == 5 && match[4]) { // subdim specification\n            return {\n                format: dataFile.substring(0, match.index),\n                min: parseNRRDInteger(match[1]),\n                max: parseNRRDInteger(match[2]),\n                step: parseNRRDInteger(match[3]),\n                subdim: parseNRRDInteger(match[4])\n            };\n        } else {\n            return {\n                format: dataFile.substring(0, match.index),\n                min: parseNRRDInteger(match[1]),\n                max: parseNRRDInteger(match[2]),\n                step: parseNRRDInteger(match[3])\n            };\n        }\n    } else { // Just a file\n        return dataFile;\n    }\n}\n\nfunction serializeNRRDDataFile(dataFile) {\n    if ((typeof dataFile) == \"string\" || dataFile instanceof String) {\n        return dataFile;\n    } else if ('format' in dataFile && 'min' in dataFile && 'max' in dataFile && 'step' in dataFile) {\n        if ('subdim' in dataFile) {\n            return dataFile.format + \" \" + dataFile.min + \" \" + dataFile.max + \" \" + dataFile.step + \" \" + dataFile.subdim;\n        } else {\n            return dataFile.format + \" \" + dataFile.min + \" \" + dataFile.max + \" \" + dataFile.step;\n        }\n    } else {\n        throw new Error(\"Unrecognized data file format!\");\n    }\n}\n\nfunction parseNRRDCenter(center) {\n    switch(center.toLowerCase()) {\n    case \"cell\":\n        return \"cell\";\n    case \"node\":\n        return \"node\";\n    case \"???\":\n    case \"none\":\n        return null;\n    default:\n        console.warn(\"Unrecognized NRRD center: \" + center);\n        return center;\n    }\n}\n\nvar NRRDKinds = {\n    \"domain\": \"domain\",\n    \"space\": \"space\",\n    \"time\": \"time\",\n    \"list\": \"list\",\n    \"point\": \"point\",\n    \"vector\": \"vector\",\n    \"covariant-vector\": \"covariant-vector\",\n    \"normal\": \"normal\",\n    \"stub\": \"stub\",\n    \"scalar\": \"scalar\",\n    \"complex\": \"complex\",\n    \"2-vector\": \"2-vector\",\n    \"3-color\": \"3-color\",\n    \"rgb-color\": \"RGB-color\",\n    \"hsv-color\": \"HSV-color\",\n    \"xyz-color\": \"XYZ-color\",\n    \"4-color\": \"4-color\",\n    \"rgba-color\": \"RGBA-color\",\n    \"3-vector\": \"3-vector\",\n    \"3-gradient\": \"3-gradient\",\n    \"3-normal\": \"3-normal\",\n    \"4-vector\": \"4-vector\",\n    \"quaternion\": \"quaternion\",\n    \"2d-symmetric-matrix\": \"2D-symmetric-matrix\",\n    \"2d-masked-symmetric-matrix\": \"2D-masked-symmetric-matrix\",\n    \"2d-matrix\": \"2D-matrix\",\n    \"2d-masked-matrix\": \"2D-masked-matrix\",\n    \"3d-symmetric-matrix\": \"3D-symmetric-matrix\",\n    \"3d-masked-symmetric-matrix\": \"3D-masked-symmetric-matrix\",\n    \"3d-matrix\": \"3D-matrix\",\n    \"3d-masked-matrix\": \"3D-masked-matrix\",\n    \"???\": null,\n    \"none\": null\n};\nfunction parseNRRDKind(kind) {\n    var kindLC = kind.toLowerCase();\n    if (kindLC in NRRDKinds) return NRRDKinds[kindLC];\n    console.warn(\"Unrecognized NRRD kind: \" + kind);\n    return kind;\n}\n\nfunction serializeNRRDOptional(a) {\n    return a===null ? \"???\" : a;\n}\n\nvar systemEndianness = (function() {\n    var buf = new ArrayBuffer(4),\n        intArr = new Uint32Array(buf),\n        byteArr = new Uint8Array(buf);\n    intArr[0] = 0x01020304;\n    if (byteArr[0]==1 && byteArr[1]==2 && byteArr[2]==3 && byteArr[3]==4) {\n        return 'big';\n    } else if (byteArr[0]==4 && byteArr[1]==3 && byteArr[2]==2 && byteArr[3]==1) {\n        return 'little';\n    }\n    console.warn(\"Unrecognized system endianness!\");\n    return undefined;\n})();\n\nfunction parseNRRDRawData(buffer, type, sizes, options) {\n    var i, arr, view, totalLen = 1, endianFlag;\n    for(i=0; i<sizes.length; i++) {\n        if (sizes[i]<=0) throw new Error(\"Sizes should be a list of positive (>0) integers!\");\n        totalLen *= sizes[i];\n    }\n    if (type == 'block') {\n        // Don't do anything special, just return the slice containing all blocks.\n        return buffer.slice(0,totalLen*options.blockSize);\n    } else if (type == 'int8' || type == 'uint8' || options.endian == systemEndianness) {\n        switch(type) {\n        case \"int8\":\n            checkSize(1);\n            return new Int8Array(buffer.slice(0,totalLen));\n        case \"uint8\":\n            checkSize(1);\n            return new Uint8Array(buffer.slice(0,totalLen));\n        case \"int16\":\n            checkSize(2);\n            return new Int16Array(buffer.slice(0,totalLen*2));\n        case \"uint16\":\n            checkSize(2);\n            return new Uint16Array(buffer.slice(0,totalLen*2));\n        case \"int32\":\n            checkSize(4);\n            return new Int32Array(buffer.slice(0,totalLen*4));\n        case \"uint32\":\n            checkSize(4);\n            return new Uint32Array(buffer.slice(0,totalLen*4));\n        //case \"int64\":\n        //    checkSize(8);\n        //    return new Int64Array(buffer.slice(0,totalLen*8));\n        //case \"uint64\":\n        //    checkSize(8);\n        //    return new Uint64Array(buffer.slice(0,totalLen*8));\n        case \"float\":\n            checkSize(4);\n            return new Float32Array(buffer.slice(0,totalLen*4));\n        case \"double\":\n            checkSize(8);\n            return new Float64Array(buffer.slice(0,totalLen*8));\n        default:\n            console.warn(\"Unsupported NRRD type: \" + type + \", returning raw buffer.\");\n            return undefined;\n        }\n    } else {\n        switch(options.endian) {\n        case 'big':\n            endianFlag = false;\n            break;\n        case 'little':\n            endianFlag = true;\n            break;\n        default:\n            console.warn(\"Unsupported endianness in NRRD file: \" + options.endian);\n            return undefined;\n        }\n        view = new DataView(buffer);\n        switch(type) {\n        case \"int8\": // Note that here we do not need to check the size of the buffer, as the DataView.get methods should throw an exception if we read beyond the buffer.\n            arr = new Int8Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getInt8(i);\n            }\n            return arr;\n        case \"uint8\":\n            arr = new Uint8Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getUint8(i);\n            }\n            return arr;\n        case \"int16\":\n            arr = new Int16Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getInt16(i*2);\n            }\n            return arr;\n        case \"uint16\":\n            arr = new Uint16Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getUint16(i*2);\n            }\n            return arr;\n        case \"int32\":\n            arr = new Int32Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getInt32(i*4);\n            }\n            return arr;\n        case \"uint32\":\n            arr = new Uint32Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getUint32(i*4);\n            }\n            return arr;\n        //case \"int64\":\n        //    arr = new Int64Array(totalLen);\n        //    for(i=0; i<totalLen; i++) {\n        //        arr[i] = view.getInt64(i*8);\n        //    }\n        //    return arr;\n        //case \"uint64\":\n        //    arr = new Uint64Array(totalLen);\n        //    for(i=0; i<totalLen; i++) {\n        //        arr[i] = view.getUint64(i*8);\n        //    }\n        //    return arr;\n        case \"float\":\n            arr = new Float32Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getFloat32(i*4);\n            }\n            return arr;\n        case \"double\":\n            arr = new Float64Array(totalLen);\n            for(i=0; i<totalLen; i++) {\n                arr[i] = view.getFloat64(i*8);\n            }\n            return arr;\n        default:\n            console.warn(\"Unsupported NRRD type: \" + type + \", returning raw buffer.\");\n            return undefined;\n        }\n    }\n    function checkSize(sizeOfType) {\n        if (buffer.byteLength<totalLen*sizeOfType) throw new Error(\"NRRD file does not contain enough data!\");\n    }\n}\n\nvar whitespaceDataValueListSeparatorRE = /[ \\t\\n\\r\\v\\f]+/;\nfunction parseNRRDTextData(buffer, type, sizes) {\n    var i, buf8, str, strList, totalLen = 1;\n    for(i=0; i<sizes.length; i++) {\n        if (sizes[i]<=0) throw new Error(\"Sizes should be a list of positive (>0) integers!\");\n        totalLen *= sizes[i];\n    }\n    buf8 = new Uint8Array(buffer);\n    str = String.fromCharCode.apply(null, buf8);\n    strList = str.split(whitespaceDataValueListSeparatorRE);\n    if (strList.length<totalLen) {\n        throw new Error(\"Not enough data in NRRD file!\");\n    } else if (strList.length>totalLen) {\n        if (strList[0] === '') strList = strList.slice(1); // Strictly speaking the spec doesn't (explicitly) allow whitespace in front of the first number, but let's be lenient.\n        strList = strList.slice(0, totalLen);\n    }\n    switch(type) {\n    case \"int8\":\n        return new Int8Array(strList.map(parseNRRDInteger));\n    case \"uint8\":\n        return new Uint8Array(strList.map(parseNRRDInteger));\n    case \"int16\":\n        return new Int16Array(strList.map(parseNRRDInteger));\n    case \"uint16\":\n        return new Uint16Array(strList.map(parseNRRDInteger));\n    case \"int32\":\n        return new Int32Array(strList.map(parseNRRDInteger));\n    case \"uint32\":\n        return new Uint32Array(strList.map(parseNRRDInteger));\n    //case \"int64\":\n    //    return new Int64Array(strList.map(parseNRRDInteger));\n    //case \"uint64\":\n    //    return new Uint64Array(strList.map(parseNRRDInteger));\n    case \"float\":\n        return new Float32Array(strList.map(parseNRRDFloat));\n    case \"double\":\n        return new Float64Array(strList.map(parseNRRDFloat));\n    default:\n        console.warn(\"Unsupported NRRD type: \" + type + \".\");\n        return undefined;\n    }\n}\n\n// This ALWAYS returns an integer, or throws an exception.\nfunction getNRRDTypeSize(type) {\n    switch(type) {\n    case \"int8\":\n        return 1;\n    case \"uint8\":\n        return 1;\n    case \"int16\":\n        return 2;\n    case \"uint16\":\n        return 2;\n    case \"int32\":\n        return 4;\n    case \"uint32\":\n        return 4;\n    case \"int64\":\n        return 8;\n    case \"uint64\":\n        return 8;\n    case \"float\":\n        return 4;\n    case \"double\":\n        return 8;\n    default:\n        throw new Error(\"Do not know the size of NRRD type: \" + type);\n    }\n}\n\nfunction checkNRRD(ret) {\n    // Always necessary fields\n    if (ret.dimension===undefined) {\n        throw new Error(\"Dimension missing from NRRD file!\");\n    } else if (ret.type===undefined) {\n        throw new Error(\"Type missing from NRRD file!\");\n    } else if (ret.encoding===undefined) {\n        throw new Error(\"Encoding missing from NRRD file!\");\n    } else if (ret.sizes===undefined) {\n        throw new Error(\"Sizes missing from NRRD file!\");\n    }\n    \n    // Sometimes necessary fields\n    if (ret.type != 'block' && ret.type != 'int8' && ret.type != 'uint8' &&\n          ret.encoding != 'ascii' && ret.endian === undefined) {\n        throw new Error(\"Endianness missing from NRRD file!\");\n    } else if (ret.type == 'block' && ret.blockSize === undefined) {\n        throw new Error(\"Missing block size in NRRD file!\");\n    }\n    \n    // Check dimension and per-axis field lengths\n    if (ret.dimension === 0) {\n        throw new Error(\"Zero-dimensional NRRD file?\");\n    } else if (ret.dimension != ret.sizes.length) {\n        throw new Error(\"Length of 'sizes' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.spacings && ret.dimension != ret.spacings.length) {\n        throw new Error(\"Length of 'spacings' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.thicknesses && ret.dimension != ret.thicknesses.length) {\n        throw new Error(\"Length of 'thicknesses' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.axisMins && ret.dimension != ret.axisMins.length) {\n        throw new Error(\"Length of 'axis mins' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.axisMaxs && ret.dimension != ret.axisMaxs.length) {\n        throw new Error(\"Length of 'axis maxs' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.centers && ret.dimension != ret.centers.length) {\n        throw new Error(\"Length of 'centers' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.labels && ret.dimension != ret.labels.length) {\n        throw new Error(\"Length of 'labels' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.units && ret.dimension != ret.units.length) {\n        throw new Error(\"Length of 'units' is different from 'dimension' in an NRRD file!\");\n    } else if (ret.kinds && ret.dimension != ret.kinds.length) {\n        throw new Error(\"Length of 'kinds' is different from 'dimension' in an NRRD file!\");\n    }\n    \n    // TODO: Check space/orientation fields.\n    \n    // We should either have inline data or external data\n    if ((ret.data === undefined || ret.data.length === 0) && (ret.buffer === undefined || ret.buffer.byteLength === 0) && ret.dataFile === undefined) {\n        throw new Error(\"NRRD file has neither inline or external data!\");\n    }\n}\n\nfunction castTypedArray(data, type) {\n    switch(type) {\n    case \"int8\":\n        return new Int8Array(data);\n    case \"uint8\":\n        return new Uint8Array(data);\n    case \"int16\":\n        return new Int16Array(data);\n    case \"uint16\":\n        return new Uint16Array(data);\n    case \"int32\":\n        return new Int32Array(data);\n    case \"uint32\":\n        return new Uint32Array(data);\n    //case \"int64\":\n    //    return new Int64Array(data);\n    //case \"uint64\":\n    //    return new Uint64Array(data);\n    case \"float\":\n        return new Float32Array(data);\n    case \"double\":\n        return new Float64Array(data);\n    default:\n        throw new Error(\"Cannot cast to NRRD type: \" + type);\n    }\n}\n\nfunction serializeToBuffer(data, type, endian) {\n    var i, endianFlag, view, nativeSize = getNRRDTypeSize(type), buffer = new ArrayBuffer(data.length*nativeSize);\n    switch(endian) {\n    case 'big':\n        endianFlag = false;\n        break;\n    case 'little':\n        endianFlag = true;\n        break;\n    default:\n        console.warn(\"Unsupported endianness in NRRD file: \" + endian);\n        return undefined;\n    }\n    view = new DataView(buffer);\n    switch(type) {\n    case \"int8\": // Note that here we do not need to check the size of the buffer, as the DataView.get methods should throw an exception if we read beyond the buffer.\n        for(i=0; i<data.length; i++) {\n            view.setInt8(i, data[i], endianFlag);\n        }\n        return buffer;\n    case \"uint8\":\n        for(i=0; i<data.length; i++) {\n            view.setUint8(i, data[i], endianFlag);\n        }\n        return buffer;\n    case \"int16\":\n        for(i=0; i<data.length; i++) {\n            view.setInt16(i*2, data[i], endianFlag);\n        }\n        return buffer;\n    case \"uint16\":\n        for(i=0; i<data.length; i++) {\n            view.setUint16(i*2, data[i], endianFlag);\n        }\n        return buffer;\n    case \"int32\":\n        for(i=0; i<data.length; i++) {\n            view.setInt32(i*4, data[i], endianFlag);\n        }\n        return buffer;\n    case \"uint32\":\n        for(i=0; i<data.length; i++) {\n            view.setUint32(i*4, data[i], endianFlag);\n        }\n        return buffer;\n    //case \"int64\":\n    //    for(i=0; i<data.length; i++) {\n    //        view.setInt64(i*8, data[i], endianFlag);\n    //    }\n    //    return buffer;\n    //case \"uint64\":\n    //    for(i=0; i<data.length; i++) {\n    //        view.setUint64(i*8, data[i], endianFlag);\n    //    }\n    //    return buffer;\n    case \"float\":\n        for(i=0; i<data.length; i++) {\n            view.setFloat32(i*4, data[i], endianFlag);\n        }\n        return buffer;\n    case \"double\":\n        for(i=0; i<data.length; i++) {\n            view.setFloat64(i*8, data[i], endianFlag);\n        }\n        return buffer;\n    default:\n        console.warn(\"Cannot serialize NRRD type: \" + type + \".\");\n        return undefined;\n    }\n}\n\nfunction serializeToTextBuffer(data) {\n    var i, strs = new Array(data.length), str, buffer, arr;\n    for(i=0; i<data.length; i++) {\n        strs[i] = '' + data[i];\n    }\n    str = strs.join(\" \");\n    buffer = new ArrayBuffer(str.length);\n    arr = new Uint8Array(buffer);\n    for(i=0; i<arr.length; i++) {\n        arr[i] = str.charCodeAt(i);\n    }\n    return buffer;\n}\n","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate.js');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar msg = require('./zlib/messages');\nvar zstream = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nvar Deflate = function(options) {\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n};\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate alrorythm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate.js');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar c = require('./zlib/constants');\nvar msg = require('./zlib/messages');\nvar zstream = require('./zlib/zstream');\nvar gzheader = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nvar Inflate = function(options) {\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new gzheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n};\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q=0; q<256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i=0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i=0, len=buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len*2);\n\n  for (out=0, i=0; i<len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max-1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","module.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n =0; n < 256; n++) {\n    c = n;\n    for (var k =0; k < 8; k++) {\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc = crc ^ (-1);\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","'use strict';\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg   = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only (s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH-1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH-1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length-1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH-1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nvar Config = function (good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n};\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);\n  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  s.d_buf = s.lit_bufsize >> 1;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n/* =========================================================================\n * Copy the source state to the destination state\n */\n//function deflateCopy(dest, source) {\n//\n//}\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","'use strict';\n\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","'use strict';\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","'use strict';\n\n\nvar utils = require('../utils/common');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar inflate_fast = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction ZSWAP32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window,src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window,src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n    case HEAD:\n      if (state.wrap === 0) {\n        state.mode = TYPEDO;\n        break;\n      }\n      //=== NEEDBITS(16);\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = FLAGS;\n        break;\n      }\n      state.flags = 0;           /* expect zlib header */\n      if (state.head) {\n        state.head.done = false;\n      }\n      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n        strm.msg = 'incorrect header check';\n        state.mode = BAD;\n        break;\n      }\n      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n      if (state.wbits === 0) {\n        state.wbits = len;\n      }\n      else if (len > state.wbits) {\n        strm.msg = 'invalid window size';\n        state.mode = BAD;\n        break;\n      }\n      state.dmax = 1 << len;\n      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = hold & 0x200 ? DICTID : TYPE;\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      break;\n    case FLAGS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.flags = hold;\n      if ((state.flags & 0xff) !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      if (state.flags & 0xe000) {\n        strm.msg = 'unknown header flags set';\n        state.mode = BAD;\n        break;\n      }\n      if (state.head) {\n        state.head.text = ((hold >> 8) & 1);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = TIME;\n      /* falls through */\n    case TIME:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.time = hold;\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC4(state.check, hold)\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        hbuf[2] = (hold >>> 16) & 0xff;\n        hbuf[3] = (hold >>> 24) & 0xff;\n        state.check = crc32(state.check, hbuf, 4, 0);\n        //===\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = OS;\n      /* falls through */\n    case OS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.xflags = (hold & 0xff);\n        state.head.os = (hold >> 8);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = EXLEN;\n      /* falls through */\n    case EXLEN:\n      if (state.flags & 0x0400) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length = hold;\n        if (state.head) {\n          state.head.extra_len = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      else if (state.head) {\n        state.head.extra = null/*Z_NULL*/;\n      }\n      state.mode = EXTRA;\n      /* falls through */\n    case EXTRA:\n      if (state.flags & 0x0400) {\n        copy = state.length;\n        if (copy > have) { copy = have; }\n        if (copy) {\n          if (state.head) {\n            len = state.head.extra_len - state.length;\n            if (!state.head.extra) {\n              // Use untyped array for more conveniend processing later\n              state.head.extra = new Array(state.head.extra_len);\n            }\n            utils.arraySet(\n              state.head.extra,\n              input,\n              next,\n              // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len\n            );\n            //zmemcpy(state.head.extra + len, next,\n            //        len + copy > state.head.extra_max ?\n            //        state.head.extra_max - len : copy);\n          }\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          state.length -= copy;\n        }\n        if (state.length) { break inf_leave; }\n      }\n      state.length = 0;\n      state.mode = NAME;\n      /* falls through */\n    case NAME:\n      if (state.flags & 0x0800) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          // TODO: 2 or 1 bytes?\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.name_max*/)) {\n            state.head.name += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.name = null;\n      }\n      state.length = 0;\n      state.mode = COMMENT;\n      /* falls through */\n    case COMMENT:\n      if (state.flags & 0x1000) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.comm_max*/)) {\n            state.head.comment += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.comment = null;\n      }\n      state.mode = HCRC;\n      /* falls through */\n    case HCRC:\n      if (state.flags & 0x0200) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.check & 0xffff)) {\n          strm.msg = 'header crc mismatch';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      if (state.head) {\n        state.head.hcrc = ((state.flags >> 9) & 1);\n        state.head.done = true;\n      }\n      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      break;\n    case DICTID:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      strm.adler = state.check = ZSWAP32(hold);\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = DICT;\n      /* falls through */\n    case DICT:\n      if (state.havedict === 0) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        return Z_NEED_DICT;\n      }\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      /* falls through */\n    case TYPE:\n      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case TYPEDO:\n      if (state.last) {\n        //--- BYTEBITS() ---//\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        state.mode = CHECK;\n        break;\n      }\n      //=== NEEDBITS(3); */\n      while (bits < 3) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.last = (hold & 0x01)/*BITS(1)*/;\n      //--- DROPBITS(1) ---//\n      hold >>>= 1;\n      bits -= 1;\n      //---//\n\n      switch ((hold & 0x03)/*BITS(2)*/) {\n      case 0:                             /* stored block */\n        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = STORED;\n        break;\n      case 1:                             /* fixed block */\n        fixedtables(state);\n        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = LEN_;             /* decode codes */\n        if (flush === Z_TREES) {\n          //--- DROPBITS(2) ---//\n          hold >>>= 2;\n          bits -= 2;\n          //---//\n          break inf_leave;\n        }\n        break;\n      case 2:                             /* dynamic block */\n        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = TABLE;\n        break;\n      case 3:\n        strm.msg = 'invalid block type';\n        state.mode = BAD;\n      }\n      //--- DROPBITS(2) ---//\n      hold >>>= 2;\n      bits -= 2;\n      //---//\n      break;\n    case STORED:\n      //--- BYTEBITS() ---// /* go to byte boundary */\n      hold >>>= bits & 7;\n      bits -= bits & 7;\n      //---//\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n        strm.msg = 'invalid stored block lengths';\n        state.mode = BAD;\n        break;\n      }\n      state.length = hold & 0xffff;\n      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n      //        state.length));\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = COPY_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case COPY_:\n      state.mode = COPY;\n      /* falls through */\n    case COPY:\n      copy = state.length;\n      if (copy) {\n        if (copy > have) { copy = have; }\n        if (copy > left) { copy = left; }\n        if (copy === 0) { break inf_leave; }\n        //--- zmemcpy(put, next, copy); ---\n        utils.arraySet(output, input, next, copy, put);\n        //---//\n        have -= copy;\n        next += copy;\n        left -= copy;\n        put += copy;\n        state.length -= copy;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       stored end\\n\"));\n      state.mode = TYPE;\n      break;\n    case TABLE:\n      //=== NEEDBITS(14); */\n      while (bits < 14) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n      if (state.nlen > 286 || state.ndist > 30) {\n        strm.msg = 'too many length or distance symbols';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n      state.have = 0;\n      state.mode = LENLENS;\n      /* falls through */\n    case LENLENS:\n      while (state.have < state.ncode) {\n        //=== NEEDBITS(3);\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n        //--- DROPBITS(3) ---//\n        hold >>>= 3;\n        bits -= 3;\n        //---//\n      }\n      while (state.have < 19) {\n        state.lens[order[state.have++]] = 0;\n      }\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      //state.next = state.codes;\n      //state.lencode = state.next;\n      // Switch to use dynamic table\n      state.lencode = state.lendyn;\n      state.lenbits = 7;\n\n      opts = {bits: state.lenbits};\n      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n      state.lenbits = opts.bits;\n\n      if (ret) {\n        strm.msg = 'invalid code lengths set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n      state.have = 0;\n      state.mode = CODELENS;\n      /* falls through */\n    case CODELENS:\n      while (state.have < state.nlen + state.ndist) {\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_val < 16) {\n          //--- DROPBITS(here.bits) ---//\n          hold >>>= here_bits;\n          bits -= here_bits;\n          //---//\n          state.lens[state.have++] = here_val;\n        }\n        else {\n          if (here_val === 16) {\n            //=== NEEDBITS(here.bits + 2);\n            n = here_bits + 2;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            if (state.have === 0) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            len = state.lens[state.have - 1];\n            copy = 3 + (hold & 0x03);//BITS(2);\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n          }\n          else if (here_val === 17) {\n            //=== NEEDBITS(here.bits + 3);\n            n = here_bits + 3;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 3 + (hold & 0x07);//BITS(3);\n            //--- DROPBITS(3) ---//\n            hold >>>= 3;\n            bits -= 3;\n            //---//\n          }\n          else {\n            //=== NEEDBITS(here.bits + 7);\n            n = here_bits + 7;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 11 + (hold & 0x7f);//BITS(7);\n            //--- DROPBITS(7) ---//\n            hold >>>= 7;\n            bits -= 7;\n            //---//\n          }\n          if (state.have + copy > state.nlen + state.ndist) {\n            strm.msg = 'invalid bit length repeat';\n            state.mode = BAD;\n            break;\n          }\n          while (copy--) {\n            state.lens[state.have++] = len;\n          }\n        }\n      }\n\n      /* handle error breaks in while */\n      if (state.mode === BAD) { break; }\n\n      /* check for end-of-block code (better have one) */\n      if (state.lens[256] === 0) {\n        strm.msg = 'invalid code -- missing end-of-block';\n        state.mode = BAD;\n        break;\n      }\n\n      /* build code tables -- note: do not change the lenbits or distbits\n         values here (9 and 6) without reading the comments in inftrees.h\n         concerning the ENOUGH constants, which depend on those values */\n      state.lenbits = 9;\n\n      opts = {bits: state.lenbits};\n      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.lenbits = opts.bits;\n      // state.lencode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid literal/lengths set';\n        state.mode = BAD;\n        break;\n      }\n\n      state.distbits = 6;\n      //state.distcode.copy(state.codes);\n      // Switch to use dynamic table\n      state.distcode = state.distdyn;\n      opts = {bits: state.distbits};\n      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.distbits = opts.bits;\n      // state.distcode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid distances set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, 'inflate:       codes ok\\n'));\n      state.mode = LEN_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case LEN_:\n      state.mode = LEN;\n      /* falls through */\n    case LEN:\n      if (have >= 6 && left >= 258) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        inflate_fast(strm, _out);\n        //--- LOAD() ---\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        //---\n\n        if (state.mode === TYPE) {\n          state.back = -1;\n        }\n        break;\n      }\n      state.back = 0;\n      for (;;) {\n        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if (here_bits <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if (here_op && (here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.lencode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      state.length = here_val;\n      if (here_op === 0) {\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        state.mode = LIT;\n        break;\n      }\n      if (here_op & 32) {\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.back = -1;\n        state.mode = TYPE;\n        break;\n      }\n      if (here_op & 64) {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break;\n      }\n      state.extra = here_op & 15;\n      state.mode = LENEXT;\n      /* falls through */\n    case LENEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n      state.was = state.length;\n      state.mode = DIST;\n      /* falls through */\n    case DIST:\n      for (;;) {\n        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if ((here_bits) <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if ((here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.distcode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      if (here_op & 64) {\n        strm.msg = 'invalid distance code';\n        state.mode = BAD;\n        break;\n      }\n      state.offset = here_val;\n      state.extra = (here_op) & 15;\n      state.mode = DISTEXT;\n      /* falls through */\n    case DISTEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n//#ifdef INFLATE_STRICT\n      if (state.offset > state.dmax) {\n        strm.msg = 'invalid distance too far back';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n      state.mode = MATCH;\n      /* falls through */\n    case MATCH:\n      if (left === 0) { break inf_leave; }\n      copy = _out - left;\n      if (state.offset > copy) {         /* copy from window */\n        copy = state.offset - copy;\n        if (copy > state.whave) {\n          if (state.sane) {\n            strm.msg = 'invalid distance too far back';\n            state.mode = BAD;\n            break;\n          }\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n        }\n        if (copy > state.wnext) {\n          copy -= state.wnext;\n          from = state.wsize - copy;\n        }\n        else {\n          from = state.wnext - copy;\n        }\n        if (copy > state.length) { copy = state.length; }\n        from_source = state.window;\n      }\n      else {                              /* copy from output */\n        from_source = output;\n        from = put - state.offset;\n        copy = state.length;\n      }\n      if (copy > left) { copy = left; }\n      left -= copy;\n      state.length -= copy;\n      do {\n        output[put++] = from_source[from++];\n      } while (--copy);\n      if (state.length === 0) { state.mode = LEN; }\n      break;\n    case LIT:\n      if (left === 0) { break inf_leave; }\n      output[put++] = state.length;\n      left--;\n      state.mode = LEN;\n      break;\n    case CHECK:\n      if (state.wrap) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          // Use '|' insdead of '+' to make sure that result is signed\n          hold |= input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        _out -= left;\n        strm.total_out += _out;\n        state.total += _out;\n        if (_out) {\n          strm.adler = state.check =\n              /*UPDATE(state.check, put - _out, _out);*/\n              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n        }\n        _out = left;\n        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too\n        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {\n          strm.msg = 'incorrect data check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n      }\n      state.mode = LENGTH;\n      /* falls through */\n    case LENGTH:\n      if (state.wrap && state.flags) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.total & 0xffffffff)) {\n          strm.msg = 'incorrect length check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n      }\n      state.mode = DONE;\n      /* falls through */\n    case DONE:\n      ret = Z_STREAM_END;\n      break inf_leave;\n    case BAD:\n      ret = Z_DATA_ERROR;\n      break inf_leave;\n    case MEM:\n      return Z_MEM_ERROR;\n    case SYNC:\n      /* falls through */\n    default:\n      return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n","'use strict';\n\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  var i=0;\n  /* process all codes and make table entries */\n  for (;;) {\n    i++;\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n","'use strict';\n\nmodule.exports = {\n  '2':    'need dictionary',     /* Z_NEED_DICT       2  */\n  '1':    'stream end',          /* Z_STREAM_END      1  */\n  '0':    '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","'use strict';\n\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES+2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nvar StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n};\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nvar TreeDesc = function(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n};\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short (s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n*2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n-base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length-1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m*2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;\n        tree[m*2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits-1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n*2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES-1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1<<extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length-1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0 ; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1<<extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n*2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n*2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES+1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n*2 + 1]/*.Len*/ = 5;\n    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n*2;\n  var _m2 = m*2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code+LITERALS+1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n*2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node*2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6*2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count-3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count-3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count-11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3*(max_blindex+1) + 5+5+4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes-1,   5);\n  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES<<1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len+3+7) >>> 3;\n    static_lenb = (s.static_len+3+7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc*2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize-1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","'use strict';\n\n// MODULES //\n\nvar isString = require( 'validate.io-string-primitive' );\nvar isNonNegativeInteger = require( 'validate.io-nonnegative-integer' );\nvar ceil = require( 'math-ceil' );\nvar repeat = require( 'utils-repeat-string' );\n\n\n// CONSTANTS //\n\nvar MAX_SAFE_INTEGER = 9007199254740991; // 2**53 - 1\n\n\n// LEFT PAD //\n\n/**\n* FUNCTION: lpad( str, len[, pad] )\n*\tLeft pads a string such that the padded string has a length of at least `len`.\n*\n* @param {String} str - string to pad\n* @param {Number} len - minimum string length\n* @param {String} [pad=' '] - string used to pad\n* @returns {String} padded string\n*/\nfunction lpad( str, len, pad ) {\n\tvar n;\n\tvar p;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid input argument. First argument must be a string. Value: `' + str + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `' + len + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tp = pad;\n\t\tif ( !isString( p ) ) {\n\t\t\tthrow new TypeError( 'invalid input argument. Third argument must be a string. Value: `' + p + '`.' );\n\t\t}\n\t\tif ( p.length === 0 ) {\n\t\t\tthrow new RangeError( 'invalid input argument. Pad string must not be an empty string.' );\n\t\t}\n\t} else {\n\t\tp = ' ';\n\t}\n\tif ( len > MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( 'invalid input argument. Output string length exceeds maximum allowed string length.' );\n\t}\n\tn = ( len - str.length ) / p.length;\n\tif ( n <= 0 ) {\n\t\treturn str;\n\t}\n\tn = ceil( n );\n\treturn repeat( p, n ) + str;\n} // end FUNCTION lpad()\n\n\n// EXPORTS //\n\nmodule.exports = lpad;\n","'use strict';\n\n// MODULES //\n\nvar isString = require( 'validate.io-string-primitive' );\nvar isNonNegativeInteger = require( 'validate.io-nonnegative-integer' );\n\n\n// NOTES //\n\n/**\n* The algorithmic trick used in the implementation is to treat string concatenation the same as binary addition (i.e., any natural number (nonnegative integer) can be expressed as a sum of powers of two).\n*\n* For example,\n*\n*  n = 10 => 1010 => 2^3 + 2^0 + 2^1 + 2^0\n*\n* We can produce a 10-repeat string by \"adding\" the results of a 8-repeat string and a 2-repeat string.\n*\n* The implementation is then as follows:\n*  : Let `s` be the string to be repeated and `o` be an output string.\n*  0) Initialize an output string `o`.\n*  1) Check the least significant bit to determine if the current `s` string should be \"added\" to the output \"total\".\n*     - if the bit is a one, add\n*     - otherwise, move on\n*  2) Double the string `s` by adding `s` to `s`.\n*  3) Right-shift the bits of `n`.\n*  4) Check if we have shifted off all bits.\n*     - if yes, done.\n*     - otherwise, move on\n*  5) Repeat 1-4.\n*\n* The result is that, as the string is repeated, we continually check to see if the doubled string is one which we want to add to our \"total\".\n*\n* The algorithm runs in O(log_2(n)) compared to O(n).\n*/\n\n\n// CONSTANTS //\n\nvar MAX_SAFE_INTEGER = 9007199254740991; // 2**53 - 1\n\n\n// REPEAT //\n\n/**\n* FUNCTION: repeat( str, n )\n*\tRepeats a string a specified number of times and returns the concatenated result.\n*\n* @param {String} str - string to repeat\n* @param {Number} n - number of times to repeat the string\n* @returns {String}\n*/\nfunction repeat( str, n ) {\n\tvar rpt;\n\tvar cnt;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid input argument. First argument must be a string. Value: `' + str + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `' + n + '`.' );\n\t}\n\tif ( str.length === 0 || n === 0 ) {\n\t\treturn '';\n\t}\n\t// Check that output string will not exceed the maximum string length:\n\tif ( str.length * n > MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( 'invalid input argument. Output string length exceeds maximum allowed string length.' );\n\t}\n\trpt = '';\n\tcnt = n;\n\tfor( ; ; ) {\n\t\t// If the count is odd, append the current concatenated string:\n\t\tif ( (cnt&1) === 1 ) {\n\t\t\trpt += str;\n\t\t}\n\t\t// Right-shift the bits:\n\t\tcnt >>>= 1;\n\t\tif ( cnt === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\t// Double the string:\n\t\tstr += str;\n\t}\n\treturn rpt;\n} // end FUNCTION repeat()\n\n\n// EXPORTS //\n\nmodule.exports = repeat;\n","'use strict';\n\n// MODULES //\n\nvar isString = require( 'validate.io-string-primitive' );\nvar isNonNegativeInteger = require( 'validate.io-nonnegative-integer' );\nvar ceil = require( 'math-ceil' );\nvar repeat = require( 'utils-repeat-string' );\n\n\n// CONSTANTS //\n\nvar MAX_SAFE_INTEGER = 9007199254740991; // 2**53 - 1\n\n\n// RIGHT PAD //\n\n/**\n* FUNCTION: rpad( str, len[, pad] )\n*\tRight pads a string such that the padded string has a length of at least `len`.\n*\n* @param {String} str - string to pad\n* @param {Number} len - minimum string length\n* @param {String} [pad=' '] - string used to pad\n* @returns {String} padded string\n*/\nfunction rpad( str, len, pad ) {\n\tvar n;\n\tvar p;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( 'invalid input argument. First argument must be a string. Value: `' + str + '`.' );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must be a nonnegative integer. Value: `' + len + '`.' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tp = pad;\n\t\tif ( !isString( p ) ) {\n\t\t\tthrow new TypeError( 'invalid input argument. Third argument must be a string. Value: `' + p + '`.' );\n\t\t}\n\t\tif ( p.length === 0 ) {\n\t\t\tthrow new RangeError( 'invalid input argument. Pad string must not be an empty string.' );\n\t\t}\n\t} else {\n\t\tp = ' ';\n\t}\n\tif ( len > MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( 'invalid input argument. Output string length exceeds maximum allowed string length.' );\n\t}\n\tn = ( len - str.length ) / p.length;\n\tif ( n <= 0 ) {\n\t\treturn str;\n\t}\n\tn = ceil( n );\n\treturn str + repeat( p, n );\n} // end FUNCTION rpad()\n\n\n// EXPORTS //\n\nmodule.exports = rpad;\n","/**\n*\n*\tVALIDATE: integer\n*\n*\n*\tDESCRIPTION:\n*\t\t- Validates if a value is an integer.\n*\n*\n*\tNOTES:\n*\t\t[1]\n*\n*\n*\tTODO:\n*\t\t[1]\n*\n*\n*\tLICENSE:\n*\t\tMIT\n*\n*\tCopyright (c) 2014. Athan Reines.\n*\n*\n*\tAUTHOR:\n*\t\tAthan Reines. kgryte@gmail.com. 2014.\n*\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( 'validate.io-number' );\n\n\n// ISINTEGER //\n\n/**\n* FUNCTION: isInteger( value )\n*\tValidates if a value is an integer.\n*\n* @param {Number} value - value to be validated\n* @returns {Boolean} boolean indicating whether value is an integer\n*/\nfunction isInteger( value ) {\n\treturn isNumber( value ) && value%1 === 0;\n} // end FUNCTION isInteger()\n\n\n// EXPORTS //\n\nmodule.exports = isInteger;\n","/**\n*\n*\tVALIDATE: nonnegative-integer\n*\n*\n*\tDESCRIPTION:\n*\t\t- Validates if a value is a nonnegative integer.\n*\n*\n*\tNOTES:\n*\t\t[1]\n*\n*\n*\tTODO:\n*\t\t[1]\n*\n*\n*\tLICENSE:\n*\t\tMIT\n*\n*\tCopyright (c) 2015. Athan Reines.\n*\n*\n*\tAUTHOR:\n*\t\tAthan Reines. kgryte@gmail.com. 2015.\n*\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( 'validate.io-integer' );\n\n\n// IS NONNEGATIVE INTEGER //\n\n/**\n* FUNCTION: isNonNegativeInteger( value )\n*\tValidates if a value is a nonnegative integer.\n*\n* @param {*} value - value to be validated\n* @returns {Boolean} boolean indicating if a value is a nonnegative integer\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn isInteger( value ) && value >= 0;\n} // end FUNCTION isNonNegativeInteger()\n\n\n// EXPORTS //\n\nmodule.exports = isNonNegativeInteger;\n","/**\n*\n*\tVALIDATE: number\n*\n*\n*\tDESCRIPTION:\n*\t\t- Validates if a value is a number.\n*\n*\n*\tNOTES:\n*\t\t[1]\n*\n*\n*\tTODO:\n*\t\t[1]\n*\n*\n*\tLICENSE:\n*\t\tMIT\n*\n*\tCopyright (c) 2014. Athan Reines.\n*\n*\n*\tAUTHOR:\n*\t\tAthan Reines. kgryte@gmail.com. 2014.\n*\n*/\n\n'use strict';\n\n/**\n* FUNCTION: isNumber( value )\n*\tValidates if a value is a number.\n*\n* @param {*} value - value to be validated\n* @returns {Boolean} boolean indicating whether value is a number\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' || Object.prototype.toString.call( value ) === '[object Number]' ) && value.valueOf() === value.valueOf();\n} // end FUNCTION isNumber()\n\n\n// EXPORTS //\n\nmodule.exports = isNumber;\n","/**\n*\n*\tVALIDATE: string-primitive\n*\n*\n*\tDESCRIPTION:\n*\t\t- Validates if a value is a string primitive.\n*\n*\n*\tNOTES:\n*\t\t[1]\n*\n*\n*\tTODO:\n*\t\t[1]\n*\n*\n*\tLICENSE:\n*\t\tMIT\n*\n*\tCopyright (c) 2015. Athan Reines.\n*\n*\n*\tAUTHOR:\n*\t\tAthan Reines. kgryte@gmail.com. 2015.\n*\n*/\n\n'use strict';\n\n/**\n* FUNCTION: isString( value )\n*\tValidates if a value is a string primitive.\n*\n* @param {*} value - value to be validated\n* @returns {Boolean} boolean indicating if a value is a string primitive\n*/\nfunction isString( value ) {\n\treturn typeof value === 'string';\n} // end FUNCTION isString()\n\n\n// EXPORTS //\n\nmodule.exports = isString;\n","import Cameras    from './cameras/cameras';\nimport Controls   from './controls/controls';\nimport Core       from './core/core';\nimport Geometries from './geometries/geometries';\nimport Helpers    from './helpers/helpers';\nimport Loaders    from './loaders/loaders';\nimport Models     from './models/models';\nimport Parsers    from './parsers/parsers';\nimport Shaders    from './shaders/shaders';\nimport Widgets    from './widgets/widgets';\n\nexport default{\n  Cameras,\n  Controls,\n  Core,\n  Geometries,\n  Helpers,\n  Loaders,\n  Models,\n  Parsers,\n  Shaders,\n  Widgets\n};\n\nwindow.console.log('AMI - v0.0.6');\n","import Orthographic from './cameras.orthographic';\n\n/**\n * @module cameras\n */\nexport default {\n  Orthographic\n};","import Intersections from '../core/core.intersections';\nimport Validators    from '../core/core.validators';\n\n/** \n * Orthographic camera from THREE.JS with some extra convenience\n * functionalities.\n *\n * @example\n * //\n * //\n *\n * @module cameras/orthographic\n */\nexport default class CamerasOrthographic extends THREE.OrthographicCamera{\n  constructor(left, right, top, bottom, near, far) {\n    super(left, right, top, bottom, near, far);\n\n    this._front = null;\n    this._back = null;\n\n    this._xCosine = null;\n    this._yCosine = null;\n    this._zCosine = null;\n\n    this._controls = null;\n    this._box = null;\n    this._canvas = {\n      width: null,\n      height: null\n    }\n\n    this._fromFront = true;\n  }\n\n  /**\n   * Initialize orthographic camera variables\n   */\n  init(xCosine, yCosine, zCosine, controls, box, canvas){\n    //\n    if(!(Validators.vector3(xCosine) &&\n      Validators.vector3(yCosine) &&\n      Validators.vector3(zCosine) &&\n      Validators.box(box) &&\n      controls)){\n      window.console.log('Invalid input provided.');\n\n      return false;\n    }\n\n    this._xCosine = xCosine;\n    this._yCosine = yCosine;\n    this._zCosine = zCosine;\n    this._controls = controls;\n    this._box = box;\n    this._canvas = canvas;\n\n    let ray = {\n      position: this._box.center,\n      direction: this._zCosine\n    }\n\n    let intersections = Intersections.rayBox(ray, this._box);\n    this._front = intersections[0];\n    this._back = intersections[1];\n\n    // set default values\n    this.up.set(this._yCosine.x, this._yCosine.y, this._yCosine.z);\n    this._updateCanvas();\n    this._updatePositionAndTarget(this._front, this._back);\n    this._updateMatrices();\n  }\n\n  /**\n   * Invert rows in the current slice.\n   * Inverting rows in 2 steps:\n   *   * Flip the \"up\" vector\n   *   * Look at the slice from the other side \n   */\n  invertRows() {\n    // flip \"up\" vector\n    // we flip up first because invertColumns update projectio matrices\n    this.up.multiplyScalar(-1);\n    \n    this.invertColumns();\n  }\n\n  /**\n   * Invert rows in the current slice.\n   * Inverting rows in 1 step:\n   *   * Look at the slice from the other side \n   */\n  invertColumns() {\n    this.center();\n    // rotate 180 degrees around the up vector...\n    let oppositePosition = this._oppositePosition(this.position);\n\n    // update posistion and target\n    // clone is needed because this.position is overwritten in method\n    this._updatePositionAndTarget(oppositePosition, this.position.clone());\n    this._updateMatrices();\n    this._fromFront = !this._fromFront;\n  }\n\n  /**\n   * Center slice in the camera FOV.\n   * It also updates the controllers properly.\n   * We can center a camera from the front or from the back.\n   */\n  center(){\n    if (this._fromFront) {\n      this._updatePositionAndTarget(this._front, this._back);\n    } else {\n      this._updatePositionAndTarget(this._back, this._front);\n    }\n\n    this._updateMatrices();\n  }\n\n  /**\n   * Pi/2 rotation around the zCosine axis.\n   * Clock-wise rotation from the user point of view.\n   */\n  rotate() {\n    this.center();\n\n    // Pi/2 rotation if camera is positions at the front of the volume\n    // else -Pi/2 rotation\n    let clockwise = 1;\n    if(this.position.distanceTo(this._back) < this.position.distanceTo(this._front)){\n      clockwise = -1;\n    }\n\n    // Rotate the up vector around the \"zCosine\"\n    let rotation = new THREE.Matrix4().makeRotationAxis(\n      this._zCosine, \n      clockwise * Math.PI/2);\n    this.up.applyMatrix4(rotation);\n\n    this._updateMatrices();\n  }\n\n  // dimensions[0] // width\n  // dimensions[1] // height\n  // direction= 0 width, 1 height, 2 best\n  // factor\n  fitBox(direction = 0, factor=1.5) {\n    //\n    // if (!(dimensions && dimensions.length >= 2)) {\n    //   window.console.log('Invalid dimensions container.');\n    //   window.console.log(dimensions);\n\n    //   return false;\n    // }\n\n    //\n    let zoom = 1;\n\n    // update zoom\n    switch (direction){\n      case 0:\n        zoom = factor * this._computeZoom(this._canvas.width, this._xCosine);\n        break;\n      case 1:\n        zoom = factor * this._computeZoom(this._canvas.height, this._yCosine);\n        break;\n      case 2:\n        zoom = factor * (Math.min(\n          this._computeZoom(this._canvas.width, this._xCosine),\n          this._computeZoom(this._canvas.height, this._yCosine)\n        ));\n        break;\n      default:\n        break;\n    }\n\n    if(!zoom){\n      return false\n    }\n\n    this.zoom = zoom;\n\n    this.center();\n  }\n\n  _updateCanvas(){\n    var camFactor = 2;\n    this.left = -this._canvas.width / camFactor;\n    this.right = this._canvas.width / camFactor;\n    this.top = this._canvas.height / camFactor;\n    this.bottom = -this._canvas.height / camFactor;\n\n    this._updateMatrices();\n    this.controls.handleResize();\n  }\n\n  _oppositePosition(position){\n    let oppositePosition = position.clone();\n    // center world postion around box center\n    oppositePosition.sub(this._box.center);\n    // rotate\n    let rotation = new THREE.Matrix4().makeRotationAxis(\n      this.up, \n      Math.PI);\n    oppositePosition.applyMatrix4(rotation);\n    // translate back to world position\n    oppositePosition.add(this._box.center);\n    return oppositePosition;\n  }\n\n  _computeZoom(dimension, direction) {\n\n    if(!(dimension && dimension > 0)){\n      window.console.log('Invalid dimension provided.');\n      window.console.log(dimension);\n      return false;\n    }\n\n    // ray\n    let ray = {\n      position: this._box.center.clone(),\n      direction: direction\n    };\n\n    let intersections = Intersections.rayBox(ray, this._box);\n    if (intersections.length < 2) {\n      window.console.log('Can not adjust the camera ( < 2 intersections).');\n      window.console.log(ray);\n      window.console.log(this._box);\n      return false;\n    }\n\n    return dimension / intersections[0].distanceTo(intersections[1]);\n  }\n\n  _updatePositionAndTarget(position, target){\n      // position\n      this.position.set(position.x, position.y, position.z);\n\n      // targets\n      this.lookAt(target.x, target.y, target.z);\n      this._controls.target.set(target.x, target.y, target.z);\n  }\n\n  _updateMatrices() {\n    this._controls.update();\n    // THEN camera\n    this.updateProjectionMatrix();\n    this.updateMatrixWorld();\n  }\n\n  set xCosine(xCosine) {\n    this._xCosine = xCosine;\n  }\n\n  get xCosine() {\n    return this._xCosine;\n  }\n\n  set yCosine(yCosine) {\n    this._yCosine = yCosine;\n  }\n\n  get yCosine() {\n    return this._yCosine;\n  }\n\n  set zCosine(zCosine) {\n    this._zCosine = zCosine;\n  }\n\n  get zCosine() {\n    return this._zCosine;\n  }\n\n  set controls(controls) {\n    this._controls = controls;\n  }\n\n  get controls() {\n    return this._controls;\n  }\n\n  set box(box) {\n    this._box = box;\n  }\n\n  get box() {\n    return this._box;\n  }\n\n  set canvas(canvas){\n    this._canvas = canvas;\n    this._updateCanvas();\n  }\n\n  get canvas(){\n    return this._canvas;\n  }\n\n}\n","import Trackball      from './controls.trackball';\nimport TrackballOrtho from './controls.trackballortho';\n\nexport default {\n  Trackball,\n  TrackballOrtho\n};","/**\n * Original authors from THREEJS repo\n * @author Eberhard Graether / http://egraether.com/\n * @author Mark Lundin  / http://mark-lundin.com\n * @author Simone Manini / http://daron1337.github.io\n * @author Luca Antiga  / http://lantiga.github.io\n */\n\n export default class Trackball extends THREE.EventDispatcher {\n  constructor(object, domElement) {\n    super();\n    \n    var _this = this;\n    var STATE = {NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM: 4, TOUCH_PAN: 5, CUSTOM: 99};\n\n    this.object = object;\n    this.domElement = (domElement !== undefined) ? domElement : document;\n\n    // API\n\n    this.enabled = true;\n\n    this.screen = {left: 0, top: 0, width: 0, height: 0};\n\n    this.rotateSpeed = 1.0;\n    this.zoomSpeed = 1.2;\n    this.panSpeed = 0.3;\n\n    this.noRotate = false;\n    this.noZoom = false;\n    this.noPan = false;\n    this.noCustom = false;\n\n    this.forceState = -1;\n\n    this.staticMoving = false;\n    this.dynamicDampingFactor = 0.2;\n\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n\n    this.keys = [65 /*A*/, 83 /*S*/, 68 /*D*/];\n\n    // internals\n\n    this.target = new THREE.Vector3();\n\n    var EPS = 0.000001;\n\n    var lastPosition = new THREE.Vector3();\n\n    var _state = STATE.NONE,\n    _prevState = STATE.NONE,\n\n    _eye = new THREE.Vector3(),\n\n    _movePrev = new THREE.Vector2(),\n    _moveCurr = new THREE.Vector2(),\n\n    _lastAxis = new THREE.Vector3(),\n    _lastAngle = 0,\n\n    _zoomStart = new THREE.Vector2(),\n    _zoomEnd = new THREE.Vector2(),\n\n    _touchZoomDistanceStart = 0,\n    _touchZoomDistanceEnd = 0,\n\n    _panStart = new THREE.Vector2(),\n    _panEnd = new THREE.Vector2(),\n\n    _customStart = new THREE.Vector2(),\n    _customEnd = new THREE.Vector2();\n\n    // for reset\n\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.up0 = this.object.up.clone();\n\n    // events\n\n    var changeEvent = {type: 'change'};\n    var startEvent = {type: 'start'};\n    var endEvent = {type: 'end'};\n\n    // methods\n\n    this.handleResize = function() {\n\n      if (this.domElement === document) {\n\n        this.screen.left = 0;\n        this.screen.top = 0;\n        this.screen.width = window.innerWidth;\n        this.screen.height = window.innerHeight;\n\n      } else {\n\n        var box = this.domElement.getBoundingClientRect();\n        // adjustments come from similar code in the jquery offset() function\n        var d = this.domElement.ownerDocument.documentElement;\n        this.screen.left = box.left + window.pageXOffset - d.clientLeft;\n        this.screen.top = box.top + window.pageYOffset - d.clientTop;\n        this.screen.width = box.width;\n        this.screen.height = box.height;\n\n      }\n\n    };\n\n    this.handleEvent = function(event) {\n\n      if (typeof this[ event.type ] == 'function') {\n\n        this[ event.type ](event);\n\n      }\n\n    };\n\n    var getMouseOnScreen = (function() {\n\n      var vector = new THREE.Vector2();\n\n      return function(pageX, pageY) {\n\n        vector.set(\n            (pageX - _this.screen.left) / _this.screen.width,\n            (pageY - _this.screen.top) / _this.screen.height\n        );\n\n        return vector;\n\n      };\n\n    }());\n\n    var getMouseOnCircle = (function() {\n\n      var vector = new THREE.Vector2();\n\n      return function(pageX, pageY) {\n\n        vector.set(\n            ((pageX - _this.screen.width * 0.5 - _this.screen.left) / (_this.screen.width * 0.5)),\n            ((_this.screen.height + 2 * (_this.screen.top - pageY)) / _this.screen.width) // screen.width intentional\n        );\n\n        return vector;\n      };\n\n    }());\n\n    this.rotateCamera = (function() {\n\n      var axis = new THREE.Vector3(),\n          quaternion = new THREE.Quaternion(),\n          eyeDirection = new THREE.Vector3(),\n          objectUpDirection = new THREE.Vector3(),\n          objectSidewaysDirection = new THREE.Vector3(),\n          moveDirection = new THREE.Vector3(),\n          angle;\n\n      return function() {\n\n        moveDirection.set(_moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0);\n        angle = moveDirection.length();\n\n        if (angle) {\n\n          _eye.copy(_this.object.position).sub(_this.target);\n\n          eyeDirection.copy(_eye).normalize();\n          objectUpDirection.copy(_this.object.up).normalize();\n          objectSidewaysDirection.crossVectors(objectUpDirection, eyeDirection).normalize();\n\n          objectUpDirection.setLength(_moveCurr.y - _movePrev.y);\n          objectSidewaysDirection.setLength(_moveCurr.x - _movePrev.x);\n\n          moveDirection.copy(objectUpDirection.add(objectSidewaysDirection));\n\n          axis.crossVectors(moveDirection, _eye).normalize();\n\n          angle *= _this.rotateSpeed;\n          quaternion.setFromAxisAngle(axis, angle);\n\n          _eye.applyQuaternion(quaternion);\n          _this.object.up.applyQuaternion(quaternion);\n\n          _lastAxis.copy(axis);\n          _lastAngle = angle;\n\n        } else if (!_this.staticMoving && _lastAngle) {\n\n          _lastAngle *= Math.sqrt(1.0 - _this.dynamicDampingFactor);\n          _eye.copy(_this.object.position).sub(_this.target);\n          quaternion.setFromAxisAngle(_lastAxis, _lastAngle);\n          _eye.applyQuaternion(quaternion);\n          _this.object.up.applyQuaternion(quaternion);\n\n        }\n\n        _movePrev.copy(_moveCurr);\n\n      };\n\n    }());\n\n    this.zoomCamera = function() {\n\n      var factor;\n\n      if (_state === STATE.TOUCH_ZOOM) {\n\n        factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;\n        _touchZoomDistanceStart = _touchZoomDistanceEnd;\n        _eye.multiplyScalar(factor);\n\n      } else {\n\n        factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;\n\n        if (factor !== 1.0 && factor > 0.0) {\n\n          _eye.multiplyScalar(factor);\n\n          if (_this.staticMoving) {\n\n            _zoomStart.copy(_zoomEnd);\n\n          } else {\n\n            _zoomStart.y += (_zoomEnd.y - _zoomStart.y) * this.dynamicDampingFactor;\n\n          }\n\n        }\n\n      }\n\n    };\n\n    this.panCamera = (function() {\n\n      var mouseChange = new THREE.Vector2(),\n          objectUp = new THREE.Vector3(),\n          pan = new THREE.Vector3();\n\n      return function() {\n\n        mouseChange.copy(_panEnd).sub(_panStart);\n\n        if (mouseChange.lengthSq()) {\n\n          mouseChange.multiplyScalar(_eye.length() * _this.panSpeed);\n\n          pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);\n          pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));\n\n          _this.object.position.add(pan);\n          _this.target.add(pan);\n\n          if (_this.staticMoving) {\n\n            _panStart.copy(_panEnd);\n\n          } else {\n\n            _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));\n\n          }\n\n        }\n      };\n\n    }());\n\n    this.checkDistances = function() {\n\n      if (!_this.noZoom || !_this.noPan) {\n\n        if (_eye.lengthSq() > _this.maxDistance * _this.maxDistance) {\n\n          _this.object.position.addVectors(_this.target, _eye.setLength(_this.maxDistance));\n\n        }\n\n        if (_eye.lengthSq() < _this.minDistance * _this.minDistance) {\n\n          _this.object.position.addVectors(_this.target, _eye.setLength(_this.minDistance));\n\n        }\n\n      }\n\n    };\n\n    this.update = function() {\n\n      _eye.subVectors(_this.object.position, _this.target);\n\n      if (!_this.noRotate) {\n\n        _this.rotateCamera();\n\n      }\n\n      if (!_this.noZoom) {\n\n        _this.zoomCamera();\n\n      }\n\n      if (!_this.noPan) {\n\n        _this.panCamera();\n\n      }\n\n      if (!_this.noCustom) {\n\n        _this.custom(_customStart, _customEnd);\n\n      }\n\n      _this.object.position.addVectors(_this.target, _eye);\n\n      _this.checkDistances();\n\n      _this.object.lookAt(_this.target);\n\n      if (lastPosition.distanceToSquared(_this.object.position) > EPS) {\n\n        _this.dispatchEvent(changeEvent);\n\n        lastPosition.copy(_this.object.position);\n\n      }\n\n    };\n\n    this.reset = function() {\n\n      _state = STATE.NONE;\n      _prevState = STATE.NONE;\n\n      _this.target.copy(_this.target0);\n      _this.object.position.copy(_this.position0);\n      _this.object.up.copy(_this.up0);\n\n      _eye.subVectors(_this.object.position, _this.target);\n\n      _this.object.lookAt(_this.target);\n\n      _this.dispatchEvent(changeEvent);\n\n      lastPosition.copy(_this.object.position);\n\n    };\n\n    this.setState = function(targetState) {\n\n      _this.forceState = targetState;\n      _prevState = targetState;\n      _state = targetState;\n\n    };\n\n    this.custom = function(customStart, customEnd) {\n\n    };\n\n    // listeners\n\n    function keydown(event) {\n\n      if (_this.enabled === false) return;\n\n      window.removeEventListener('keydown', keydown);\n\n      _prevState = _state;\n\n      if (_state !== STATE.NONE) {\n\n        return;\n\n      } else if (event.keyCode === _this.keys[ STATE.ROTATE ] && !_this.noRotate) {\n\n        _state = STATE.ROTATE;\n\n      } else if (event.keyCode === _this.keys[ STATE.ZOOM ] && !_this.noZoom) {\n\n        _state = STATE.ZOOM;\n\n      } else if (event.keyCode === _this.keys[ STATE.PAN ] && !_this.noPan) {\n\n        _state = STATE.PAN;\n\n      }\n\n    }\n\n    function keyup(event) {\n\n      if (_this.enabled === false) return;\n\n      _state = _prevState;\n\n      window.addEventListener('keydown', keydown, false);\n\n    }\n\n    function mousedown(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (_state === STATE.NONE) {\n\n        _state = event.button;\n\n      }\n\n      if (_state === STATE.ROTATE && !_this.noRotate) {\n\n        _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\n        _movePrev.copy(_moveCurr);\n\n      } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\n        _zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n        _zoomEnd.copy(_zoomStart);\n\n      } else if (_state === STATE.PAN && !_this.noPan) {\n\n        _panStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n        _panEnd.copy(_panStart);\n\n      } else if (_state === STATE.CUSTOM && !_this.noCustom) {\n\n        _customStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n        _customEnd.copy(_panStart);\n\n      }\n\n      document.addEventListener('mousemove', mousemove, false);\n      document.addEventListener('mouseup', mouseup, false);\n\n      _this.dispatchEvent(startEvent);\n\n    }\n\n    function mousemove(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (_state === STATE.ROTATE && !_this.noRotate) {\n\n        _movePrev.copy(_moveCurr);\n        _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\n\n      } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\n        _zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n\n      } else if (_state === STATE.PAN && !_this.noPan) {\n\n        _panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n\n      } else if (_state === STATE.CUSTOM && !_this.noCustom) {\n\n        _customEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n\n      }\n\n    }\n\n    function mouseup(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (_this.forceState === -1) {\n        _state = STATE.NONE;\n      }\n\n      document.removeEventListener('mousemove', mousemove);\n      document.removeEventListener('mouseup', mouseup);\n      _this.dispatchEvent(endEvent);\n\n    }\n\n    function mousewheel(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      var delta = 0;\n\n      if (event.wheelDelta) { // WebKit / Opera / Explorer 9\n\n        delta = event.wheelDelta / 40;\n\n      } else if (event.detail) { // Firefox\n\n        delta = -event.detail / 3;\n\n      }\n\n      if (_state !== STATE.CUSTOM) {\n        _zoomStart.y += delta * 0.01;\n      } else if (_state === STATE.CUSTOM) {\n        _customStart.y += delta * 0.01;\n      }\n\n      _this.dispatchEvent(startEvent);\n      _this.dispatchEvent(endEvent);\n\n    }\n\n    function touchstart(event) {\n\n      if (_this.enabled === false) return;\n\n      if (_this.forceState === -1) {\n\n        switch (event.touches.length) {\n\n          case 1:\n            _state = STATE.TOUCH_ROTATE;\n            _moveCurr.copy(getMouseOnCircle(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            _movePrev.copy(_moveCurr);\n            break;\n\n          case 2:\n            _state = STATE.TOUCH_ZOOM;\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n            _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n\n            var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n            var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n            _panStart.copy(getMouseOnScreen(x, y));\n            _panEnd.copy(_panStart);\n            break;\n\n          default:\n            _state = STATE.NONE;\n\n        }\n      } else {\n\n        //{ NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4, CUSTOM: 99 };\n        switch (_state) {\n\n          case 0:\n            // 1 or 2 fingers, smae behavior\n            _state = STATE.TOUCH_ROTATE;\n            _moveCurr.copy(getMouseOnCircle(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            _movePrev.copy(_moveCurr);\n            break;\n\n          case 1:\n          case 4:\n            if (event.touches.length >= 2) {\n              _state = STATE.TOUCH_ZOOM;\n              var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n              var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n              _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n            } else {\n              _state = STATE.ZOOM;\n              _zoomStart.copy(getMouseOnScreen(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n              _zoomEnd.copy(_zoomStart);\n            }\n            break;\n\n          case 2:\n          case 5:\n            if (event.touches.length >= 2) {\n              _state = STATE.TOUCH_PAN;\n              var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n              var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n              _panStart.copy(getMouseOnScreen(x, y));\n              _panEnd.copy(_panStart);\n            } else {\n              _state = STATE.PAN;\n              _panStart.copy(getMouseOnScreen(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n              _panEnd.copy(_panStart);\n            }\n            break;\n\n          case 99:\n            _state = STATE.CUSTOM;\n            var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n            var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n            _customStart.copy(getMouseOnScreen(x, y));\n            _customEnd.copy(_customStart);\n            break;\n\n          default:\n            _state = STATE.NONE;\n\n        }\n      }\n\n      _this.dispatchEvent(startEvent);\n\n    }\n\n    function touchmove(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (_this.forceState === -1) {\n\n        switch (event.touches.length) {\n\n          case 1:\n            _movePrev.copy(_moveCurr);\n            _moveCurr.copy(getMouseOnCircle(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            break;\n\n          case 2:\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n            _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\n\n            var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n            var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n            _panEnd.copy(getMouseOnScreen(x, y));\n            break;\n\n          default:\n            _state = STATE.NONE;\n        }\n\n      } else {\n        //{ NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4, CUSTOM: 99 };\n        switch (_state) {\n\n          case 0:\n            _movePrev.copy(_moveCurr);\n            _moveCurr.copy(getMouseOnCircle(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            break;\n\n          case 1:\n            _zoomEnd.copy(getMouseOnScreen(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            break;\n\n          case 2:\n            _panEnd.copy(getMouseOnScreen(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            break;\n\n          case 4:\n            // 2 fingers!\n            // TOUCH ZOOM\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n            _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\n            break;\n\n          case 5:\n            // 2 fingers\n            // TOUCH_PAN\n            var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n            var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n            _panEnd.copy(getMouseOnScreen(x, y));\n            break;\n\n          case 99:\n            var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n            var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n            _customEnd.copy(getMouseOnScreen(x, y));\n            break;\n\n          default:\n            _state = STATE.NONE;\n\n        }\n      }\n\n    }\n\n    function touchend(event) {\n\n      if (_this.enabled === false) return;\n\n      if (_this.forceState === -1) {\n        switch (event.touches.length) {\n\n          case 1:\n            _movePrev.copy(_moveCurr);\n            _moveCurr.copy(getMouseOnCircle(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            break;\n\n          case 2:\n            _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;\n\n            var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n            var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n            _panEnd.copy(getMouseOnScreen(x, y));\n            _panStart.copy(_panEnd);\n            break;\n\n        }\n\n        _state = STATE.NONE;\n\n      } else {\n        switch (_state) {\n\n          case 0:\n            _movePrev.copy(_moveCurr);\n            _moveCurr.copy(getMouseOnCircle(event.touches[ 0 ].pageX, event.touches[ 0 ].pageY));\n            break;\n\n          case 1:\n          case 2:\n            break;\n\n          case 4:\n            // TOUCH ZOOM\n            _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;\n            _state = STATE.ZOOM;\n            break;\n\n          case 5:\n            // TOUCH ZOOM\n            if (event.touches.length >= 2) {\n              var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n              var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n              _panEnd.copy(getMouseOnScreen(x, y));\n              _panStart.copy(_panEnd);\n            }\n            _state = STATE.PAN;\n            break;\n\n          case 99:\n            var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n            var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n            _customEnd.copy(getMouseOnScreen(x, y));\n            _customStart.copy(_customEnd);\n            break;\n\n          default:\n            _state = STATE.NONE;\n\n        }\n      }\n\n      _this.dispatchEvent(endEvent);\n\n    }\n\n    this.domElement.addEventListener('contextmenu', function(event) { event.preventDefault(); }, false);\n\n    this.domElement.addEventListener('mousedown', mousedown, false);\n\n    this.domElement.addEventListener('mousewheel', mousewheel, false);\n    this.domElement.addEventListener('DOMMouseScroll', mousewheel, false); // firefox\n\n    this.domElement.addEventListener('touchstart', touchstart, false);\n    this.domElement.addEventListener('touchend', touchend, false);\n    this.domElement.addEventListener('touchmove', touchmove, false);\n\n    window.addEventListener('keydown', keydown, false);\n    window.addEventListener('keyup', keyup, false);\n\n    this.handleResize();\n\n    // force an update at start\n    this.update();\n\n  }\n}\n","/**\n * @author Eberhard Graether / http://egraether.com/\n * @author Mark Lundin  / http://mark-lundin.com\n * @author Patrick Fuller / http://patrick-fuller.com\n * @author Max Smolens / https://github.com/msmolens\n */\n\nexport default class Trackballortho extends THREE.EventDispatcher {\n  constructor(object, domElement) {\n\n    super();\n\n    var _this = this;\n    var STATE = {NONE: -1, ROTATE: 1, ZOOM: 2, PAN: 0, SCROLL: 4, TOUCH_ROTATE: 4, TOUCH_ZOOM_PAN: 5};\n\n    this.object = object;\n    this.domElement = (domElement !== undefined) ? domElement : document;\n\n    // API\n\n    this.enabled = true;\n\n    this.screen = {left: 0, top: 0, width: 0, height: 0};\n\n    this.radius = 0;\n\n    this.zoomSpeed = 1.2;\n\n    this.noZoom = false;\n    this.noPan = false;\n\n    this.staticMoving = false;\n    this.dynamicDampingFactor = 0.2;\n\n    this.keys = [65 /*A*/, 83 /*S*/, 68 /*D*/];\n\n    // internals\n\n    this.target = new THREE.Vector3();\n\n    var EPS = 0.000001;\n\n    var _changed = true;\n\n    var _state = STATE.NONE,\n    _prevState = STATE.NONE,\n\n    _eye = new THREE.Vector3(),\n\n    _zoomStart = new THREE.Vector2(),\n    _zoomEnd = new THREE.Vector2(),\n\n    _touchZoomDistanceStart = 0,\n    _touchZoomDistanceEnd = 0,\n\n    _panStart = new THREE.Vector2(),\n    _panEnd = new THREE.Vector2();\n\n    // window level fire after...\n\n    // for reset\n\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.up0 = this.object.up.clone();\n\n    this.left0 = this.object.left;\n    this.right0 = this.object.right;\n    this.top0 = this.object.top;\n    this.bottom0 = this.object.bottom;\n\n    // events\n\n    var changeEvent = {type: 'change'};\n    var startEvent = {type: 'start'};\n    var endEvent = {type: 'end'};\n\n    // methods\n\n    this.handleResize = function() {\n\n      if (this.domElement === document) {\n\n        this.screen.left = 0;\n        this.screen.top = 0;\n        this.screen.width = window.innerWidth;\n        this.screen.height = window.innerHeight;\n\n      } else {\n\n        var box = this.domElement.getBoundingClientRect();\n        // adjustments come from similar code in the jquery offset() function\n        var d = this.domElement.ownerDocument.documentElement;\n        this.screen.left = box.left + window.pageXOffset - d.clientLeft;\n        this.screen.top = box.top + window.pageYOffset - d.clientTop;\n        this.screen.width = box.width;\n        this.screen.height = box.height;\n\n      }\n\n      this.radius = 0.5 * Math.min(this.screen.width, this.screen.height);\n\n      this.left0 = this.object.left;\n      this.right0 = this.object.right;\n      this.top0 = this.object.top;\n      this.bottom0 = this.object.bottom;\n\n    };\n\n    this.handleEvent = function(event) {\n\n      if (typeof this[ event.type ] == 'function') {\n\n        this[ event.type ](event);\n\n      }\n\n    };\n\n    var getMouseOnScreen = (function() {\n\n      var vector = new THREE.Vector2();\n\n      return function getMouseOnScreen(pageX, pageY) {\n\n        vector.set(\n          (pageX - _this.screen.left) / _this.screen.width,\n          (pageY - _this.screen.top) / _this.screen.height\n        );\n\n        return vector;\n\n      };\n\n    }());\n\n    this.zoomCamera = function() {\n\n      if (_state === STATE.TOUCH_ZOOM_PAN) {\n\n        var factor = _touchZoomDistanceEnd / _touchZoomDistanceStart;\n        _touchZoomDistanceStart = _touchZoomDistanceEnd;\n\n        _this.object.zoom *= factor;\n\n        _changed = true;\n\n      } else {\n\n        var factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;\n\n        if (Math.abs(factor - 1.0) > EPS && factor > 0.0) {\n\n          _this.object.zoom /= factor;\n\n          if (_this.staticMoving) {\n\n            _zoomStart.copy(_zoomEnd);\n\n          } else {\n\n            _zoomStart.y += (_zoomEnd.y - _zoomStart.y) * this.dynamicDampingFactor;\n\n          }\n\n          _changed = true;\n\n        }\n\n      }\n\n    };\n\n    this.panCamera = (function() {\n\n      var mouseChange = new THREE.Vector2(),\n        objectUp = new THREE.Vector3(),\n        pan = new THREE.Vector3();\n\n      return function panCamera() {\n\n        mouseChange.copy(_panEnd).sub(_panStart);\n\n        if (mouseChange.lengthSq()) {\n\n          // Scale movement to keep clicked/dragged position under cursor\n          var scale_x = (_this.object.right - _this.object.left) / _this.object.zoom;\n          var scale_y = (_this.object.top - _this.object.bottom) / _this.object.zoom;\n          mouseChange.x *= scale_x;\n          mouseChange.y *= scale_y;\n\n          pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);\n          pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));\n\n          _this.object.position.add(pan);\n          _this.target.add(pan);\n\n          if (_this.staticMoving) {\n\n            _panStart.copy(_panEnd);\n\n          } else {\n\n            _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));\n\n          }\n\n          _changed = true;\n\n        }\n\n      }\n\n    }());\n\n    this.update = function() {\n\n      _eye.subVectors(_this.object.position, _this.target);\n\n      if (!_this.noZoom) {\n\n        _this.zoomCamera();\n\n        if (_changed) {\n\n          _this.object.updateProjectionMatrix();\n\n        }\n\n      }\n\n      if (!_this.noPan) {\n\n        _this.panCamera();\n\n      }\n\n      _this.object.position.addVectors(_this.target, _eye);\n\n      _this.object.lookAt(_this.target);\n\n      if (_changed) {\n\n        _this.dispatchEvent(changeEvent);\n\n        _changed = false;\n\n      }\n\n    };\n\n    this.reset = function() {\n\n      _state = STATE.NONE;\n      _prevState = STATE.NONE;\n\n      _this.target.copy(_this.target0);\n      _this.object.position.copy(_this.position0);\n      _this.object.up.copy(_this.up0);\n\n      _eye.subVectors(_this.object.position, _this.target);\n\n      _this.object.left = _this.left0;\n      _this.object.right = _this.right0;\n      _this.object.top = _this.top0;\n      _this.object.bottom = _this.bottom0;\n\n      _this.object.lookAt(_this.target);\n\n      _this.dispatchEvent(changeEvent);\n\n      _changed = false;\n\n    };\n\n    // listeners\n\n    function keydown(event) {\n\n      if (_this.enabled === false) return;\n\n      window.removeEventListener('keydown', keydown);\n\n      _prevState = _state;\n\n      if (_state !== STATE.NONE) {\n\n        return;\n\n      } else if (event.keyCode === _this.keys[ STATE.ROTATE ] && !_this.noRotate) {\n\n        _state = STATE.ROTATE;\n\n      } else if (event.keyCode === _this.keys[ STATE.ZOOM ] && !_this.noZoom) {\n\n        _state = STATE.ZOOM;\n\n      } else if (event.keyCode === _this.keys[ STATE.PAN ] && !_this.noPan) {\n\n        _state = STATE.PAN;\n\n      }\n\n    }\n\n    function keyup(event) {\n\n      if (_this.enabled === false) return;\n\n      _state = _prevState;\n\n      window.addEventListener('keydown', keydown, false);\n\n    }\n\n    function mousedown(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (_state === STATE.NONE) {\n\n        _state = event.button;\n\n      }\n\n      if (_state === STATE.ROTATE && !_this.noRotate) {\n\n      } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\n        _zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n        _zoomEnd.copy(_zoomStart);\n\n      } else if (_state === STATE.PAN && !_this.noPan) {\n\n        _panStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n        _panEnd.copy(_panStart)\n\n      }\n\n      document.addEventListener('mousemove', mousemove, false);\n      document.addEventListener('mouseup', mouseup, false);\n\n      _this.dispatchEvent(startEvent);\n\n    }\n\n    function mousemove(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (_state === STATE.ROTATE && !_this.noRotate) {\n\n      } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\n        _zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n\n      } else if (_state === STATE.PAN && !_this.noPan) {\n\n        _panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n\n      }\n\n    }\n\n    function mouseup(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      _state = STATE.NONE;\n\n      document.removeEventListener('mousemove', mousemove);\n      document.removeEventListener('mouseup', mouseup);\n      _this.dispatchEvent(endEvent);\n\n    }\n\n    function mousewheel(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      var delta = 0;\n\n      if (event.wheelDelta) {\n\n        // WebKit / Opera / Explorer 9\n\n        delta = event.wheelDelta / 40;\n\n      } else if (event.detail) {\n\n        // Firefox\n\n        delta = -event.detail / 3;\n\n      }\n\n      // FIRE SCROLL EVENT\n\n      _this.dispatchEvent({\n        type: 'OnScroll',\n        delta: delta\n      });\n\n      //_zoomStart.y += delta * 0.01;\n      _this.dispatchEvent(startEvent);\n      _this.dispatchEvent(endEvent);\n\n    }\n\n    function touchstart(event) {\n\n      if (_this.enabled === false) return;\n\n      switch (event.touches.length) {\n\n        case 1:\n          _state = STATE.TOUCH_ROTATE;\n        \n          break;\n\n        case 2:\n          _state = STATE.TOUCH_ZOOM_PAN;\n          var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n          var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n          _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n\n          var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n          var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n          _panStart.copy(getMouseOnScreen(x, y));\n          _panEnd.copy(_panStart);\n          break;\n\n        default:\n          _state = STATE.NONE;\n\n      }\n      _this.dispatchEvent(startEvent);\n\n    }\n\n    function touchmove(event) {\n\n      if (_this.enabled === false) return;\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      switch (event.touches.length) {\n\n        case 1:\n        \n          break;\n\n        case 2:\n          var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n          var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n          _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\n\n          var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n          var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n          _panEnd.copy(getMouseOnScreen(x, y));\n          break;\n\n        default:\n          _state = STATE.NONE;\n\n      }\n\n    }\n\n    function touchend(event) {\n\n      if (_this.enabled === false) return;\n\n      switch (event.touches.length) {\n\n        case 1:\n        \n          break;\n\n        case 2:\n          _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;\n\n          var x = (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2;\n          var y = (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2;\n          _panEnd.copy(getMouseOnScreen(x, y));\n          _panStart.copy(_panEnd);\n          break;\n\n      }\n\n      _state = STATE.NONE;\n      _this.dispatchEvent(endEvent);\n\n    }\n\n    function contextmenu(event) {\n\n      event.preventDefault();\n\n    }\n\n    this.dispose = function() {\n\n      this.domElement.removeEventListener('contextmenu', contextmenu, false);\n      this.domElement.removeEventListener('mousedown', mousedown, false);\n      this.domElement.removeEventListener('mousewheel', mousewheel, false);\n      this.domElement.removeEventListener('MozMousePixelScroll', mousewheel, false); // firefox\n\n      this.domElement.removeEventListener('touchstart', touchstart, false);\n      this.domElement.removeEventListener('touchend', touchend, false);\n      this.domElement.removeEventListener('touchmove', touchmove, false);\n\n      document.removeEventListener('mousemove', mousemove, false);\n      document.removeEventListener('mouseup', mouseup, false);\n\n      window.removeEventListener('keydown', keydown, false);\n      window.removeEventListener('keyup', keyup, false);\n\n    };\n\n    this.domElement.addEventListener('contextmenu', contextmenu, false);\n    this.domElement.addEventListener('mousedown', mousedown, false);\n    this.domElement.addEventListener('mousewheel', mousewheel, false);\n    this.domElement.addEventListener('MozMousePixelScroll', mousewheel, false); // firefox\n\n    this.domElement.addEventListener('touchstart', touchstart, false);\n    this.domElement.addEventListener('touchend', touchend, false);\n    this.domElement.addEventListener('touchmove', touchmove, false);\n\n    window.addEventListener('keydown', keydown, false);\n    window.addEventListener('keyup', keyup, false);\n\n    this.handleResize();\n\n    // force an update at start\n    this.update();\n\n  }\n}\n\n","import Utils      from './core.utils';\nimport Validators from './core.validators';\n\n/** \n * Compute/test intersection between different objects.\n *\n * @module core/intersections\n */\n\nexport default class Intersections {\n\n/**\n * Compute intersection between oriented bounding box and a plane.\n *\n * Returns intersection in plane's space.\n *\n * Should return at least 3 intersections. If not, the plane and the box do not\n * intersect.\n *\n * @param {Object} aabb - Axe Aligned Bounding Box representation.\n * @param {THREE.Vector3} aabb.halfDimensions - Half dimensions of the box.\n * @param {THREE.Vector3} aabb.center - Center of the box.\n * @param {THREE.Matrix4} aabb.toAABB - Transform to go from plane space to box space.\n * @param {Object} plane - Plane representation\n * @param {THREE.Vector3} plane.position - position of normal which describes the plane.\n * @param {THREE.Vector3} plane.direction - Direction of normal which describes the plane.\n *\n * @returns {Array<THREE.Vector3>} List of all intersections in plane's space.\n * @returns {boolean} false is invalid input provided.\n *\n * @example\n * //Returns array with intersection N intersections\n * let aabb = {\n *   center: new THREE.Vector3(150, 150, 150),\n *   halfDimensions: new THREE.Vector3(50, 60, 70),\n *   toAABB: new THREE.Matrix4()\n * }\n * let plane = {\n *   position: new THREE.Vector3(110, 120, 130),\n *   direction: new THREE.Vector3(1, 0, 0)\n * }\n *\n * let intersections = CoreIntersections.aabbPlane(aabb, plane);\n * // intersections ==\n * //[ { x : 110, y : 90,  z : 80 },\n * //  { x : 110, y : 210, z : 220 },\n * //  { x : 110, y : 210, z : 80 },\n * //  { x : 110, y : 90,  z : 220 } ]\n *\n * //Returns empty array with 0 intersections\n * let aabb = {\n * \n * }\n * let plane = {\n *  \n * }\n *\n * let intersections = VJS.Core.Validators.matrix4(new THREE.Vector3());\n *\n * //Returns false if invalid input?\n *\n */\n  static aabbPlane(aabb, plane) {\n    //\n    // obb = { halfDimensions, orientation, center, toAABB }\n    // plane = { position, direction }\n    //\n    //\n    // LOGIC:\n    //\n    // Test intersection of each edge of the Oriented Bounding Box with the Plane\n    // \n    // ALL EDGES \n    //\n    //      .+-------+  \n    //    .' |     .'|  \n    //   +---+---+'  |  \n    //   |   |   |   |  \n    //   |  ,+---+---+  \n    //   |.'     | .'   \n    //   +-------+'     \n    //\n    // SPACE ORIENTATION\n    //\n    //       +\n    //     j |\n    //       |\n    //       |   i \n    //   k  ,+-------+  \n    //    .'\n    //   +\n    //\n    //\n    // 1- Move Plane position and orientation in IJK space\n    // 2- Test Edges/ IJK Plane intersections\n    // 3- Return intersection Edge/ IJK Plane if it touches the Oriented BBox\n\n    let intersections = [];\n\n    if(!(this.validateAabb(aabb) &&\n       this.validatePlane(plane))){\n      window.console.log('Invalid aabb or plane provided.');\n      return false;\n    }\n\n    // invert space matrix\n    let fromAABB = new THREE.Matrix4();\n    fromAABB.getInverse(aabb.toAABB);\n\n    let t1 = plane.direction.clone().applyMatrix4(aabb.toAABB);\n    let t0 = new THREE.Vector3(0, 0, 0).applyMatrix4(aabb.toAABB);\n\n    let planeAABB = this.posdir(\n      plane.position.clone().applyMatrix4(aabb.toAABB),\n      new THREE.Vector3(t1.x - t0.x, t1.y - t0.y, t1.z - t0.z).normalize()\n    );\n\n    let bbox = Utils.bbox(aabb.center, aabb.halfDimensions);\n\n    let orientation = new THREE.Vector3(\n      new THREE.Vector3(1, 0, 0),\n      new THREE.Vector3(0, 1, 0),\n      new THREE.Vector3(0, 0, 1));\n\n    // 12 edges (i.e. ray)/plane intersection tests\n    // RAYS STARTING FROM THE FIRST CORNER (0, 0, 0)\n    //\n    //       +\n    //       |\n    //       |\n    //       | \n    //      ,+---+---+\n    //    .'   \n    //   +   \n\n    let ray = this.posdir(\n      new THREE.Vector3(aabb.center.x - aabb.halfDimensions.x, aabb.center.y - aabb.halfDimensions.y, aabb.center.z - aabb.halfDimensions.z),\n      orientation.x\n    );\n    this.rayPlaneInBBox(ray, planeAABB, bbox, intersections);\n\n    ray.direction = orientation.y;\n    this.rayPlaneInBBox(ray, planeAABB, bbox, intersections);\n\n    ray.direction = orientation.z;\n    this.rayPlaneInBBox(ray, planeAABB, bbox, intersections);\n\n    // RAYS STARTING FROM THE LAST CORNER\n    //\n    //               +\n    //             .'\n    //   +-------+'\n    //           |\n    //           |\n    //           |\n    //           +\n    //\n\n    let ray2 = this.posdir(\n      new THREE.Vector3(aabb.center.x + aabb.halfDimensions.x, aabb.center.y + aabb.halfDimensions.y, aabb.center.z + aabb.halfDimensions.z),\n      orientation.x\n    );\n    this.rayPlaneInBBox(ray2, planeAABB, bbox, intersections);\n\n    ray2.direction = orientation.y;\n    this.rayPlaneInBBox(ray2, planeAABB, bbox, intersections);\n\n    ray2.direction = orientation.z;\n    this.rayPlaneInBBox(ray2, planeAABB, bbox, intersections);\n\n    // RAYS STARTING FROM THE SECOND CORNER\n    //\n    //               +\n    //               |\n    //               |\n    //               |\n    //               +\n    //             .'\n    //           +'\n\n    let ray3 = this.posdir(\n      new THREE.Vector3(aabb.center.x + aabb.halfDimensions.x, aabb.center.y - aabb.halfDimensions.y, aabb.center.z - aabb.halfDimensions.z),\n      orientation.y\n    );\n    this.rayPlaneInBBox(ray3, planeAABB, bbox, intersections);\n\n    ray3.direction = orientation.z;\n    this.rayPlaneInBBox(ray3, planeAABB, bbox, intersections);\n\n    // RAYS STARTING FROM THE THIRD CORNER\n    //\n    //      .+-------+  \n    //    .'\n    //   +\n    //   \n    //   \n    //   \n    //   \n\n    let ray4 = this.posdir(\n      new THREE.Vector3(aabb.center.x - aabb.halfDimensions.x, aabb.center.y + aabb.halfDimensions.y, aabb.center.z - aabb.halfDimensions.z),\n      orientation.x\n    );\n    this.rayPlaneInBBox(ray4, planeAABB, bbox, intersections);\n\n    ray4.direction = orientation.z;\n    this.rayPlaneInBBox(ray4, planeAABB, bbox, intersections);\n\n    // RAYS STARTING FROM THE FOURTH CORNER\n    //\n    //   \n    //   \n    //   +\n    //   |\n    //   |  \n    //   |\n    //   +-------+\n\n    let ray5 = this.posdir(\n      new THREE.Vector3(aabb.center.x - aabb.halfDimensions.x, aabb.center.y - aabb.halfDimensions.y, aabb.center.z + aabb.halfDimensions.z),\n      orientation.x\n    );\n    this.rayPlaneInBBox(ray5, planeAABB, bbox, intersections);\n\n    ray5.direction = orientation.y;\n    this.rayPlaneInBBox(ray5, planeAABB, bbox, intersections);\n\n    // @todo make sure objects are unique...\n\n    // back to original space\n    intersections.map(\n      function(element) {\n        return element.applyMatrix4(fromAABB);\n      }\n    );\n\n    return intersections;\n  }\n\n/**\n * Compute intersection between a ray and a plane.\n *\n * @memberOf this\n * @public\n *\n * @param {Object} ray - Ray representation.\n * @param {THREE.Vector3} ray.position - position of normal which describes the ray.\n * @param {THREE.Vector3} ray.direction - Direction of normal which describes the ray.\n * @param {Object} plane - Plane representation\n * @param {THREE.Vector3} plane.position - position of normal which describes the plane.\n * @param {THREE.Vector3} plane.direction - Direction of normal which describes the plane.\n *\n * @returns {THREE.Vector3|null} Intersection between ray and plane or null.\n */\n  static rayPlane(ray, plane) {\n  // ray: {position, direction}\n  // plane: {position, direction}\n\n  if (ray.direction.dot(plane.direction) !== 0) {\n    //\n    // not parallel, move forward\n    //\n    // LOGIC:\n    //\n    // Ray equation: P = P0 + tV\n    // P = <Px, Py, Pz>\n    // P0 = <ray.position.x, ray.position.y, ray.position.z>\n    // V = <ray.direction.x, ray.direction.y, ray.direction.z>\n    //\n    // Therefore:\n    // Px = ray.position.x + t*ray.direction.x\n    // Py = ray.position.y + t*ray.direction.y\n    // Pz = ray.position.z + t*ray.direction.z\n    //\n    //\n    //\n    // Plane equation: ax + by + cz + d = 0\n    // a = plane.direction.x\n    // b = plane.direction.y\n    // c = plane.direction.z\n    // d = -( plane.direction.x*plane.position.x +\n    //        plane.direction.y*plane.position.y +\n    //        plane.direction.z*plane.position.z )\n    //\n    //\n    // 1- in the plane equation, we replace x, y and z by Px, Py and Pz\n    // 2- find t\n    // 3- replace t in Px, Py and Pz to get the coordinate of the intersection\n    //\n    let t = (plane.direction.x * (plane.position.x - ray.position.x) + plane.direction.y * (plane.position.y - ray.position.y) + plane.direction.z * (plane.position.z - ray.position.z)) /\n        (plane.direction.x * ray.direction.x + plane.direction.y * ray.direction.y + plane.direction.z * ray.direction.z);\n\n    let intersection = new THREE.Vector3(\n        ray.position.x + t * ray.direction.x,\n        ray.position.y + t * ray.direction.y,\n        ray.position.z + t * ray.direction.z);\n\n    return intersection;\n\n  }\n\n  return null;\n\n}\n\n  static rayBox(ray, box) {\n    // should also do the space transforms here\n    // ray: {position, direction}\n    // box: {halfDimensions, center}\n\n    let intersections = [];\n    \n    let bbox = Utils.bbox(box.center, box.halfDimensions);\n\n    // window.console.log(bbox);\n\n    // X min\n    let plane = this.posdir(\n      new THREE.Vector3(\n        bbox.min.x,\n        box.center.y,\n        box.center.z),\n      new THREE.Vector3(-1, 0, 0)\n    );\n    this.rayPlaneInBBox(ray, plane, bbox, intersections);\n\n    // X max\n    plane = this.posdir(\n      new THREE.Vector3(\n        bbox.max.x,\n        box.center.y,\n        box.center.z),\n      new THREE.Vector3(1, 0, 0)\n    );\n    this.rayPlaneInBBox(ray, plane, bbox, intersections);\n\n    // Y min\n    plane = this.posdir(\n      new THREE.Vector3(\n        box.center.x,\n        bbox.min.y,\n        box.center.z),\n      new THREE.Vector3(0, -1, 0)\n    );\n    this.rayPlaneInBBox(ray, plane, bbox, intersections);\n\n    // Y max\n    plane = this.posdir(\n      new THREE.Vector3(\n        box.center.x,\n        bbox.max.y,\n        box.center.z),\n      new THREE.Vector3(0, 1, 0)\n    );\n    this.rayPlaneInBBox(ray, plane, bbox, intersections);\n\n    // Z min\n    plane = this.posdir(\n      new THREE.Vector3(\n        box.center.x,\n        box.center.y,\n        bbox.min.z),\n      new THREE.Vector3(0, 0, -1)\n    );\n    this.rayPlaneInBBox(ray, plane, bbox, intersections);\n\n    // Z max\n    plane = this.posdir(\n      new THREE.Vector3(\n        box.center.x,\n        box.center.y,\n        bbox.max.z),\n      new THREE.Vector3(0, 0, 1)\n    );\n    this.rayPlaneInBBox(ray, plane, bbox, intersections);\n\n    return intersections;\n  }\n\n\n  static rayPlaneInBBox(ray, planeAABB, bbox, intersections) {\n    let intersection = this.rayPlane(ray, planeAABB);\n    // window.console.log(intersection);\n    if (intersection && this.inBBox(intersection, bbox)){\n      if(!intersections.find(this.findIntersection(intersection))){\n        intersections.push(intersection);\n      }\n    }\n  }\n\n  static findIntersection(myintersection){\n    return function found(element, index, array) {\n      if(myintersection.x === element.x &&\n        myintersection.y === element.y &&\n        myintersection.z === element.z){\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  static inBBox(point, bbox) {\n    //\n    let epsilon = 0.0001;\n    if (point &&\n        point.x >= bbox.min.x - epsilon && point.y >= bbox.min.y - epsilon && point.z >= bbox.min.z - epsilon &&\n        point.x <= bbox.max.x + epsilon && point.y <= bbox.max.y + epsilon && point.z <= bbox.max.z + epsilon) {\n      return true;\n    }\n    return false;\n  }\n\n  static posdir(position, direction){\n    return {position, direction};\n  }\n\n  static validatePlane(plane){\n    //\n    if(plane === null){\n\n      window.console.log('Invalid plane.');\n      window.console.log(plane);\n\n      return false;\n    }\n\n    if(!Validators.vector3(plane.position)){\n\n      window.console.log('Invalid plane.position.');\n      window.console.log(plane.position);\n\n      return false;\n    }\n\n    if(!Validators.vector3(plane.direction)){\n\n      window.console.log('Invalid plane.direction.');\n      window.console.log(plane.direction);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  static validateAabb(aabb){\n    //\n    if(aabb === null){\n      window.console.log('Invalid aabb.');\n      window.console.log(aabb);\n      return false;\n    }\n\n    if(!Validators.matrix4(aabb.toAABB)){\n\n      window.console.log('Invalid aabb.toAABB: ');\n      window.console.log(aabb.toAABB);\n\n      return false;\n    }\n\n    if(!Validators.vector3(aabb.center)){\n\n      window.console.log('Invalid aabb.center.');\n      window.console.log(aabb.center);\n\n      return false;\n    }\n\n    if(!(Validators.vector3(aabb.halfDimensions) &&\n       aabb.halfDimensions.x >= 0 &&\n       aabb.halfDimensions.y >= 0 &&\n       aabb.halfDimensions.z >= 0)){\n\n      window.console.log('Invalid aabb.halfDimensions.');\n      window.console.log(aabb.halfDimensions);\n\n      return false;\n    }\n\n    return true;\n  }\n\n}\n","import Intersections from './core.intersections';\nimport Pack          from './core.pack';\nimport Validators    from './core.validators';\nimport Utils         from './core.utils';\n//import Pack from './core.pack';\n\n/**\n * @module core\n */\nexport default {\n  Intersections,\n  Utils,\n  Validators\n  //,\n//  Pack\n};","/**\n * Packing functions.\n *\n * @module core/pack */\n\nexport default class Pack {\n\n  /**\n   *\n   */\n  // static packTo8BitsTexture(bits, channels, frame, textureSize, startVoxel, stopVoxel) {\n  //   let packed = {\n  //     textureType: null,\n  //     data: null\n  //   };\n\n  //   let packIndex = 0;\n  //   let frameIndex = 0;\n  //   let inFrameIndex = 0;\n  //   let frameDimension = frame[0].rows * frame[0].columns;\n  //   let data = null;\n\n  //   if (bits === 8 && channels === 1) {\n  //     let data = new Uint8Array(textureSize * textureSize * 1);\n  //     for (let i = startVoxel; i < stopVoxel; i++) {\n  //       /*jshint bitwise: false*/\n  //       frameIndex = ~~(i / frameDimension);\n  //       inFrameIndex = i % (frameDimension);\n  //       /*jshint bitwise: true*/\n\n  //       data[packIndex] = frame[frameIndex].pixelData[inFrameIndex];\n  //       packIndex++;\n\n  //     }\n  //     packed.textureType = THREE.RGBFormat;\n  //     packed.data = data;\n  //   } else if (bits === 16 && channels === 1) {\n  //     let data = new Uint8Array(textureSize * textureSize * 2);\n  //     for (let i = startVoxel; i < stopVoxel; i++) {\n  //       /*jshint bitwise: false*/\n  //       frameIndex = ~~(i / frameDimension);\n  //       inFrameIndex = i % (frameDimension);\n  //       /*jshint bitwise: true*/\n\n  //       // slow!\n  //       //let asb = VJS.core.pack.uint16ToAlphaLuminance(frame[frameIndex].pixelData[inFrameIndex]);\n  //       let raw = frame[frameIndex].pixelData[inFrameIndex];\n\n  //       /*jshint bitwise: false*/\n  //       let lsb = raw & 0x00FF;\n  //       let msb = (raw >>> 8) & 0x00FF;\n  //       /*jshint bitwise: true*/\n  //       data[2 * packIndex] = lsb;\n  //       data[2 * packIndex + 1] = msb;\n  //       packIndex++;\n  //     }\n  //     packed.textureType = THREE.LuminanceAlphaFormat;\n  //     packed.data = data;\n  //   } else if (bits === 32 && channels === 1) {\n\n  //     let data = new Uint8Array(textureSize * textureSize * 4);\n  //     for (let i = startVoxel; i < stopVoxel; i++) {\n  //       /*jshint bitwise: false*/\n  //       frameIndex = ~~(i / frameDimension);\n  //       inFrameIndex = i % (frameDimension);\n  //       /*jshint bitwise: true*/\n\n  //       // slow!\n  //       //let asb = VJS.core.pack.uint16ToAlphaLuminance(frame[frameIndex].pixelData[inFrameIndex]);\n  //       let raw = frame[frameIndex].pixelData[inFrameIndex];\n\n  //       /*jshint bitwise: false*/\n  //       let b0 = raw & 0x000000FF;\n  //       let b1 = (raw >>> 8) & 0x000000FF;\n  //       let b2 = (raw >>> 8) & 0x000000FF;\n  //       let b3 = (raw >>> 8) & 0x000000FF;\n  //       // let lsb1 = raw & 0xFF;\n  //       // let msb1 = (raw >> 8) & 0xFF;\n  //       /*jshint bitwise: true*/\n  //       data[4 * packIndex] = b0;\n  //       data[4 * packIndex + 1] = b1;\n  //       data[4 * packIndex + 2] = b2;\n  //       data[4 * packIndex + 3] = b3;\n  //       packIndex++;\n  //     }\n  //     packed.textureType = THREE.RGBAFormat;\n  //     packed.data = data;\n  //   } else if (bits === 8 && channels === 3) {\n  //     let data = new Uint8Array(textureSize * textureSize * 3);\n  //     for (let i = startVoxel; i < stopVoxel; i++) {\n  //       /*jshint bitwise: false*/\n  //       frameIndex = ~~(i / frameDimension);\n  //       inFrameIndex = i % (frameDimension);\n  //       /*jshint bitwise: true*/\n\n  //       data[3 * packIndex] = frame[frameIndex].pixelData[3 * inFrameIndex];\n  //       data[3 * packIndex + 1] = frame[frameIndex].pixelData[3 * inFrameIndex + 1];\n  //       data[3 * packIndex + 2] = frame[frameIndex].pixelData[3 * inFrameIndex + 2];\n  //       packIndex++;\n\n  //     }\n  //     packed.textureType = THREE.LuminanceFormat;\n  //     packed.data = data;\n  //   }\n\n  //   return packed;\n\n  // }\n}\n\n// 'use strict';\n\n// var VJS = VJS || {};\n// VJS.core = VJS.core || {};\n\n// /**\n//  * @constructor\n//  * @class\n//  * @memberOf VJS.core\n//  * @public\n// */\n// VJS.core.pack = VJS.core.pack || {};\n\n// // Deal with endianess\n// // do not add a if there af is is slow in bog loops\n// // add more functions\n// VJS.core.pack.uint16ToAlphaLuminance = function(uint16, ab) {\n//   /*jshint bitwise: false*/\n//   var lsb = uint16 & 0xFF;\n//   var msb = (uint16 >> 8) & 0xFF;\n//   /*jshint bitwise: true*/\n//   ab = [lsb, msb];\n// };\n\n// VJS.core.pack.uint8ToLuminance = function(uint8) {\n//   return uint8;\n// };\n\n// VJS.core.pack.uint8V3ToRGB = function(uint8V3) {\n//   return uint8V3;\n// };\n\n// /*** Exports ***/\n\n// var moduleType = typeof module;\n// if ((moduleType !== 'undefined') && module.exports) {\n//   module.exports = VJS.core.pack;\n// }\n","import Validators from './core.validators';\n\n/** \n * General purpose functions.\n *\n * @module core/utils\n */\n\nexport default class Utils {\n\n  /**\n   * Generate a bouding box object.\n   * @param {THREE.Vector3} center - Center of the box.\n   * @param {THREE.Vector3} halfDimensions - Half Dimensions of the box.\n   * @return {Object} The bounding box object. {Object.min} is a {THREE.Vector3}\n   * containing the min bounds. {Object.max} is a {THREE.Vector3} containing the\n   * max bounds.\n   * @return {boolean} False input NOT valid.\n   * @example\n   * // Returns\n   * //{ min: { x : 0, y : 0,  z : 0 },\n   * //  max: { x : 2, y : 4,  z : 6 }\n   * //}\n   * VJS.Core.Utils.bbox( new THREE.Vector3(1, 2, 3), new THREE.Vector3(1, 2, 3));\n   *\n   * //Returns false\n   * VJS.Core.Utils.bbox(new THREE.Vector3(), new THREE.Matrix4());\n   *\n   */\n  static bbox(center, halfDimensions) {\n\n    // make sure we have valid inputs\n    if(!(Validators.vector3(center) &&\n      Validators.vector3(halfDimensions))){\n      window.console.log('Invalid center or plane halfDimensions.');\n      return false;\n    }\n\n    // make sure half dimensions are >= 0\n    if(!(halfDimensions.x >= 0 &&\n      halfDimensions.y >= 0 &&\n      halfDimensions.z >= 0)){\n      window.console.log('halfDimensions must be >= 0.');\n      window.console.log(halfDimensions);\n      return false;\n    }\n\n    // min/max bound\n    let min = center.clone().sub(halfDimensions);\n    let max = center.clone().add(halfDimensions);\n\n    return {\n      min,\n      max\n    }\n\n  }\n}","/** \n * Validate basic structures.\n *\n * @example\n * //Returns true\n * VJS.Core.Validators.matrix4(new THREE.Matrix4());\n *\n * //Returns false\n * VJS.Core.Validators.matrix4(new THREE.Vector3());\n *\n * @module core/validators\n */\n\nexport default class Validators {\n\n  /**\n   * Validates a matrix as a THREEJS.Matrix4\n   * link\n   * @param {Object} objectToTest - The object to be tested.\n   * @return {boolean} True if valid Matrix4, false if NOT.\n   */\n  static matrix4(objectToTest) {\n\n    if(!(objectToTest !== null &&\n       typeof objectToTest !== 'undefined' &&\n       objectToTest.hasOwnProperty('elements') &&\n       objectToTest.elements.length === 16 &&\n       typeof objectToTest.identity === 'function'&&\n       typeof objectToTest.copy === 'function' &&\n       typeof objectToTest.determinant === 'function')){\n      return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n  * Validates a vector as a THREEJS.Vector3\n  * @param {Object} objectToTest - The object to be tested.\n  * @return {boolean} True if valid Vector3, false if NOT.\n  */\n  static vector3(objectToTest) {\n \n    if(!(objectToTest !== null &&\n       typeof objectToTest !== 'undefined' &&\n       objectToTest.hasOwnProperty('x') &&\n       objectToTest.hasOwnProperty('y') &&\n       objectToTest.hasOwnProperty('z') &&\n       !objectToTest.hasOwnProperty('w'))){\n      return false;\n    }\n\n    return true;\n  }\n\n /**\n  * Validates a box.\n  * \n  * @example\n  * // a box is defined as\n  * let box = {\n  *   center: THREE.Vector3,\n  *   halfDimensions: THREE.Vector3\n  * }\n  *\n  * @param {Object} objectToTest - The object to be tested.\n  * @return {boolean} True if valid box, false if NOT.\n  */\n  static box(objectToTest) {\n \n    if(!(objectToTest !== null &&\n       typeof objectToTest !== 'undefined' &&\n       objectToTest.hasOwnProperty('center') &&\n       this.vector3(objectToTest.center) &&\n       objectToTest.hasOwnProperty('halfDimensions') &&\n       this.vector3(objectToTest.halfDimensions) &&\n       objectToTest.halfDimensions.x >= 0 &&\n       objectToTest.halfDimensions.y >= 0 &&\n       objectToTest.halfDimensions.z >= 0)){\n      return false;\n    }\n\n    return true;\n  }\n\n /**\n  * Validates a ray.\n  * \n  * @example\n  * // a ray is defined as\n  * let ray = {\n  *   postion: THREE.Vector3,\n  *   direction: THREE.Vector3\n  * }\n  *\n  * @param {Object} objectToTest - The object to be tested.\n  * @return {boolean} True if valid ray, false if NOT.\n  */\n  static ray(objectToTest) {\n \n    if(!(objectToTest !== null &&\n       typeof objectToTest !== 'undefined' &&\n       objectToTest.hasOwnProperty('position') &&\n       this.vector3(objectToTest.position) &&\n       objectToTest.hasOwnProperty('direction') &&\n       this.vector3(objectToTest.direction))){\n      return false;\n    }\n\n    return true;\n  }\n}","import Slice from './geometries.slice';\nimport Voxel from './geometries.voxel';\n\n/**\n * @module geometries\n */\n \nexport default {\n  Slice,\n  Voxel\n};","/*** Imports ***/\nimport coreIntersections from '../../src/core/core.intersections';\n\n/**\n *\n * It is typically used for creating an irregular 3D planar shape given a box and the cut-plane.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#geometry_slice}\n *\n * @module geometries/slice\n *\n * @param {THREE.Vector3} halfDimensions - Half-dimensions of the box to be sliced.\n * @param {THREE.Vector3} center - Center of the box to be sliced.\n * @param {THREE.Vector3<THREE.Vector3>} orientation - Orientation of the box to be sliced. (might not be necessary..?)\n * @param {THREE.Vector3} position - Position of the cutting plane.\n * @param {THREE.Vector3} direction - Cross direction of the cutting plane.\n *\n * @example\n * // Define box to be sliced\n * let halfDimensions = new THREE.Vector(123, 45, 67);\n * let center = new THREE.Vector3(0, 0, 0);\n * let orientation = new THREE.Vector3(\n *   new THREE.Vector3(1, 0, 0),\n *   new THREE.Vector3(0, 1, 0),\n *   new THREE.Vector3(0, 0, 1)\n * );\n *\n * // Define slice plane\n * let position = center.clone();\n * let direction = new THREE.Vector3(-0.2, 0.5, 0.3);\n *\n * // Create the slice geometry & materials\n * let sliceGeometry = new VJS.geometries.slice(halfDimensions, center, orientation, position, direction);\n * let sliceMaterial = new THREE.MeshBasicMaterial({\n *   'side': THREE.DoubleSide,\n *   'color': 0xFF5722\n * });\n *\n *  // Create mesh and add it to the scene\n *  let slice = new THREE.Mesh(sliceGeometry, sliceMaterial);\n *  scene.add(slice);\n */\n\nexport default class GeometriesSlice extends THREE.ShapeGeometry{\n    constructor(halfDimensions, center, position, direction, toAABB = new THREE.Matrix4()) {\n      //\n      // prepare data for the shape!\n      //\n      let aabb = {\n        halfDimensions,\n        center,\n        toAABB\n      };\n\n      let plane = {\n        position,\n        direction\n      };\n\n      // BOOM!\n      let intersections = coreIntersections.aabbPlane(aabb, plane);\n\n      // can not exist before calling the constructor\n      if (intersections.length < 3) {\n        window.console.log('WARNING: Less than 3 intersections between AABB and Plane.');\n        window.console.log('AABB');\n        window.console.log(aabb);\n        window.console.log('Plane');\n        window.console.log(plane);\n        window.console.log('exiting...');\n        // or throw error?\n        throw 'geometries.slice has less than 3 intersections, can not create a valid geometry.';\n      }\n\n      let orderedIntersections = GeometriesSlice.orderIntersections(intersections, direction);\n      let sliceShape = GeometriesSlice.shape(orderedIntersections);\n\n      //\n      // Generate Geometry from shape\n      // It does triangulation for us!\n      //\n      super(sliceShape);\n      this.type = 'SliceGeometry';\n\n      // update real position of each vertex! (not in 2d)\n      this.vertices = orderedIntersections;\n      this.verticesNeedUpdate = true;\n    }\n\n    static shape(points) {\n      //\n      // Create Shape\n      //\n      let shape = new THREE.Shape();\n      // move to first point!\n      shape.moveTo(points[0].xy.x, points[0].xy.y);\n\n      // loop through all points!\n      for (let l = 1; l < points.length; l++) {\n        // project each on plane!\n        shape.lineTo(points[l].xy.x, points[l].xy.y);\n      }\n\n      // close the shape!\n      shape.lineTo(points[0].xy.x, points[0].xy.y);\n      return shape;\n    }\n\n /**\n  *\n  * Convenience function to extract center of mass from list of points.\n  *\n  * @private\n  *\n  * @param {Array<THREE.Vector3>} points - Set of points from which we want to extract the center of mass.\n  *\n  * @returns {THREE.Vector3} Center of mass from given points.\n  */\n  static centerOfMass(points) {\n    let centerOfMass = new THREE.Vector3(0, 0, 0);\n    for (let i = 0; i < points.length; i++) {\n      centerOfMass.x += points[i].x;\n      centerOfMass.y += points[i].y;\n      centerOfMass.z += points[i].z;\n    }\n    centerOfMass.divideScalar(points.length);\n\n    return centerOfMass;\n  }\n\n /**\n  *\n  * Order 3D planar points around a refence point.\n  *\n  * @private\n  *\n  * @param {Array<THREE.Vector3>} points - Set of planar 3D points to be ordered.\n  * @param {THREE.Vector3} direction - Direction of the plane in which points and reference are sitting.\n  *\n  * @returns {Array<Object>} Set of object representing the ordered points.\n  */\n  static orderIntersections(points, direction) {\n\n    let reference = GeometriesSlice.centerOfMass(points);\n    // direction from first point to reference\n    let referenceDirection = new THREE.Vector3(\n      points[0].x - reference.x,\n      points[0].y - reference.y,\n      points[0].z - reference.z\n      ).normalize();\n\n    let base = new THREE.Vector3(0, 0, 0)\n        .crossVectors(referenceDirection, direction)\n        .normalize();\n\n    let orderedpoints = [];\n\n    // other lines // if inter, return location + angle\n    for (let j = 0; j < points.length; j++) {\n      let point = new THREE.Vector3(\n        points[j].x,\n        points[j].y,\n        points[j].z);\n      point.direction = new THREE.Vector3(\n        points[j].x - reference.x,\n        points[j].y - reference.y,\n        points[j].z - reference.z).normalize();\n\n      let x = referenceDirection.dot(point.direction);\n      let y = base.dot(point.direction);\n      point.xy = {x, y};\n\n      let theta = Math.atan2(y, x) * (180 / Math.PI);\n      point.angle = theta;\n      \n      orderedpoints.push(point);\n    }\n\n    orderedpoints.sort(function(a, b) {\n      return a.angle - b.angle;\n    });\n\n    return orderedpoints;\n  }\n\n}\n","/**\n *\n * @module geometries/voxel\n */\n\nexport default class GeometriesVoxel extends THREE.BoxGeometry{\n  constructor(dataPosition) {\n    super(1, 1, 1);\n\n    this._location = dataPosition;\n\n    this.applyMatrix(new THREE.Matrix4().makeTranslation(\n      this._location.x,\n      this._location.y,\n      this._location.z));\n\n    this.verticesNeedUpdate = true;\n  }\n\n  resetVertices() {\n    this.vertices[0].set(0.5, 0.5, 0.5);\n    this.vertices[1].set(0.5, 0.5, -0.5);\n    this.vertices[2].set(0.5, -0.5, 0.5);\n    this.vertices[3].set(0.5, -0.5, -0.5);\n    this.vertices[4].set(-0.5, 0.5, -0.5);\n    this.vertices[5].set(-0.5, 0.5, 0.5);\n    this.vertices[6].set(-0.5, -0.5, -0.5);\n    this.vertices[7].set(-0.5, -0.5, 0.5);\n  }\n\n  set location(location){\n    this._location = location;\n\n    // update vertices from location\n    this.vertices[0].set(+ 0.5, + 0.5, + 0.5);\n    this.vertices[1].set(+ 0.5, + 0.5, - 0.5);\n    this.vertices[2].set(+ 0.5, - 0.5, + 0.5);\n    this.vertices[3].set(+ 0.5, - 0.5, - 0.5);\n    this.vertices[4].set(- 0.5, + 0.5, - 0.5);\n    this.vertices[5].set(- 0.5, + 0.5, + 0.5);\n    this.vertices[6].set(- 0.5, - 0.5, - 0.5);\n    this.vertices[7].set(- 0.5, - 0.5, + 0.5);\n\n    this.applyMatrix(\n      new THREE.Matrix4().makeTranslation(\n        this._location.x,\n        this._location.y,\n        this._location.z));\n\n    this.verticesNeedUpdate = true;\n  }\n\n  get location(){\n    return this._location;\n  }\n\n\n}\n","/*** Imports ***/\n\n/**\n * @module helpers/border\n */\nexport default class HelpersBorder extends THREE.Object3D{\n  constructor(helpersSlice){\n    //\n    super();\n\n    this._helpersSlice = helpersSlice;\n\n    this._visible = true;\n    this._color = 0xff0000;\n    this._material = null;\n    this._geometry = null;\n    this._mesh = null;\n\n    this._create();\n  }\n\n  set helpersSlice(helpersSlice){\n    this._helpersSlice = helpersSlice;\n    this._update();\n  }\n\n  get helpersSlice(){\n    return this._helpersSlice;\n  }\n\n  set visible(visible){\n    this._visible = visible;\n    if(this._mesh){\n      this._mesh.visible = this._visible;\n    }\n  }\n\n  get visible(){\n    return this._visible;\n  }\n\n  set color(color){\n    this._color = color;\n    if(this._material){\n      this._material.color.setHex(this._color);\n    }\n  }\n\n  get color(){\n    return this._color;\n  }\n\n  _create(){\n    if(!this._material){\n      this._material = new THREE.LineBasicMaterial({\n        color: this._color,\n        linewidth: 1\n      });\n    }\n\n    //\n    if(!this._helpersSlice.geometry.vertices){\n      return;\n    }\n\n    this._geometry = new THREE.Geometry();\n    for (var i = 0; i < this._helpersSlice.geometry.vertices.length; i++) {\n      this._geometry.vertices.push(this._helpersSlice.geometry.vertices[i]);\n    }\n    this._geometry.vertices.push(this._helpersSlice.geometry.vertices[0]);\n\n    this._mesh = new THREE.Line(this._geometry, this._material);\n    if(this._helpersSlice.aabbSpace === 'IJK'){\n      this._mesh.applyMatrix(this._helpersSlice.stack.ijk2LPS);\n    }\n    this._mesh.visible = this._visible;\n\n    // and add it!\n    this.add(this._mesh);\n  }\n\n  _update(){\n    //update slice\n    if(this._mesh){\n      this.remove(this._mesh);\n      this._mesh.geometry.dispose();\n      this._mesh = null;\n    }\n\n    this._create();\n  }\n}","\n/**\n * @module helpers/boundingbox\n */\n\nexport default class HelpersBoundingBox extends THREE.Object3D{\n  constructor(stack){\n    //\n    super();\n\n    // private vars\n    this._stack = stack;\n    this._visible = true;\n    this._color = 0x61F2F3;\n    this._material = null;\n    this._geometry = null;\n    this._mesh = null;\n\n    // create object\n    this._create();\n  }\n\n  // getters/setters\n  set visible(visible){\n    this._visible = visible;\n    if(this._mesh){\n      this._mesh.visible = this._visible;\n    }\n  }\n\n  get visible(){\n    return this._visible;\n  }\n\n  set color(color){\n    this._color = color;\n    if(this._material){\n      this._material.color.setHex(this._color);\n    }\n  }\n\n  get color(){\n    return this._color;\n  }\n\n  // private methods\n  _create(){\n    // Convenience vars\n    var dimensions = this._stack.dimensionsIJK;\n    var halfDimensions = this._stack.halfDimensionsIJK;\n    var offset = new THREE.Vector3(-0.5, -0.5, -0.5);\n\n    // Geometry\n    this._geometry = new THREE.BoxGeometry(\n      dimensions.x, dimensions.y, dimensions.z);\n    // position bbox in image space\n    this._geometry .applyMatrix(new THREE.Matrix4().makeTranslation(\n      halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));\n\n    // Material\n    this._material = new THREE.MeshBasicMaterial({\n      wireframe: true,\n      color: this._color\n    });\n\n    // mesh\n    this._mesh = new THREE.Mesh(this._geometry, this._material);\n    // position bbox in world space\n    this._mesh.applyMatrix(this._stack.ijk2LPS);\n    this._mesh.visible = this._visible;\n\n    // and add it!\n    this.add(this._mesh);\n  }\n\n  _update(){\n    // update slice\n    if(this._mesh){\n      this.remove(this._mesh);\n      this._mesh.geometry.dispose();\n      this._mesh.geometry = null;\n      this._mesh.material.dispose();\n      this._mesh.material = null;\n      this._mesh = null;\n    }\n\n    this._create();\n  }\n}","import Border          from './helpers.border';\nimport BoundingBox     from './helpers.boundingbox';\nimport Lut             from './helpers.lut';\nimport ProgressBar     from './helpers.progressbar';\nimport Slice           from './helpers.slice';\nimport Stack           from './helpers.stack';\nimport VolumeRendering from './helpers.volumerendering';\nimport Voxel           from './helpers.voxel';\n\n/**\n * @module helpers\n */\n\nexport default {\n  Border,\n  BoundingBox,\n  Lut,\n  ProgressBar,\n  Slice,\n  Stack,\n  VolumeRendering,\n  Voxel\n};","\n/**\n * @module helpers/lut\n */\n\nexport default class HelpersLut{\n  constructor(containerID,\n              lut = 'default',\n              lutO = 'linear',\n              color = [[0, 0, 0, 0], [1, 1, 1, 1]],\n              opacity = [[0, 0], [1, 1]]) {\n    // min/max (0-1 or real intensities)\n    // show/hide\n    // horizontal/vertical\n    this._containerID = containerID;\n\n    this._color = color;\n    this._lut = lut;\n    this._luts = {[lut]: color};\n\n    this._opacity = opacity;\n    this._lutO = lutO;\n    this._lutsO = {[lutO]: opacity};\n    \n    this.initCanvas();\n    this.paintCanvas();\n\n  }\n\n  initCanvas() {\n    // container\n    this._canvasContainer = this.initCanvasContainer(this._containerID);\n    // background\n    this._canvasBg = this.createCanvas();\n    this._canvasContainer.appendChild(this._canvasBg);\n    // foreground\n    this._canvas = this.createCanvas();\n    this._canvasContainer.appendChild(this._canvas);\n  }\n\n  initCanvasContainer(canvasContainerId) {\n    let canvasContainer = document.getElementById(canvasContainerId);\n    canvasContainer.style.width = '256 px';\n    canvasContainer.style.height = '128 px';\n    canvasContainer.style.border = '1px solid #F9F9F9';\n    return canvasContainer;\n  }\n\n  createCanvas() {\n    let canvas = document.createElement('canvas');\n    canvas.height = 16;\n    canvas.width = 256;\n    return canvas;\n  }\n\n  paintCanvas() {\n    // setup context\n    let ctx = this._canvas.getContext('2d');\n    ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    ctx.globalCompositeOperation = 'source-over';\n\n    // apply color\n    let color = ctx.createLinearGradient(0, 0, this._canvas.width, this._canvas.height);\n    for (let i = 0; i < this._color.length; i++) {\n      color.addColorStop(this._color[i][0], 'rgba(' + Math.round(this._color[i][1] * 255) + ', ' + Math.round(this._color[i][2] * 255) + ', ' + Math.round(this._color[i][3] * 255) + ', 1)');\n    }\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, this._canvas.width , this._canvas.height);\n\n    // setup context\n    ctx.globalCompositeOperation = 'destination-in';\n\n    // apply opacity\n    let opacity = ctx.createLinearGradient(0, 0, this._canvas.width, this._canvas.height);\n    for (let i = 0; i < this._opacity.length; i++) {\n      opacity.addColorStop(this._opacity[i][0], 'rgba(255, 255, 255, ' + this._opacity[i][1] + ')');\n    }\n    ctx.fillStyle = opacity;\n    ctx.fillRect(0, 0, this._canvas.width , this._canvas.height);\n  }\n\n  get texture() {\n    let texture =  new THREE.Texture(this._canvas);\n    texture.mapping = THREE.UVMapping;\n    texture.wrapS = texture.wrapT = THREE.ClampToEdgeWrapping;\n    texture.magFilter = texture.minFilter = THREE.NearestFilter;\n    texture.premultiplyAlpha = true;\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n  set lut(targetLUT) {\n    this._color = this._luts[targetLUT];\n    this._lut = targetLUT;\n\n    this.paintCanvas();\n  }\n\n  get lut() {\n    return this._lut;\n  }\n\n  set luts(newLuts){\n    this._luts = newLuts;\n  }\n\n  get luts(){\n    return this._luts;\n  }\n\n  set lutO(targetLUTO) {\n    this._opacity = this._lutsO[targetLUTO];\n    this._lutO = targetLUTO;\n\n    this.paintCanvas();\n  }\n\n  get lutO() {\n    return this._lutO;\n  }\n\n  set lutsO(newLutsO){\n    this._lutsO = newLutsO;\n  }\n\n  get lutsO(){\n    return this._lutsO;\n  }\n\n  lutsAvailable(type = 'color') {\n    let available = [];\n    let luts = this._luts;\n\n    if(type !== 'color'){\n      luts = this._lutsO;\n    }\n\n    for (let i in luts) {\n      available.push(i);\n    }\n\n    return available;\n  }\n\n  // add luts to class' lut (so a user can add its own as well)\n  static presetLuts() {\n    return {\n      'default':      [[0, 0, 0, 0], [1, 1, 1, 1]],\n      'spectrum':     [[0, 0, 0, 0], [0.1, 0, 0, 1], [0.33, 0, 1, 1], [0.5, 0, 1, 0], [0.66, 1, 1, 0], [0.9, 1, 0, 0], [1, 1, 1, 1]],\n      'hot_and_cold': [[0, 0, 0, 1], [0.15, 0, 1, 1], [0.3, 0, 1, 0], [0.45, 0, 0, 0], [0.5, 0, 0, 0], [0.55, 0, 0, 0], [0.7, 1, 1, 0], [0.85, 1, 0, 0], [1, 1, 1, 1]],\n      'gold':         [[0, 0, 0, 0], [0.13, 0.19, 0.03, 0], [0.25, 0.39, 0.12, 0], [0.38, 0.59, 0.26, 0], [0.50, 0.80, 0.46, 0.08], [0.63, 0.99, 0.71, 0.21], [0.75, 0.99, 0.88, 0.34], [0.88, 0.99, 0.99, 0.48], [1, 0.90, 0.95, 0.61]],\n      'red':          [[0, 0.75, 0, 0], [0.5, 1, 0.5, 0], [0.95, 1, 1, 0], [1, 1, 1, 1]],\n      'green':        [[0, 0, 0.75, 0], [0.5, 0.5, 1, 0], [0.95, 1, 1, 0], [1, 1, 1, 1]],\n      'blue':         [[0, 0, 0, 1], [0.5, 0, 0.5, 1], [0.95, 0, 1, 1], [1, 1, 1, 1]],\n      'walking_dead': [[0, 0.1, 1, 1], [1, 1, 1, 1]]\n    };\n  }\n\n  static presetLutsO() {\n    return {\n      'linear':   [[0, 0],[1, 1]],\n      'lowpass':  [[0, 0.8], [0.2, 0.6], [0.3, 0.1], [1, 0]],\n      'bandpass': [[0, 0], [0.4, 0.8], [0.6, 0.8], [1, 0]],\n      'highpass': [[0, 0], [0.7, 0.1], [0.8, 0.6], [1, 0.8]],\n      'flat':     [[0, .7], [1, 1]]\n    };\n  }\n\n}","\n/**\n * @module helpers/progressBar\n */\n\nexport default class HelpersProgressBar{\n  constructor(container) {\n    this._container = container;\n    this._modes = {\n      'load': {\n        'name' : 'load',\n        'color': '#FFF56F'\n      },\n      'parse': {\n        'name' : 'parse',\n        'color': '#2196F3'\n      }\n    }\n\n    this.requestAnimationFrameID = null;\n\n    this._mode = null;\n    this._value = null;\n    this._total = null;\n\n    this.init();\n  }\n\n  free() {\n    let progressContainers = this._container.getElementsByClassName('progress container');\n    if(progressContainers.length > 0){\n      progressContainers[0].parentNode.removeChild(progressContainers[0]);\n    }\n    progressContainers = null;\n    // stop rendering loop\n    window.cancelAnimationFrame(this.requestAnimationFrameID);\n  }\n\n  init() {\n    var progressContainer = this._domContainer();\n\n    for (let mode in this._modes) {\n      if (this._modes.hasOwnProperty(mode)) {\n        var bar = this._domBar(this._modes[mode]);\n        progressContainer.appendChild(bar);\n        bar = null;\n      }\n    }\n\n    this._container.appendChild(progressContainer);\n    progressContainer = null;\n\n    // start rendering loop\n    this.updateUI();\n  }\n\n  update(value, total, mode) {\n    this._mode = mode;\n    this._value = value;\n    // depending on CDN, total return to XHTTPRequest can be 0.\n    // In this case, we generate a random number to animate the progressbar\n    if(total === 0){\n      this._total = value;\n      this._value = Math.random()*value;\n    }\n    else{\n      this._total = total;\n    }\n  }\n\n  updateUI(){\n\n    this.requestAnimationFrameID = requestAnimationFrame(() =>{\n      this.updateUI();\n    });\n\n    if (!(this._modes.hasOwnProperty(this._mode) &&\n      this._modes[this._mode].hasOwnProperty('name') &&\n      this._modes[this._mode].hasOwnProperty('color'))) {\n      return false;\n    }\n\n    const message = '';\n    const progress = Math.round((this._value / this._total) * 100);\n    const color = this._modes[this._mode].color;\n\n    let progressBar = this._container.getElementsByClassName('progress ' + this._modes[this._mode].name);\n    if(progressBar.length > 0){\n      progressBar[0].style.borderColor = color;\n      progressBar[0].style.width = progress + '%';\n    }\n    progressBar = null;\n  }\n\n  _domContainer(){\n    let container = document.createElement('div');\n\n    // class it\n    container.classList.add('progress');\n    container.classList.add('container');\n\n    // style it\n    container.style.width = '100%';\n    container.style.height = '8px';\n    container.style.position = 'absolute';\n    container.style.backgroundColor = 'rgba(158, 158, 158, 0.5)';\n    container.style.top = '0';\n    container.style.zIndex = '1';\n\n    return container;\n  }\n\n  _domBar(mode){\n\n    if (!(mode.hasOwnProperty('name') &&\n      (mode.hasOwnProperty('color')))) {\n      window.console.log('Invalid mode provided.');\n      window.console.log(mode);\n\n      return false;\n    }\n\n    let bar = document.createElement('div');\n\n    // class it\n    bar.classList.add(mode.name);\n    bar.classList.add('progress');\n\n    // style it\n    bar.style.border = '2px solid ' + mode.color;\n    bar.style.width = '0%';\n\n    return bar;\n  }\n\n}","import GeometriesSlice from '../../src/geometries/geometries.slice';\nimport ShadersData     from '../../src/shaders/shaders.data';\n\nlet glslify =  require('glslify');\n\n/**\n * @module helpers/slice\n */\n\nexport default class HelpersSlice extends THREE.Object3D{\n  constructor(stack,\n              index = 0,\n              position = new THREE.Vector3(0, 0, 0),\n              direction = new THREE.Vector3(0, 0, 1),\n              aabbSpace = 'IJK') {\n    //\n    super();\n\n    // private vars\n    this._stack = stack;\n\n    // image settings\n    // index only used to grab window/level and intercept/slope\n    this._invert = false;\n    this._lut = 'none';\n    this._lutTexture = null;\n    // if auto === true, get from index\n    // else from stack which holds the default values\n    this._intensityAuto = true;\n    // starts at 0\n    this._index = index;\n    this._windowWidth = null;\n    this._windowCenter = null;\n    this._rescaleSlope = null;\n    this._rescaleIntercept = null;\n\n    // Object3D settings\n    // shape\n    this._planePosition = position;\n    this._planeDirection = direction;\n    // change aaBBSpace changes the box dimensions\n    // also changes the transform\n    // there is also a switch to move back mesh to LPS space automatically\n    this._aaBBspace = aabbSpace; // or LPS -> different transforms, esp for the geometry/mesh\n    this._material = null;\n    this._uniforms = ShadersData.uniforms();\n    this._geometry = null;\n    this._mesh = null;\n    this._visible = true;\n\n    // update dimensions, center, etc.\n    // depending on aaBBSpace\n    this._init();\n\n    // update object\n    this._create();\n  }\n\n  // getters/setters\n\n  get stack() {\n    return this._stack;\n  }\n\n  set stack(stack) {\n    this._stack = stack;\n  }\n\n  get windowWidth() {\n    return this._windowWidth;\n  }\n\n  set windowWidth(windowWidth) {\n    this._windowWidth = windowWidth;\n    this.updateIntensitySettingsUniforms();\n  }\n\n  get windowCenter() {\n    return this._windowCenter;\n  }\n\n  set windowCenter(windowCenter) {\n    this._windowCenter = windowCenter;\n    this.updateIntensitySettingsUniforms();\n  }\n\n  get rescaleSlope() {\n    return this._rescaleSlope;\n  }\n\n  set rescaleSlope(rescaleSlope) {\n    this._rescaleSlope = rescaleSlope;\n    this.updateIntensitySettingsUniforms();\n  }\n\n  get rescaleIntercept() {\n    return this._rescaleIntercept;\n  }\n\n  set rescaleIntercept(rescaleIntercept) {\n    this._rescaleIntercept = rescaleIntercept;\n    this.updateIntensitySettingsUniforms();\n  }\n\n  get invert() {\n    return this._invert;\n  }\n\n  set invert(invert) {\n    this._invert = invert;\n    this.updateIntensitySettingsUniforms();\n  }\n\n  get lut() {\n    return this._lut;\n  }\n\n  set lut(lut) {\n    this._lut = lut;\n  }\n\n  get lutTexture() {\n    return this._lutTexture;\n  }\n\n  set lutTexture(lutTexture) {\n    this._lutTexture = lutTexture;\n    this.updateIntensitySettingsUniforms();\n  }\n\n  get intensityAuto() {\n    return this._intensityAuto;\n  }\n\n  set intensityAuto(intensityAuto) {\n    this._intensityAuto = intensityAuto;\n    this.updateIntensitySettings();\n    this.updateIntensitySettingsUniforms();\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  set index(index) {\n    this._index = index;\n    this._update();\n  }\n\n  set planePosition(position) {\n    this._planePosition = position;\n    this._update();\n  }\n\n  get planePosition() {\n    return this._planePosition;\n  }\n\n  set planeDirection(direction) {\n    this._planeDirection = direction;\n    this._update();\n  }\n\n  get planeDirection() {\n    return this._planeDirection;\n  }\n\n  set halfDimensions(halfDimensions) {\n    this._halfDimensions = halfDimensions;\n  }\n\n  get halfDimensions() {\n    return this._halfDimensions;\n  }\n\n  set center(center) {\n    this._center = center;\n  }\n\n  get center() {\n    return this._center;\n  }\n\n  set aabbSpace(aabbSpace) {\n    this._aaBBspace = aabbSpace;\n    this._init();\n  }\n\n  get aabbSpace() {\n    return this._aaBBspace;\n  }\n\n  set mesh(mesh) {\n    this._mesh = mesh;\n  }\n\n  get mesh() {\n    return this._mesh;\n  }\n\n  set geometry(geometry) {\n    this._geometry = geometry;\n  }\n\n  get geometry() {\n    return this._geometry;\n  }\n\n  _init() {\n    if (!this._stack || !this._stack._prepared || !this._stack._packed) {\n      return;\n    }\n\n    if (this._aaBBspace === 'IJK') {\n      this._halfDimensions = this._stack.halfDimensionsIJK;\n      this._center = new THREE.Vector3(\n        this._stack.halfDimensionsIJK.x - 0.5,\n        this._stack.halfDimensionsIJK.y - 0.5,\n        this._stack.halfDimensionsIJK.z - 0.5);\n      this._toAABB = new THREE.Matrix4();\n    } else {\n      // LPS\n      let aaBBox  = this._stack.AABBox();\n      this._halfDimensions = aaBBox.clone().multiplyScalar(0.5);\n      this._center = this._stack.centerAABBox();\n      this._toAABB = this._stack.lps2AABB;\n    }\n  }\n\n  // private methods\n  _create() {\n\n    if (!this._stack || !this._stack.prepared || !this._stack.packed) {\n      return;\n    }\n\n    // Convenience vars\n    try {\n      this._geometry = new GeometriesSlice(\n        this._halfDimensions,\n        this._center,\n        this._planePosition,\n        this._planeDirection,\n        this._toAABB);\n    }\n    catch (e) {\n      window.console.log(e);\n      window.console.log('invalid slice geometry - exiting...');\n      return;\n    }\n\n    if (!this._geometry.vertices) {\n      return;\n    }\n\n    if (!this._material) {\n      //\n      this._uniforms.uTextureSize.value = this._stack.textureSize;\n      this._uniforms.uDataDimensions.value =\n        [this._stack.dimensionsIJK.x,\n         this._stack.dimensionsIJK.y,\n         this._stack.dimensionsIJK.z];\n      this._uniforms.uWorldToData.value = this._stack.lps2IJK;\n      this._uniforms.uNumberOfChannels.value = this._stack.numberOfChannels;\n      this._uniforms.uPixelType.value = this._stack.pixelType;\n      this._uniforms.uBitsAllocated.value = this._stack.bitsAllocated;\n\n      // compute texture if material exist\n      let textures = [];\n      // replace 7 by a letiable!!!!\n      for (let m = 0; m < this._stack.rawData.length; m++) {\n        let tex = new THREE.DataTexture(\n          this._stack.rawData[m],\n          this._stack.textureSize, this._stack.textureSize,\n          this._stack.textureType, THREE.UnsignedByteType,\n          THREE.UVMapping,\n          THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping,\n          THREE.NearestFilter, THREE.NearestFilter);\n        tex.needsUpdate = true;\n        tex.flipY = true;\n        textures.push(tex);\n      }\n\n      this._uniforms.uTextureContainer.value = textures;\n\n      this._material = new THREE.ShaderMaterial({\n        'side': THREE.DoubleSide,\n        'uniforms': this._uniforms,\n        'vertexShader': glslify('../shaders/shaders.data.vert'),\n        'fragmentShader': glslify('../shaders/shaders.data.frag')\n      });\n    }\n\n    // update intensity related stuff\n    this.updateIntensitySettings();\n    this.updateIntensitySettingsUniforms();\n\n    // create the mesh!\n    this._mesh = new THREE.Mesh(this._geometry, this._material);\n    if (this._aaBBspace === 'IJK') {\n      this._mesh.applyMatrix(this._stack.ijk2LPS);\n    }\n\n    this._mesh.visible = this._visible;\n\n    // and add it!\n    this.add(this._mesh);\n  }\n\n  updateIntensitySettings() {\n    // if auto, get from frame index\n    if (this._intensityAuto) {\n      this.updateIntensitySetting('windowCenter');\n      this.updateIntensitySetting('windowWidth');\n      this.updateIntensitySetting('rescaleSlope');\n      this.updateIntensitySetting('rescaleIntercept');\n    } else {\n      if (this._windowCenter === null) {\n        this._windowCenter = this._stack.windowCenter;\n      }\n\n      if (this.__windowWidth === null) {\n        this._windowWidth = this._stack.windowWidth;\n      }\n\n      if (this._rescaleSlope === null) {\n        this._rescaleSlope = this._stack.rescaleSlope;\n      }\n\n      if (this._rescaleIntercept === null) {\n        this._rescaleIntercept = this._stack.rescaleIntercept;\n      }\n    }\n\n  }\n\n  updateIntensitySettingsUniforms() {\n    // set slice window center and width\n    this._uniforms.uRescaleSlopeIntercept.value = [this._rescaleSlope, this._rescaleIntercept];\n    this._uniforms.uWindowCenterWidth.value = [this._windowCenter, this._windowWidth];\n\n    // invert\n    this._uniforms.uInvert.value = this._invert === true ? 1 : 0;\n\n    // lut\n    if (this._lut === 'none') {\n      this._uniforms.uLut.value = 0;\n    } else {\n      this._uniforms.uLut.value = 1;\n      this._uniforms.uTextureLUT.value = this._lutTexture;\n    }\n  }\n\n  updateIntensitySetting(setting) {\n    if (this._stack.frame[this._index] &&\n        this._stack.frame[this._index][setting]) {\n      this['_' + setting] = this._stack.frame[this._index][setting];\n    } else {\n      this['_' + setting] = this._stack[setting];\n    }\n  }\n\n  _update() {\n    // update slice\n    if (this._mesh) {\n      this.remove(this._mesh);\n      this._mesh.geometry.dispose();\n      this._mesh.geometry = null;\n      // we do not want to dispose the texture!\n      // this._mesh.material.dispose();\n      // this._mesh.material = null;\n      this._mesh = null;\n    }\n\n    this._create();\n  }\n}\n","/*** Imports ***/\nimport HelpersBorder      from '../../src/helpers/helpers.border';\nimport HelpersBoundingBox from '../../src/helpers/helpers.boundingbox';\nimport HelpersSlice       from '../../src/helpers/helpers.slice';\n\n/**\n * Helper to easily display and interact with a stack.<br>\n *<br>\n * Defaults:<br>\n *   - orientation: 0 (acquisition direction)<br>\n *   - index: middle slice in acquisition direction<br>\n *<br>\n * Features:<br>\n *   - slice from the stack (in any direction)<br>\n *   - slice border<br>\n *   - stack bounding box<br>\n *<br>\n * Live demo at: {@link http://jsfiddle.net/gh/get/library/pure/fnndsc/ami/tree/master/lessons/01#run|Lesson 01}\n *\n * @example\n * let stack = new VJS.Models.Stack();\n * ... // prepare the stack\n * \n * let stackHelper = new VJS.Helpers.Stack(stack);\n * stackHelper.bbox.color = 0xF9F9F9;\n * stackHelper.border.color = 0xF9F9F9;\n *\n * let scene = new THREE.Scene();\n * scene.add(stackHelper);\n *\n * @extends THREE.Object3D\n *\n * @see module:helpers/border\n * @see module:helpers/boundingbox\n * @see module:helpers/slice\n *\n * @module helpers/stack\n */\nexport default class HelpersStack extends THREE.Object3D{\n  constructor(stack){\n    //\n    super();\n\n    this._stack = stack;\n    this._bBox = null;\n    this._slice = null;\n    this._border = null;\n    this._dummy = null;\n\n    this._orientation = 0;\n    this._index = 0;\n\n    this._uniforms = null;\n    this._autoWindowLevel = false;\n    this._outOfBounds = false;\n\n    // this._arrow = {\n    //   visible: true,\n    //   color: 0xFFF336,\n    //   length: 20,\n    //   material: null,\n    //   geometry: null,\n    //   mesh: null\n    // };\n    this._create();\n  }\n\n  //\n  // PUBLIC METHODS\n  //\n\n  //\n  // SETTERS/GETTERS\n  //\n\n  /**\n   * Get stack.\n   *\n   * @type {ModelsStack}\n   */\n  get stack(){\n    return this._stack;\n  }\n\n  /**\n   * Get bounding box helper.\n   *\n   * @type {HelpersBoundingBox}\n   */\n  get bbox(){\n    return this._bBox;\n  }\n\n  /**\n   * Get slice helper.\n   *\n   * @type {HelpersSlice}\n   */\n  get slice(){\n    return this._slice;\n  }\n\n  /**\n   * Get border helper.\n   *\n   * @type {HelpersSlice}\n   */\n  get border(){\n    return this._border;\n  }\n\n  /**\n   * Set/get current slice index.<br>\n   * Sets outOfBounds flag to know if target index is in/out stack bounding box.<br>\n   * <br>\n   * Internally updates the sliceHelper index and position. Also updates the\n   * borderHelper with the updated sliceHelper.\n   *\n   * @type {number}\n   */\n  get index(){\n    return this._index;\n  }\n\n  set index(index){\n\n    this._index = index;\n\n    // update the slice\n    this._slice.index = index;\n    let halfDimensions = this._stack.halfDimensionsIJK;\n    this._slice.planePosition = this._prepareSlicePosition(halfDimensions, this._index);\n\n    // also update the border\n    this._border.helpersSlice = this._slice;\n\n    // update ourOfBounds flag\n    this._isIndexOutOfBounds();\n  }\n\n  /**\n   * Set/get current slice orientation.<br>\n   * Values: <br>\n   *   - 0: acquisition direction (slice normal is z_cosine)<br>\n   *   - 1: next direction (slice normal is x_cosine)<br>\n   *   - 2: next direction (slice normal is y_cosine)<br>\n   *   - n: set orientation to 0<br>\n   * <br>\n   * Internally updates the sliceHelper direction. Also updates the\n   * borderHelper with the updated sliceHelper.\n   *\n   * @type {number}\n   */\n  set orientation(orientation){\n    this._orientation = orientation;\n    this._slice.planeDirection = this._prepareDirection(this._orientation);\n\n    // also update the border\n    this._border.helpersSlice = this._slice;\n  }\n\n  get orientation(){\n    return this._orientation;\n  }\n\n  /**\n   * Set/get the outOfBound flag.\n   *\n   * @type {boolean}\n   */\n  set outOfBounds(outOfBounds){\n    this._outOfBounds = outOfBounds;\n  }\n\n  get outOfBounds(){\n    return this._outOfBounds;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  /**\n   * Initial setup, including stack prepare, bbox prepare, slice prepare and\n   * border prepare.\n   *\n   * @private\n   */\n  _create(){\n    if (this._stack) {\n\n      // prepare sthe stack internals\n      this._prepareStack();\n\n      // prepare visual objects\n      this._prepareBBox();\n      this._prepareSlice();\n      this._prepareBorder();\n      // todo: Arrow\n\n    } else {\n      window.console.log('no stack to be prepared...');\n    }\n  }\n\n  /**\n   * Given orientation, check if index is in/out of bounds.\n   *\n   * @private\n   */\n  _isIndexOutOfBounds(){\n\n    let dimensionsIJK = this._stack.dimensionsIJK;\n    let dimensions = 0;\n    switch(this._orientation){\n      case 0:\n        dimensions = dimensionsIJK.z;\n        break;\n      case 1:\n        dimensions = dimensionsIJK.x;\n        break;\n      case 2:\n        dimensions = dimensionsIJK.y;\n        break;\n      default:\n        // do nothing!\n        break;\n    }\n\n    if(this._index >= dimensions || this._index < 0){\n      this._outOfBounds = true;\n    }\n    else{\n      this._outOfBounds = false;\n    }\n  }\n\n  /**\n   * Prepare a stack for visualization. (image to world transform, frames order,\n   * pack data into 8 bits textures, etc.)\n   *\n   * @private\n   */\n  _prepareStack(){\n    // make sure there is something, if not throw an error\n    // compute image to workd transform, order frames, etc.\n    if(!this._stack.prepared){\n      this._stack.prepare();\n    }\n    \n    // pack data into 8 bits rgba texture for the shader\n    // this one can be slow...\n    if(!this._stack.packed){\n      this._stack.pack();\n    }\n  }\n\n  /**\n   * Setup bounding box helper given prepared stack and add bounding box helper\n   * to stack helper.\n   *\n   * @private\n   */\n  _prepareBBox(){\n    this._bBox = new HelpersBoundingBox(this._stack);\n    this.add(this._bBox);\n  }\n\n  /**\n   * Setup border helper given slice helper and add border helper\n   * to stack helper.\n   *\n   * @private\n   */\n  _prepareBorder(){\n    this._border = new HelpersBorder(this._slice);\n    this.add(this._border);\n  }\n\n  /**\n   * Setup slice helper given prepared stack helper and add slice helper\n   * to stack helper.\n   *\n   * @private\n   */\n  _prepareSlice(){\n    let halfDimensionsIJK = this._stack.halfDimensionsIJK;\n    // compute initial index given orientation\n    this._index = this._prepareSliceIndex(halfDimensionsIJK);\n    // compute initial position given orientation and index\n    let position = this._prepareSlicePosition(halfDimensionsIJK, this._index);\n    // compute initial direction orientation\n    let direction = this._prepareDirection(this._orientation);\n\n    this._slice = new HelpersSlice(this._stack, this._index, position, direction);\n    this.add(this._slice);\n  }\n\n  /**\n   * Compute slice index depending on orientation.\n   *\n   * @param {THREE.Vector3} indices - Indices in each direction.\n   *\n   * @returns {number} Slice index according to current orientation.\n   *\n   * @private\n   */\n  _prepareSliceIndex(indices){\n    let index = 0;\n    switch(this._orientation){\n      case 0:\n        index = Math.floor(indices.z);\n        break;\n      case 1:\n        index = Math.floor(indices.x);\n        break;\n      case 2:\n        index = Math.floor(indices.y);\n        break;\n      default:\n        // do nothing!\n        break;\n    }\n    return index;\n  }\n\n  /**\n   * Compute slice position depending on orientation.\n   * Sets index in proper location of reference position.\n   *\n   * @param {THREE.Vector3} rPosition - Reference position.\n   * @param {number} index - Current index.\n   *\n   * @returns {number} Slice index according to current orientation.\n   *\n   * @private\n   */\n  _prepareSlicePosition(rPosition, index){\n    let position = new THREE.Vector3(0, 0, 0);\n    switch(this._orientation){\n      case 0:\n        position = new THREE.Vector3(\n          Math.floor(rPosition.x),\n          Math.floor(rPosition.y),\n          index);\n        break;\n      case 1:\n        position = new THREE.Vector3(\n          index,\n          Math.floor(rPosition.y),\n          Math.floor(rPosition.z));\n        break;\n      case 2:\n        position = new THREE.Vector3(\n          Math.floor(rPosition.x),\n          index,\n          Math.floor(rPosition.z));\n        break;\n      default:\n        // do nothing!\n        break;\n    }\n    return position;\n  }\n\n  /**\n   * Compute slice direction depending on orientation.\n   *\n   * @param {number} orientation - Slice orientation.\n   *\n   * @returns {THREE.Vector3} Slice direction\n   *\n   * @private\n   */\n  _prepareDirection(orientation){\n    let direction = new THREE.Vector3(0, 0, 1);\n    switch(orientation){\n      case 0:\n        direction = new THREE.Vector3(0, 0, 1);\n        break;\n      case 1:\n        direction = new THREE.Vector3(1, 0, 0);\n        break;\n      case 2:\n        direction = new THREE.Vector3(0, 1, 0);\n        break;\n      default:\n        // do nothing!\n        break;\n    }\n\n    return direction;\n  }\n\n}","/*** Imports ***/\nimport ShadersRaycasting from '../../src/shaders/shaders.raycasting';\n\nlet glslify = require('glslify');\n\n/**\n * @module helpers/volumerendering\n */\n\nexport default class HelpersVolumeRendering extends THREE.Object3D{\n  constructor(stack){\n    //\n    super();\n\n    this._stack = stack;\n    this._textures = [];\n    this._uniforms = null;\n    this._material = null;\n    this._geometry = null;\n\n    this._create();\n  }\n\n  _create(){\n    this._prepareStack();\n    this._prepareTexture();\n    this._prepareMaterial();\n    this._prepareGeometry();\n\n    this._mesh = new THREE.Mesh(this._geometry, this._material);\n    this.add(this._mesh);\n  }\n\n  _prepareStack(){\n    if(!this._stack.prepared){\n      this._stack.prepare();\n    }\n    \n    if(!this._stack.packed){\n      this._stack.pack();\n    }\n  }\n\n  _prepareTexture(){\n    this._textures = [];\n    for (let m = 0; m < this._stack._rawData.length; m++) {\n      let tex = new THREE.DataTexture(\n        this._stack.rawData[m],\n        this._stack.textureSize,\n        this._stack.textureSize,\n        this._stack.textureType,\n        THREE.UnsignedByteType,\n        THREE.UVMapping,\n        THREE.ClampToEdgeWrapping,\n        THREE.ClampToEdgeWrapping,\n        THREE.NearestFilter,\n        THREE.NearestFilter);\n      tex.needsUpdate = true;\n      tex.flipY = true;\n      this._textures.push(tex);\n    }\n  }\n\n  _prepareMaterial(){\n    // uniforms\n    this._uniforms = ShadersRaycasting.singlePassUniforms();\n    this._uniforms.uWorldBBox.value = this._stack.worldBoundingBox();\n    this._uniforms.uTextureSize.value = this._stack.textureSize;\n    this._uniforms.uTextureContainer.value = this._textures;\n    this._uniforms.uWorldToData.value = this._stack.lps2IJK;\n    this._uniforms.uNumberOfChannels.value = this._stack.numberOfChannels;\n    this._uniforms.uPixelType.value = this._stack.pixelType;\n    this._uniforms.uBitsAllocated.value = this._stack.bitsAllocated;\n    this._uniforms.uWindowCenterWidth.value = [this._stack.windowCenter, this._stack.windowWidth * 0.8];\n    this._uniforms.uRescaleSlopeIntercept.value = [this._stack.rescaleSlope, this._stack.rescaleIntercept];\n    this._uniforms.uDataDimensions.value = [this._stack.dimensionsIJK.x,\n                                                this._stack.dimensionsIJK.y,\n                                                this._stack.dimensionsIJK.z];\n    // material\n    this._material = new THREE.ShaderMaterial({\n      uniforms: this._uniforms,\n      vertexShader: glslify('../../src/shaders/shaders.raycasting.singlePass.vert'),\n      fragmentShader: glslify('../../src/shaders/shaders.raycasting.singlePass.frag'),\n      side: THREE.FrontSide,\n      transparent: true\n    });\n  }\n\n  _prepareGeometry(){\n    let worldBBox = this._stack.worldBoundingBox();\n    let centerLPS = this._stack.worldCenter();\n    \n    this._geometry = new THREE.BoxGeometry(\n      worldBBox[1] - worldBBox[0],\n      worldBBox[3] - worldBBox[2],\n      worldBBox[5] - worldBBox[4]);\n    this._geometry.applyMatrix( new THREE.Matrix4().makeTranslation(\n      centerLPS.x, centerLPS.y, centerLPS.z));\n  }\n\n  get uniforms(){\n    return this._uniforms;\n  }\n\n  set uniforms(uniforms){\n    this._uniforms = uniforms;\n  }\n\n  get stack(){\n    return this._stack;\n  }\n\n  set stack(stack){\n    this._stack = stack;\n  }\n}","import GeometriesVoxel from '../../src/geometries/geometries.voxel';\nimport ModelsStack     from '../../src/models/models.stack';\nimport ModelsVoxel     from '../../src/models/models.voxel';\n\n/**\n * @module helpers/voxel\n */\n\nexport default class HelpersVoxel extends THREE.Object3D{\n  constructor(worldCoordinates = null, stack = null) {\n    super();\n\n    this._stack = stack;\n    this._worldCoordinates = worldCoordinates;\n\n    this._voxel = new ModelsVoxel();\n    this._voxel.id = this.id;\n    this._voxel.worldCoordinates = this._worldCoordinates;\n\n    // if stack provided, compute IJK and value\n    if(this._stack && this._stack.prepared && this._worldCoordinates){\n      this.updateVoxel(this._worldCoordinates);\n    }\n\n    // part of the helper...?\n    this._mesh =  null;\n    this._geometry = null;\n    this._material = null;\n    // 3 next purpose is just to change the color: at widget level\n    this._selected =  false;\n    this._active =  false;\n    this._hover =  false;\n    this._distance = null;\n\n    this._showVoxel =  true;\n    this._showDomSVG =  true;\n    this._showDomMeasurements =  true;\n    this._color = '0x00B0FF';\n    // just visualization\n    // this._svgPointer = '<svg width=\"40\" height=\"40\" \\\n    //      viewBox=\"0 0 140 140\" version=\"1.1\" \\\n    //      xmlns=\"http://www.w3.org/2000/svg\"> \\\n    //   \\\n    //     <polyline points=\"10,70 \\\n    //                       70,10 \\\n    //                       130,70\" />\\\n    //   \\\n    //   </svg>';\n    /*jshint multistr: true */\n    this._svgPointer = '<svg width=\"40\" height=\"40\" \\\n                      viewBox=\"0 0 140 140\" version=\"1.1\" \\\n                      xmlns=\"http://www.w3.org/2000/svg\"> \\\n                      \\\n                      <path d=\"M70,70 \\\n                               L30,30 \\\n                               A10,10 0 1 1 10,10\\\n                               A10,10 0 1 1 30,30\" />\\\n                      \\\n                      </svg>'                        ;\n                      \n\n    this.createMesh();\n  }\n\n  updateVoxel(worldCoordinates) {\n    // update world coordinates\n    this._voxel.worldCoordinates = worldCoordinates;\n\n    // update data coordinates\n    this._voxel.dataCoordinates =  ModelsStack.worldToData(\n                  this._stack,\n                  this._voxel.worldCoordinates);\n\n    // update value\n    let value = ModelsStack.value(\n      this._stack,\n      this._voxel.dataCoordinates);\n\n    this._voxel.value = ModelsStack.valueRescaleSlopeIntercept(\n      value,\n      this._stack.rescaleSlope,\n      this._stack.rescaleIntercept);\n  }\n\n  updateVoxelScreenCoordinates(camera, container){\n    this._voxel.screenCoordinates = HelpersVoxel.worldToScreen(\n      this._worldCoordinates,\n      camera,\n      container);\n  }\n  \n  createMesh() {\n\n    let dataCoordinates = ModelsStack.worldToData(\n      this._stack,\n      this._worldCoordinates);\n\n    this._geometry = new GeometriesVoxel(dataCoordinates);\n    this._material = new THREE.MeshBasicMaterial({\n        wireframe: true,\n        wireframeLinewidth: 2\n      });\n    this._material.color.setHex(this._color);\n    this._mesh = new THREE.Mesh(this._geometry, this._material);\n    this._mesh.applyMatrix(this._stack.ijk2LPS);\n\n    this._mesh.visible = this._showVoxel;\n\n    this.add(this._mesh);\n  }\n\n  createDom() {\n    // that could be a web-component!\n    let measurementsContainer = this._createDiv('VJSVoxelMeasurements', this.id, 'VJSVoxelMeasurements');\n    // RAS\n    let rasContainer = this._createDiv('VJSVoxelProbeWorld', this.id, 'VJSVoxelProbeWorld');\n    measurementsContainer.appendChild(rasContainer);\n    // IJK\n    let ijkContainer = this._createDiv('VJSVoxelProbeData', this.id, 'VJSVoxelProbeData');\n    measurementsContainer.appendChild(ijkContainer);\n    // Value\n    let valueContainer = this._createDiv('VJSVoxelProbeValue', this.id, 'VJSVoxelProbeValue');\n    measurementsContainer.appendChild(valueContainer);\n\n    // SVG\n    let svgContainer = this._createDiv('VJSVoxelProbeSVG', this.id, 'VJSVoxelProbeSVG');\n    svgContainer.innerHTML = this._svgPointer;\n\n    // Package everything\n    let domElement = this._createDiv('VJSWidgetVoxelProbe', this.id, 'VJSWidgetVoxelProbe');\n    domElement.appendChild(svgContainer);\n    domElement.appendChild(measurementsContainer);\n\n    return domElement;\n  }\n\n  updateDom(container) {\n\n    if (document.getElementById('VJSVoxelProbeWorld' + this.id) === null) {\n      container.appendChild(this.createDom());\n    }\n\n    // update content\n    let rasContainer = document.getElementById('VJSVoxelProbeWorld' + this.id);\n    let rasContent = this._voxel.worldCoordinates.x.toFixed(2) + ' : ' +\n                     this._voxel.worldCoordinates.y.toFixed(2) + ' : ' +\n                     this._voxel.worldCoordinates.z.toFixed(2);\n    rasContainer.innerHTML = 'LPS: ' + rasContent;\n\n    let ijkContainer = document.getElementById('VJSVoxelProbeData' + this.id);\n    let ijkContent = this._voxel.dataCoordinates.x + ' : ' +\n                     this._voxel.dataCoordinates.y + ' : ' +\n                     this._voxel.dataCoordinates.z;\n    ijkContainer.innerHTML = 'IJK: ' + ijkContent;\n\n    let valueContainer = document.getElementById('VJSVoxelProbeValue' + this.id);\n    let valueContent = this._voxel.value;\n    valueContainer.innerHTML = 'Value: ' + valueContent;\n\n    // update div position\n    let selectedElement = document.getElementById('VJSWidgetVoxelProbe' + this.id);\n    selectedElement.style.top = this._voxel.screenCoordinates.y;\n    selectedElement.style.left = this._voxel.screenCoordinates.x;\n    // window.console.log(this._voxel);\n    // selectedElement.style['transform-origin'] = 'top left';\n    // selectedElement.style['transform'] = 'translate(' + this._voxel.screenCoordinates.x + 'px, ' + this._voxel.screenCoordinates.y + 'px)';\n\n    this.updateDomClass(selectedElement);\n  }\n\n  updateDomClass() {\n    let element = document.getElementById('VJSWidgetVoxelProbe' + this.id);\n    if (this._active === true) {\n      element.classList.add('VJSVoxelProbeActive');\n    } else {\n      element.classList.remove('VJSVoxelProbeActive');\n    }\n\n    if (this._hover === true) {\n      element.classList.add('VJSVoxelProbeHover');\n    } else {\n      element.classList.remove('VJSVoxelProbeHover');\n    }\n\n    if (this._selected === true) {\n      element.classList.add('VJSVoxelProbeSelect');\n    } else {\n      element.classList.remove('VJSVoxelProbeSelect');\n    }\n\n    this.updateDomElementDisplay('VJSVoxelMeasurements' + this.id, this._showDomMeasurements);\n    this.updateDomElementDisplay('VJSVoxelProbeSVG' + this.id, this._showDomSVG);\n  }\n\n  updateDomElementDisplay(id, show) {\n    if (show) {\n      document.getElementById(id).style.display = 'block';\n    } else {\n      document.getElementById(id).style.display = 'none';\n    }\n  }\n\n  removeTest() {\n    // remove voxelDom\n    let node = document.getElementById('VJSWidgetVoxelProbe' + this.id);\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n\n    // remove voxelMesh\n    this.remove(this._mesh);\n    this._mesh.geometry.dispose();\n    this._mesh.material.dispose();\n    this._mesh = null;\n  }\n\n  static worldToScreen(worldCoordinate, camera, canvas) {\n    let screenCoordinates = worldCoordinate.clone();\n    screenCoordinates.project(camera);\n\n    screenCoordinates.x = Math.round((screenCoordinates.x + 1) * canvas.offsetWidth / 2);\n    screenCoordinates.y = Math.round((-screenCoordinates.y + 1) * canvas.offsetHeight / 2);\n    screenCoordinates.z = 0;\n\n    return screenCoordinates;\n  }\n\n  _createDiv(idPrefix, idSuffix, className) {\n    let divContainer = document.createElement('div');\n    divContainer.setAttribute('id', idPrefix + idSuffix);\n    divContainer.setAttribute('class', className);\n\n    return divContainer;\n  }\n  \n  set color(color) {\n    this._color = color;\n    if (this._material) {\n      this._material.color.setHex(this._color);\n    }\n\n    // also update the dom\n    let selectedElement = document.getElementById('VJSVoxelMeasurements' + this.id);\n    if(selectedElement){\n      selectedElement.style.borderColor = this._color.replace( '0x','#' );\n    }\n    \n    selectedElement = document.querySelector('#VJSVoxelProbeSVG' + this.id + '> svg > path');\n    if(selectedElement){\n      selectedElement.style.stroke = this._color.replace( '0x','#' );\n    }\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  set worldCoordinates(worldCoordinates){\n    this._worldCoordinates = worldCoordinates;\n    this._voxel._worldCoordinates = worldCoordinates;\n\n    // set data coordinates && value\n    this.updateVoxel(this._worldCoordinates);\n\n    if(this._mesh && this._mesh.geometry){\n      this._mesh.geometry.location = this._voxel.dataCoordinates;\n    }\n  }\n\n  get worldCoordinates(){\n    return this._worldCoordinates;\n  }\n\n  get voxel(){\n    return this._voxel;\n  }\n\n  set voxel(voxel){\n    this._voxel = voxel;\n  }\n\n  set showVoxel(showVoxel){\n    this._showVoxel = showVoxel;\n\n    if(this._mesh){\n      this._mesh.visible = this._showVoxel;\n    }\n  }\n  get showVoxel(){\n    return this._showVoxel;\n  }\n\n  set showDomSVG(showDomSVG){\n    this._showDomSVG = showDomSVG;\n    this.updateDomClass();\n  }\n  get showDomSVG(){\n    return this._showDomSVG;\n  }\n\n  set showDomMeasurements(showDomMeasurements){\n    this._showDomMeasurements = showDomMeasurements;\n    this.updateDomClass();\n  }\n  get showDomMeasurements(){\n    return this._showDomMeasurements;\n  }\n\n  set distance(distance){\n    this._distance = distance;\n  }\n\n  get distance(){\n    return this._distance;\n  }\n\n  set selected(selected){\n    this._selected = selected;\n  }\n\n  get selected(){\n    return this._selected;\n  }\n\n  set hover(hover){\n    this._hover = hover;\n  }\n\n  get hover(){\n    return this._hover;\n  }\n\n  set active(active){\n    this._active = active;\n  }\n\n  get active(){\n    return this._active;\n  }\n}\n","/*** Imports ***/\nimport HelpersProgressBar from '../../src/helpers/helpers.progressbar';\nimport ModelsSeries       from '../../src/models/models.series';\nimport ModelsStack        from '../../src/models/models.stack';\nimport ModelsFrame        from '../../src/models/models.frame';\n\n/**\n *\n * It is typically used to load a DICOM image. Use loading manager for\n * advanced usage, such as multiple files handling.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#loader_dicom}\n *\n * @module loaders/base\n *\n * @example\n * var files = ['/data/dcm/fruit'];\n *\n * // Instantiate a dicom loader\n * var lDicomoader = new dicom();\n *\n * // load a resource\n * loader.load(\n *   // resource URL\n *   files[0],\n *   // Function when resource is loaded\n *   function(object) {\n *     //scene.add( object );\n *     window.console.log(object);\n *   }\n * );\n */\nexport default class LoaderBase{\n  constructor(container=document.body, helpersProgress=HelpersProgressBar) {\n    this._loaded = -1;\n    this._totalLoaded = -1;\n    this._parsed = -1;\n    this._totalParsed = -1;\n\n    this._container = container;\n    this._helpersProgressBar = helpersProgress;\n    this._progressBar = null;\n    if(this._container && this._helpersProgressBar){\n      this._progressBar = new helpersProgress(this._container);\n    }\n  }\n\n  /**\n   *\n   */\n  free(){\n    this._container = null;\n    this._helpersProgressBar = null;\n\n    if(this._progressBar){\n      this._progressBar.free();\n      this._progressBar = null;\n    }\n  }\n\n  fetch(url) {\n    return new Promise((resolve, reject) => {\n      let request = new XMLHttpRequest();\n      request.open('GET', url);\n      request.crossOrigin = true;\n      request.responseType = 'arraybuffer';\n\n      request.onload = (event) => {\n        if (request.status === 200) {\n          this._loaded = event.loaded;\n          this._totalLoaded = event.total;\n          if(this._progressBar){\n            this._progressBar.update(this._loaded, this._totalLoaded, 'load');\n          }\n\n          let buffer = request.response;\n          let response = {\n            url,\n            buffer\n          };\n\n          resolve(response);\n        } else {\n          reject(request.statusText);\n        }\n      };\n      request.onerror = () => {\n        reject(request.statusText);\n      };\n\n      request.onprogress = (event) => {\n        this._loaded = event.loaded;\n        this._totalLoaded = event.total;\n        if(this._progressBar){\n          this._progressBar.update(this._loaded, this._totalLoaded, 'load');\n        }\n      };\n\n      request.send();\n    });\n  }\n}\n","import Volume from './loaders.volume';\n\n/**\n * @module loaders\n */\n\nexport default {\n  Volume\n};","/*** Imports ***/\nlet pako = require('pako');\n\nimport LoadersBase  from './loaders.base';\nimport ModelsSeries from '../../src/models/models.series';\nimport ModelsStack  from '../../src/models/models.stack';\nimport ModelsFrame  from '../../src/models/models.frame';\nimport ParsersDicom from '../../src/parsers/parsers.dicom';\nimport ParsersNifti from '../../src/parsers/parsers.nifti';\nimport ParsersNrrd  from '../../src/parsers/parsers.nrrd';\n\n/**\n *\n * It is typically used to load a DICOM image. Use loading manager for\n * advanced usage, such as multiple files handling.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#loader_dicom}\n *\n * @module loaders/volumes\n *\n * @example\n * var files = ['/data/dcm/fruit'];\n *\n * // Instantiate a dicom loader\n * var lDicomoader = new dicom();\n *\n * // load a resource\n * loader.load(\n *   // resource URL\n *   files[0],\n *   // Function when resource is loaded\n *   function(object) {\n *     //scene.add( object );\n *     window.console.log(object);\n *   }\n * );\n */\nexport default class LoadersVolumes extends LoadersBase{\n\n  parse(response) {\n    return new Promise((resolve, reject) => {\n      let data = response;\n      data.gzcompressed = false;\n      data.filename = '';\n      data.extension = '';\n\n      // uncompress?\n      data.filename = response.url.split('/').pop();\n      data.gzcompressed = false;\n\n      // find extension\n      let splittedName = data.filename.split('.');\n      if(splittedName.length <= 1){\n        data.extension = '';\n      }\n      else{\n        data.extension = data.filename.split('.').pop();\n      }\n\n      // unzip if extension is '.gz'\n      if (data.extension === 'gz') {\n        data.gzcompressed = true;\n        data.extension = data.filename.split('.gz').shift().split('.').pop();\n        let decompressedData = pako.inflate(data.buffer);\n        data.buffer = decompressedData.buffer;\n      }\n\n      let parser = this._parser(data.extension);\n      if (!parser) {\n        reject(data.filename + ' can not be parsed.');\n      }\n\n      // check extension\n      let volumeParser = null;\n      try {\n        volumeParser = new parser(data, 0);\n      }\n      catch (e) {\n        window.console.log(e);\n        reject(e);\n      }\n\n      // create a series\n      let series = new ModelsSeries();\n      series.seriesInstanceUID = volumeParser.seriesInstanceUID();\n      series.numberOfFrames = volumeParser.numberOfFrames();\n      if (!series.numberOfFrames) {\n        series.numberOfFrames = 1;\n      }\n      series.numberOfChannels = volumeParser.numberOfChannels();\n\n      // just create 1 dummy stack for now\n      let stack = new ModelsStack();\n      stack.numberOfChannels = volumeParser.numberOfChannels();\n      stack.pixelType = volumeParser.pixelType();\n\n      series.stack.push(stack);\n      // recursive call for each frame\n      // better than for loop to be able to update dom with \"progress\" callback\n      setTimeout(this.parseFrame(series, stack, response.url, 0, volumeParser, resolve, reject), 0);\n    });\n  }\n\n  parseFrame(series, stack, url, i, dataParser, resolve, reject) {\n    let frame = new ModelsFrame();\n    frame.sopInstanceUID = dataParser.sopInstanceUID(i);\n    frame.url = url;\n    frame.rows = dataParser.rows(i);\n    frame.columns = dataParser.columns(i);\n    frame.numberOfChannels = stack.numberOfChannels;\n    frame.pixelType = dataParser.pixelType(i);\n    frame.pixelData = dataParser.extractPixelData(i);\n    frame.pixelSpacing = dataParser.pixelSpacing(i);\n    frame.sliceThickness = dataParser.sliceThickness(i);\n    frame.imageOrientation = dataParser.imageOrientation(i);\n    if (frame.imageOrientation === null) {\n      frame.imageOrientation = [1, 0, 0, 0, 1, 0];\n    }\n    frame.imagePosition = dataParser.imagePosition(i);\n    if (frame.imagePosition === null) {\n      frame.imagePosition = [0, 0, i];\n    }\n    frame.dimensionIndexValues = dataParser.dimensionIndexValues(i);\n    frame.bitsAllocated = dataParser.bitsAllocated(i);\n    frame.instanceNumber = dataParser.instanceNumber(i);\n    frame.windowCenter = dataParser.windowCenter(i);\n    frame.windowWidth = dataParser.windowWidth(i);\n    frame.rescaleSlope = dataParser.rescaleSlope(i);\n    frame.rescaleIntercept = dataParser.rescaleIntercept(i);\n    // should pass frame index for consistency...\n    frame.minMax = dataParser.minMaxPixelData(frame.pixelData);\n\n    stack.frame.push(frame);\n\n    // update status\n    this._parsed = i + 1;\n    this._totalParsed = series.numberOfFrames;\n    if(this._progressBar){\n      this._progressBar.update(this._parsed, this._totalParsed, 'parse');\n    }\n\n    if (this._parsed === this._totalParsed) {\n      resolve(series);\n    } else {\n      setTimeout(this.parseFrame(series, stack, url, this._parsed, dataParser, resolve, reject), 0);\n    }\n  }\n\n  _parser(extension) {\n\n    let parser = null;\n\n    switch (extension.toUpperCase()){\n      case 'NII':\n      case 'NII_':\n        parser = ParsersNifti;\n        break;\n      case 'DCM':\n      case 'DICOM':\n      case 'IMA':\n      case '':\n        parser = ParsersDicom;\n        break;\n      case 'NRRD':\n        parser = ParsersNrrd;\n        break;\n      default:\n        window.console.log('unsupported extension: ' + extension);\n        return false;\n    }\n    return parser;\n  }\n}\n","/**\n * Base object.\n *\n * @module models/base\n */\n\nexport default class ModelsBase{\n  constructor() {\n    this._id = -1;\n  }\n  /**\n   * Merge 2 arrays of models.\n   * Merge the target array into the reference array.\n   *\n   * @param {Array.<Models>} referenceArray - Array to be merge against\n   * @param {Array.<Models>} targetArray - Array to be merged against reference.\n   *\n   * @return {boolean} True if merge was sucessful. False if something went wrong.\n   */\n  mergeModels(referenceArray, targetArray) {\n    if (!(this._validateModelArray(referenceArray) &&\n      this._validateModelArray(targetArray))) {\n      window.console.log('invalid inputs provided.');\n      return false;\n    }\n\n    for (let i = 0; i < targetArray.length; i++) {\n      // test targetArray against existing targetArray\n      for (let j = 0; j < referenceArray.length; j++) {\n        if (referenceArray[j].merge(targetArray[i])) {\n          // merged successfully\n          break;\n        } else if (j === referenceArray.length - 1) {\n          // last merge was not successful\n          // this is a new targetArray\n          referenceArray.push(targetArray[i]);\n        }\n      }\n\n    }\n\n    return true;\n  }\n\n  /**\n   * Merge model against current model.\n   */\n  merge(model) {\n\n    // make sure model is valid\n    if(!(this.validate(model))){\n      return false;\n    }\n\n    // they can be merged if they match\n    if(this._id === model._id){\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Validate a model.\n   *\n   * @return {boolean} True if model is valid. False if not.\n   */\n  validate(model) {\n    if (!(model &&\n      model !== null &&\n      typeof model.merge === 'function')) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate array of models.\n   *\n   * @param {Array.<Models>} modelArray - Array containing models.\n   *\n   * @return {boolean} True if array is valid. False if not.\n   */\n  _validateModelArray(modelArray) {\n    if (!(modelArray !== null && Array === modelArray.constructor)) {\n      window.console.log('invalid model array provided.');\n      return false;\n    }\n\n    for (let i = 0; i < modelArray.length; i++) {\n      if (!(modelArray[i] &&\n        modelArray[i] !== null &&\n        typeof modelArray[i].validate === 'function' &&\n        modelArray[i].validate(modelArray[i]))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","/*** Imports ***/\nimport ModelsBase from '../../src/models/models.base';\n\n/**\n * Frame object.\n *\n * @module models/frame\n */\n\nexport default class ModelsFrame extends ModelsBase{\n  constructor() {\n    super();\n\n    this._sopInstanceUID = null;\n    this._url = null;\n    this._stackID = -1;\n    this._rows = 0;\n    this._columns = 0;\n    this._dimensionIndexValues = [];\n    this._imagePosition = null;\n    this._imageOrientation = null;\n    this._sliceThickness = 1;\n    this._spacingBetweenSlices = null;\n    this._pixelType = 0;\n    this._pixelSpacing = null;\n    this._pixelAspectRatio = null;\n    this._pixelData = null;\n\n    this._instanceNumber = null;\n    this._windowCenter = null;\n    this._windowWidth = null;\n    this._rescaleSlope = null;\n    this._rescaleIntercept = null;\n\n    this._bitsAllocated = 8;\n\n    this._minMax = null;\n    this._dist = null;\n  }\n\n  /**\n   * Merge current frame with provided frame.\n   *\n   * Frames can be merged (i.e. are identical) if following are equals:\n   *  - dimensionIndexValues \n   *  - imageOrientation\n   *  - imagePosition\n   *  - instanceNumber\n   *  - sopInstanceUID\n   *\n   * @returns {boolean} True if frames could be merge. False if not.\n   */\n  merge(frame) {\n    if (this._compareArrays(this._dimensionIndexValues, frame.dimensionIndexValues) &&\n        this._compareArrays(this._imageOrientation, frame.imageOrientation) &&\n        this._compareArrays(this._imagePosition, frame.imagePosition) &&\n        this._instanceNumber === frame.instanceNumber &&\n        this._sopInstanceUID === frame.sopInstanceUID) {\n\n      return true;\n\n    } else {\n\n      return false;\n\n    }\n\n  }\n\n  cosines(){\n    let cosines = [new THREE.Vector3(1, 0, 0), \n      new THREE.Vector3(0, 1, 0), \n      new THREE.Vector3(0, 0, 1)];\n\n     if (this.imageOrientation &&\n      this.imageOrientation.length === 6) {\n      cosines[0] = new THREE.Vector3(this.imageOrientation[0], this.imageOrientation[1], this.imageOrientation[2]);\n      cosines[1] = new THREE.Vector3(this.imageOrientation[3], this.imageOrientation[4], this.imageOrientation[5]);\n      cosines[2] = new THREE.Vector3(0, 0, 0).crossVectors(cosines[0], cosines[1]).normalize();\n    }\n\n    return cosines;\n  }\n\n  spacingXY(){\n    let spacingXY = [1.0, 1.0];\n\n    if (this.pixelSpacing) {\n      spacingXY[0] = this.pixelSpacing[0];\n      spacingXY[1] = this.pixelSpacing[1];\n    } else if (this.pixelAspectRatio) {\n      spacingXY[0] = 1.0;\n      spacingXY[1] = 1.0 * this.pixelAspectRatio[1] / this.pixelAspectRatio[0];\n    } \n\n    return spacingXY;\n  }\n\n  value(column, row) {\n    return this.pixelData[column + this._columns * row];\n  }\n\n  /**\n   * Compare 2 arrays.\n   *\n   * 2 null arrays return true.\n   *\n   * @returns {boolean} True if arrays are identicals. False if not.\n   */\n  _compareArrays(reference, target) {\n    // could both be null\n    if (reference === target) {\n      return true;\n    }\n\n    // if not null....\n    if (reference &&\n        target &&\n        reference.join() === target.join()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  get rows() {\n    return this._rows;\n  }\n\n  set rows(rows) {\n    this._rows = rows;\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  set columns(columns) {\n    this._columns = columns;\n  }\n\n  get spacingBetweenSlices() {\n    return this._spacingBetweenSlices;\n  }\n\n  set spacingBetweenSlices(spacingBetweenSlices) {\n    this._spacingBetweenSlices = spacingBetweenSlices;\n  }\n\n  get sliceThickness() {\n    return this._sliceThickness;\n  }\n\n  set sliceThickness(sliceThickness) {\n    this._sliceThickness = sliceThickness;\n  }\n\n  get imagePosition() {\n    return this._imagePosition;\n  }\n\n  set imagePosition(imagePosition) {\n    this._imagePosition = imagePosition;\n  }\n\n  get imageOrientation() {\n    return this._imageOrientation;\n  }\n\n  set imageOrientation(imageOrientation) {\n    this._imageOrientation = imageOrientation;\n  }\n\n  get windowWidth() {\n    return this._windowWidth;\n  }\n\n  set windowWidth(windowWidth) {\n    this._windowWidth = windowWidth;\n  }\n\n  get windowCenter() {\n    return this._windowCenter;\n  }\n\n  set windowCenter(windowCenter) {\n    this._windowCenter = windowCenter;\n  }\n\n  get rescaleSlope() {\n    return this._rescaleSlope;\n  }\n\n  set rescaleSlope(rescaleSlope) {\n    this._rescaleSlope = rescaleSlope;\n  }\n\n  get rescaleIntercept() {\n    return this._rescaleIntercept;\n  }\n\n  set rescaleIntercept(rescaleIntercept) {\n    this._rescaleIntercept = rescaleIntercept;\n  }\n\n  get bitsAllocated() {\n    return this._bitsAllocated;\n  }\n\n  set bitsAllocated(bitsAllocated) {\n    this._bitsAllocated = bitsAllocated;\n  }\n\n  get dist() {\n    return this._dist;\n  }\n\n  set dist(dist) {\n    this._dist = dist;\n  }\n\n  get pixelSpacing() {\n    return this._pixelSpacing;\n  }\n\n  set pixelSpacing(pixelSpacing) {\n    this._pixelSpacing = pixelSpacing;\n  }\n\n  get pixelAspectRatio() {\n    return this._pixelAspectRatio;\n  }\n\n  set pixelAspectRatio(pixelAspectRatio) {\n    this._pixelAspectRatio = pixelAspectRatio;\n  }\n\n  get minMax() {\n    return this._minMax;\n  }\n\n  set minMax(minMax) {\n    this._minMax = minMax;\n  }\n\n  get dimensionIndexValues() {\n    return this._dimensionIndexValues;\n  }\n\n  set dimensionIndexValues(dimensionIndexValues) {\n    this._dimensionIndexValues = dimensionIndexValues;\n  }\n\n  get instanceNumber() {\n    return this._instanceNumber;\n  }\n\n  set instanceNumber(instanceNumber) {\n    this._instanceNumber = instanceNumber;\n  }\n\n  get pixelData() {\n    return this._pixelData;\n  }\n\n  set pixelData(pixelData) {\n    this._pixelData = pixelData;\n  }\n\n  set sopInstanceUID(sopInstanceUID) {\n    this._sopInstanceUID = sopInstanceUID;\n  }\n\n  get sopInstanceUID() {\n    return this._sopInstanceUID;\n  }\n\n  get pixelType() {\n    return this._pixelType;\n  }\n\n  set pixelType(pixelType) {\n    this._pixelType = pixelType;\n  }\n\n  get url(){\n    return this._url;\n  }\n\n  set url(url){\n    this._url = url;\n  }\n}\n","import Frame from './models.frame';\nimport Stack from './models.stack';\nimport Series from './models.series';\nimport Voxel from './models.voxel';\n\n/**\n * @module models\n */\n \nexport default {\n  Frame,\n  Stack,\n  Series,\n  Voxel\n};","/*** Imports ***/\nimport ModelsBase from '../../src/models/models.base';\n\n/**\n * Series object.\n *\n * @module models/series\n */\n\nexport default class ModelsSeries extends ModelsBase{\n  constructor() {\n    super();\n\n    this._concatenationUID = -1;\n    this._seriesInstanceUID = -1;\n    this._seriesNumber = -1;\n    this._dimensionIndexSequence = [];\n    // it is used in the loader in case a dicom/nifti contains multiple frames\n    // should be updated after merge or renamed\n    this._numberOfFrames = 0;\n    this._numberOfChannels = 1;\n\n    this._stack = [];\n  }\n\n  /**\n   * Validate a series.\n   *\n   * Requirements:\n   *   - mergeSeries method\n   *   - _seriesInstanceUID\n   *   - _numberOfFrames\n   *   - _numberOfChannels\n   *   _ _stack\n   *\n   * @param {ModelsSeries} model - Model to be validated as series.\n   *\n   * @returns {boolean} True if series is valid. False if not.\n   *\n   * @override\n   */\n  validate(model) {\n    if (!(super.validate(model) &&\n      typeof model.mergeSeries === 'function' &&\n      model.hasOwnProperty('_seriesInstanceUID') &&\n      model.hasOwnProperty('_numberOfFrames') &&\n      model.hasOwnProperty('_numberOfChannels') &&\n      model.hasOwnProperty('_stack') &&\n      typeof model._stack !== 'undefined' &&\n      Array === model._stack.constructor)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Merge current series with provided series.\n   * 2 series can ONLY be merge if they have the same SeriesInstanceUID.\n   *\n   * Also merges the stacks inside a series.\n   *\n   * @param {ModelsSeries} series - Series to be merged against current series.\n   *\n   * @returns {boolean} True if series could be merge. False if not.\n   *\n   * @override\n   */\n  merge(series) {\n    if(!this.validate(series)){\n      return false;\n    }\n\n    if (this._seriesInstanceUID === series.seriesInstanceUID) {\n      return this.mergeModels(this._stack, series.stack);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Merge current series with provided array of series.\n   * 2 series can ONLY be merge if they have the same SeriesInstanceUID.\n   *\n   * Also merges the stacks inside a series.\n   *\n   * @param {Array.<ModelsSeries>} target - Series to be merged against current series.\n   *\n   * @returns {Array.<ModelsSeries>} Array of series properly merged.\n   */\n  mergeSeries(target){\n    var seriesContainer = [this];\n    this.mergeModels(seriesContainer, target);\n    return seriesContainer;\n  }\n\n  /**\n   * Setters/Getters\n   */\n\n  set seriesInstanceUID(seriesInstanceUID) {\n    this._seriesInstanceUID = seriesInstanceUID;\n  }\n\n  get seriesInstanceUID() {\n    return this._seriesInstanceUID;\n  }\n\n  set numberOfFrames(numberOfFrames) {\n    this._numberOfFrames = numberOfFrames;\n  }\n\n  get numberOfFrames() {\n    return this._numberOfFrames;\n  }\n\n  set numberOfChannels(numberOfChannels) {\n    this._numberOfChannels = numberOfChannels;\n  }\n\n  get numberOfChannels() {\n    return this._numberOfChannels;\n  }\n\n  set stack(stack) {\n    this._stack = stack;\n  }\n\n  get stack() {\n    return this._stack;\n  }\n}\n","/*** Imports ***/\nlet binaryString = require( 'math-float32-to-binary-string' );\n\nimport CorePack    from '../../src/core/core.pack';\nimport ModelsBase  from '../../src/models/models.base';\n\n// Slicer way to handle images\n// should follow it...\n // 897   if ( (this->IndexSeriesInstanceUIDs[k] != idxSeriesInstanceUID && this->IndexSeriesInstanceUIDs[k] >= 0 && idxSeriesInstanceUID >= 0) ||\n // 898        (this->IndexContentTime[k] != idxContentTime && this->IndexContentTime[k] >= 0 && idxContentTime >= 0) ||\n // 899        (this->IndexTriggerTime[k] != idxTriggerTime && this->IndexTriggerTime[k] >= 0 && idxTriggerTime >= 0) ||\n // 900        (this->IndexEchoNumbers[k] != idxEchoNumbers && this->IndexEchoNumbers[k] >= 0 && idxEchoNumbers >= 0) ||\n // 901        (this->IndexDiffusionGradientOrientation[k] != idxDiffusionGradientOrientation  && this->IndexDiffusionGradientOrientation[k] >= 0 && idxDiffusionGradientOrientation >= 0) ||\n // 902        (this->IndexSliceLocation[k] != idxSliceLocation && this->IndexSliceLocation[k] >= 0 && idxSliceLocation >= 0) ||\n // 903        (this->IndexImageOrientationPatient[k] != idxImageOrientationPatient && this->IndexImageOrientationPatient[k] >= 0 && idxImageOrientationPatient >= 0) )\n // 904     {\n // 905       continue;\n // 906     }\n\n/**\n * Stack object.\n *\n * @module models/stack\n */\n\nexport default class ModelsStack extends ModelsBase{\n  constructor() {\n    super();\n\n    this._uid = null;\n    this._stackID = -1;\n\n    this._frame = [];\n    this._numberOfFrames = 0;\n\n    this._rows = 0;\n    this._columns = 0;\n    this._numberOfChannels = 1;\n    this._bitsAllocated = 8;\n    this._pixelType = 0;\n\n    // origin of the first slice of the stack!\n    this._origin = null;\n\n    this._textureSize = 4096;\n    this._nbTextures = 7; // HIGH RES..\n    this._rawData = [];\n\n    this._windowCenter = 0;\n    this._windowWidth = 0;\n\n    this._rescaleSlope = 1;\n    this._rescaleIntercept = 0;\n\n    this._minMax = [65535, -32768];\n\n    // TRANSFORMATION MATRICES\n\n    this._ijk2LPS = null;\n    this._lps2IJK = null;\n\n    this._aabb2LPS = null;\n    this._lps2AABB = null;\n\n    //\n    // IJK dimensions\n    this._dimensionsIJK = null;\n    this._halfDimensionsIJK = null;\n    this._spacing = new THREE.Vector3(1, 1, 1);\n    this._spacingBetweenSlices = 0;\n    this._sliceThickness = 0;\n    this._origin = null;\n    this._xCosine = new THREE.Vector3(1, 0, 0);\n    this._yCosine = new THREE.Vector3(0, 1, 0);\n    this._zCosine = new THREE.Vector3(0, 0, 1);\n\n    // convenience vars\n    this._prepared = false;\n    this._packed = false;\n  }\n\n  /**\n   * Compute cosines\n   * Order frames\n   * computeSpacing\n   * sanityCheck\n   * init some vars\n   * compute min/max\n   * compute transformation matrices\n   */\n  prepare() {\n    // we need at least 1 frame\n    if (this._frame && this._frame.length > 0) {\n      this._numberOfFrames = this._frame.length;\n    } else {\n      window.console.log('_frame doesn\\'t contain anything....');\n      window.console.log(this._frame);\n      return false;\n    }\n\n    // pass parameters from frame to stack\n    this._rows = this._frame[0].rows;\n    this._columns = this._frame[0].columns;\n    this._dimensionsIJK = new THREE.Vector3(this._columns, this._rows, this._numberOfFrames);\n    this._halfDimensionsIJK = new THREE.Vector3(\n      this._dimensionsIJK.x / 2,\n      this._dimensionsIJK.y / 2,\n      this._dimensionsIJK.z / 2\n    );\n    this._spacingBetweenSlices = this._frame[0].spacingBetweenSlices;\n    this._sliceThickness = this._frame[0].sliceThickness;\n\n    // compute direction cosines\n    this.computeCosines();\n\n    // order the frames\n    this.orderFrames();\n\n    // compute/guess spacing\n    this.computeSpacing();\n\n    // set extra vars if nulls\n    // happens now because if it hapen before, we would think image position/orientation\n    // are defined and we would use it to compute spacing.\n    if (!this._frame[0].imagePosition) {\n      this._frame[0].imagePosition = [0, 0, 0];\n    }\n\n    if (!this._frame[0].imageOrientation) {\n      this._frame[0].imageOrientation = [1, 0, 0, 0, 1, 0];\n    }\n\n    this._origin = this._vector3FromArray(this._frame[0].imagePosition, 0);\n\n    // compute transforms\n    this.computeIJK2LPS();\n    this.computeLPS2AABB();\n\n    //this.packEchos();\n\n    this._rescaleSlope = this._frame[0].rescaleSlope || 1;\n    this._rescaleIntercept = this._frame[0].rescaleIntercept || 0;\n\n    // rescale/slope min max\n    this.computeMinMaxIntensities();\n    this._minMax[0] = ModelsStack.valueRescaleSlopeIntercept(\n      this._minMax[0],\n      this._rescaleSlope,\n      this._rescaleIntercept);\n    this._minMax[1] = ModelsStack.valueRescaleSlopeIntercept(\n      this._minMax[1],\n      this._rescaleSlope,\n      this._rescaleIntercept);\n\n    let width = this._frame[0].windowWidth || this._minMax[1] - this._minMax[0];\n    this._windowWidth = this._rescaleSlope * width + this._rescaleIntercept;\n\n    let center = this._frame[0].windowCenter || this._minMax[0] + width / 2;\n    this._windowCenter = this._rescaleSlope * center + this._rescaleIntercept;\n\n    this._bitsAllocated = this._frame[0].bitsAllocated;\n\n    this._prepared = true;\n  }\n\n  packEchos(){\n    // 4 echo times...\n    let echos = 4;\n    let packedEcho = [];\n    for(let i=0; i< this._frame.length; i+=echos){\n      let frame = this._frame[i];\n      for(let k=0; k<this._rows * this._columns; k++){\n        for(let j=1; j<echos; j++){\n          frame.pixelData[k] += this._frame[i+j].pixelData[k];\n        }\n        frame.pixelData[k] /= echos;\n      }\n      packedEcho.push(frame);\n    }\n    this._frame = packedEcho;\n    this._numberOfFrames = this._frame.length;\n    this._dimensionsIJK = new THREE.Vector3(this._columns, this._rows, this._numberOfFrames);\n    this._halfDimensionsIJK = new THREE.Vector3(\n      this._dimensionsIJK.x / 2,\n      this._dimensionsIJK.y / 2,\n      this._dimensionsIJK.z / 2\n    );\n  }\n\n  // frame.cosines - returns array [x, y, z]\n  computeCosines() {\n    if (this._frame &&\n      this._frame[0]) {\n      let cosines = this._frame[0].cosines();\n      this._xCosine = cosines[0];\n      this._yCosine = cosines[1];\n      this._zCosine = cosines[2];\n    }\n  }\n\n  orderFrames() {\n    // order the frames based on theirs dimension indices\n    // first index is the most important.\n    // 1,1,1,1 willl be first\n    // 1,1,2,1 will be next\n    // 1,1,2,3 will be next\n    // 1,1,3,1 wil be next\n    if (this._frame[0].dimensionIndexValues) {\n      this._frame.sort(this._orderFrameOnDimensionIndicesArraySort);\n\n    // else order with image position and orientation\n    } else if (\n      this._frame[0].imagePosition && this._frame[0].imageOrientation &&\n      this._frame[1] &&\n      this._frame[1].imagePosition && this._frame[1].imageOrientation &&\n      this._frame[0].imagePosition.join() !== this._frame[1].imagePosition.join()) {\n      // compute and sort by dist in this series\n      this._frame.map(this._computeDistanceArrayMap.bind(null, this._zCosine));\n      this._frame.sort(this._sortDistanceArraySort);\n    } else if (\n      this._frame[0].instanceNumber !== null &&\n      this._frame[1] && this._frame[1].instanceNumber !== null &&\n      this._frame[0].instanceNumber !== this._frame[1].instanceNumber) {\n      this._frame.sort(this._sortInstanceNumberArraySort);\n    } else if (\n      this._frame[0].sopInstanceUID &&\n      this._frame[1] && this._frame[1].sopInstanceUID &&\n      this._frame[0].sopInstanceUID !== this._frame[1].sopInstanceUID) {\n      this._frame.sort(this._sortSopInstanceUIDArraySort);\n    } else {\n      //window.console.log(this._frame[0]);\n      //window.console.log(this._frame[1]);\n      // window.console.log(this._frame[0].instanceNumber !== null && true);\n      //window.console.log(this._frame[0].instanceNumber !== this._frame[1].instanceNumber);\n      window.console.log('do not know how to order the frames...');\n      // else slice location\n      // image number\n      // ORDERING BASED ON instance number\n      // _ordering = 'instance_number';\n      // first_image.sort(function(a,b){return a[\"instance_number\"]-b[\"instance_number\"]});\n    }\n  }\n\n  computeSpacing() {\n    this.xySpacing();\n    this.zSpacing();\n  }\n\n  zSpacing() {\n\n    if (this._numberOfFrames > 1) {\n      if (this._spacingBetweenSlices) {\n        this._spacing.z = this._spacingBetweenSlices;\n      // if pixelSpacing in Z direction is already defined\n      // i.e. by nifti parser\n      }else if (this._frame[0].pixelSpacing && this._frame[0].pixelSpacing[2]) {\n        this._spacing.z = this._frame[0].pixelSpacing[2];\n      }else {\n        // compute and sort by dist in this series\n        this._frame.map(this._computeDistanceArrayMap.bind(null, this._zCosine));\n        this._frame.sort(this._sortDistanceArraySort);\n\n        this._spacing.z = this._frame[1].dist - this._frame[0].dist;\n      }\n      // } else if (this._frame[0].sliceThickness) {\n      //   zSpacing = this._frame[0].sliceThickness;\n    }\n\n    // Spacing\n    // can not be 0 if not matrix can not be inverted.\n    if (this._spacing.z === 0) {\n      this._spacing.z = 1;\n    }\n  }\n\n  // FRAME CAN DO IT\n  xySpacing() {\n    if (this._frame &&\n      this._frame[0]) {\n      let spacingXY = this._frame[0].spacingXY();\n      this._spacing.x = spacingXY[0];\n      this._spacing.y = spacingXY[1];\n    }\n  }\n\n  computeMinMaxIntensities() {\n    // what about colors!!!!?\n    for (let i = 0; i < this._frame.length; i++) {\n      // get min/max\n      this._minMax[0] = Math.min(this._minMax[0], this._frame[i].minMax[0]);\n      this._minMax[1] = Math.max(this._minMax[1], this._frame[i].minMax[1]);\n    }\n  }\n\n  computeIJK2LPS() {\n    this._ijk2LPS = new THREE.Matrix4();\n    this._ijk2LPS.set(\n      this._xCosine.x * this._spacing.x, this._yCosine.x * this._spacing.y, this._zCosine.x * this._spacing.z, this._origin.x,\n      this._xCosine.y * this._spacing.x, this._yCosine.y * this._spacing.y, this._zCosine.y * this._spacing.z, this._origin.y,\n      this._xCosine.z * this._spacing.x, this._yCosine.z * this._spacing.y, this._zCosine.z * this._spacing.z, this._origin.z,\n      0, 0, 0, 1);\n\n    this._lps2IJK = new THREE.Matrix4();\n    this._lps2IJK.getInverse(this._ijk2LPS);\n  }\n\n  computeLPS2AABB() {\n    this._aabb2LPS = new THREE.Matrix4();\n    this._aabb2LPS.set(\n        this._xCosine.x, this._yCosine.x, this._zCosine.x, this._origin.x,\n        this._xCosine.y, this._yCosine.y, this._zCosine.y, this._origin.y,\n        this._xCosine.z, this._yCosine.z, this._zCosine.z, this._origin.z,\n        0, 0, 0, 1);\n\n    this._lps2AABB = new THREE.Matrix4();\n    this._lps2AABB.getInverse(this._aabb2LPS);\n  }\n\n  merge(stack) {\n    // also make sure x/y/z cosines are a match!\n    if (this._stackID === stack.stackID) {\n      return this.mergeModels(this._frame, stack.frame);\n    } else {\n      return false;\n    }\n  }\n\n  pack() {\n    // Get total number of voxels\n    let nbVoxels = this._dimensionsIJK.x * this._dimensionsIJK.y * this._dimensionsIJK.z;\n\n    // Loop through all the textures we need\n    let textureDimension = this._textureSize * this._textureSize;\n    let requiredTextures = Math.ceil(nbVoxels / textureDimension);\n    let voxelIndexStart = 0;\n    let voxelIndexStop = this._textureSize * this._textureSize;\n    if (voxelIndexStop > nbVoxels) {\n      voxelIndexStop = nbVoxels;\n    }\n\n    for (let ii = 0; ii < requiredTextures; ii++) {\n      let packed = this._packTo8Bits(this._bitsAllocated, this._pixelType, this._numberOfChannels, this._frame, this._textureSize, voxelIndexStart, voxelIndexStop);\n      this._textureType = packed.textureType;\n      this._rawData.push(packed.data);\n\n      // update voxelIndex\n      voxelIndexStart += textureDimension;\n      voxelIndexStop += textureDimension;\n      if (voxelIndexStop > nbVoxels) {\n        voxelIndexStop = nbVoxels;\n      }\n    }\n\n    this._packed = true;\n  }\n\n  _packTo8Bits(bits, pixelType, channels, frame, textureSize, startVoxel, stopVoxel) {\n    let packed = {\n      textureType: null,\n      data: null\n    };\n\n    let packIndex = 0;\n    let frameIndex = 0;\n    let inFrameIndex = 0;\n    // frame can do it!\n    let frameDimension = frame[0].rows * frame[0].columns;\n    let data = null;\n\n    if (bits === 8 && channels === 1 || bits === 1) {\n      let data = new Uint8Array(textureSize * textureSize * 1);\n      for (let i = startVoxel; i < stopVoxel; i++) {\n        /*jshint bitwise: false*/\n        frameIndex = ~~(i / frameDimension);\n        inFrameIndex = i % (frameDimension);\n        /*jshint bitwise: true*/\n\n        data[packIndex] = frame[frameIndex].pixelData[inFrameIndex];\n        packIndex++;\n\n      }\n      packed.textureType = THREE.LuminanceFormat;\n      packed.data = data;\n    } else if (bits === 16 && channels === 1) {\n      let data = new Uint8Array(textureSize * textureSize * 2);\n      for (let i = startVoxel; i < stopVoxel; i++) {\n        /*jshint bitwise: false*/\n        frameIndex = ~~(i / frameDimension);\n        inFrameIndex = i % (frameDimension);\n        /*jshint bitwise: true*/\n\n        // slow!\n        //let asb = VJS.core.pack.uint16ToAlphaLuminance(frame[frameIndex].pixelData[inFrameIndex]);\n        let raw = frame[frameIndex].pixelData[inFrameIndex];\n        // + 128..?\n        data[2 * packIndex] = raw & 0x00FF;\n        data[2 * packIndex + 1] = (raw >>> 8) & 0x00FF;\n\n        packIndex++;\n      }\n      packed.textureType = THREE.LuminanceAlphaFormat;\n      packed.data = data;\n    } else if (bits === 32 && channels === 1 && pixelType === 0) {\n\n      let data = new Uint8Array(textureSize * textureSize * 4);\n      for (let i = startVoxel; i < stopVoxel; i++) {\n        /*jshint bitwise: false*/\n        frameIndex = ~~(i / frameDimension);\n        inFrameIndex = i % (frameDimension);\n        /*jshint bitwise: true*/\n\n        // slow!\n        //let asb = VJS.core.pack.uint16ToAlphaLuminance(frame[frameIndex].pixelData[inFrameIndex]);\n        let raw = frame[frameIndex].pixelData[inFrameIndex];\n        data[4 * packIndex] = raw & 0x000000FF;\n        data[4 * packIndex + 1] = (raw >>> 8) & 0x000000FF;\n        data[4 * packIndex + 2] = (raw >>> 8) & 0x000000FF;\n        data[4 * packIndex + 3] = (raw >>> 8) & 0x000000FF;\n\n        packIndex++;\n      }\n      packed.textureType = THREE.RGBAFormat;\n      packed.data = data;\n    } else if (bits === 32 && channels === 1 && pixelType === 1) {\n\n      let data = new Uint8Array(textureSize * textureSize * 4);\n      for (let i = startVoxel; i < stopVoxel; i++) {\n        /*jshint bitwise: false*/\n        frameIndex = ~~(i / frameDimension);\n        inFrameIndex = i % (frameDimension);\n        /*jshint bitwise: true*/\n\n        // slow!\n        //let asb = VJS.core.pack.uint16ToAlphaLuminance(frame[frameIndex].pixelData[inFrameIndex]);\n        let raw = frame[frameIndex].pixelData[inFrameIndex];\n        let bitString = binaryString(raw);\n        let bitStringArray = bitString.match(/.{1,8}/g);\n\n        data[4 * packIndex] = parseInt(bitStringArray[0], 2);\n        data[4 * packIndex + 1] = parseInt(bitStringArray[1], 2);\n        data[4 * packIndex + 2] = parseInt(bitStringArray[2], 2);\n        data[4 * packIndex + 3] = parseInt(bitStringArray[3], 2);\n\n        packIndex++;\n      }\n      packed.textureType = THREE.RGBAFormat;\n      packed.data = data;\n    } else if (bits === 8 && channels === 3) {\n      let data = new Uint8Array(textureSize * textureSize * 3);\n      for (let i = startVoxel; i < stopVoxel; i++) {\n        /*jshint bitwise: false*/\n        frameIndex = ~~(i / frameDimension);\n        inFrameIndex = i % (frameDimension);\n        /*jshint bitwise: true*/\n\n        data[3 * packIndex] = frame[frameIndex].pixelData[3 * inFrameIndex];\n        data[3 * packIndex + 1] = frame[frameIndex].pixelData[3 * inFrameIndex + 1];\n        data[3 * packIndex + 2] = frame[frameIndex].pixelData[3 * inFrameIndex + 2];\n        packIndex++;\n\n      }\n      packed.textureType = THREE.RGBFormat;\n      packed.data = data;\n    }\n\n    return packed;\n\n  }\n\n  static worldToData(stack, worldCoordinates) {\n    let dataCoordinate = new THREE.Vector3()\n      .copy(worldCoordinates)\n      .applyMatrix4(stack._lps2IJK);\n\n    // same rounding in the shaders\n    dataCoordinate.addScalar(0.5).floor();\n\n    return dataCoordinate;\n  }\n\n  worldCenter() {\n    let center = this._halfDimensionsIJK.clone().addScalar(0.5)\n      .applyMatrix4(this._ijk2LPS);\n    return center;\n  }\n\n  worldBoundingBox() {\n    let bbox = [\n      Number.MAX_VALUE, Number.MIN_VALUE,\n      Number.MAX_VALUE, Number.MIN_VALUE,\n      Number.MAX_VALUE, Number.MIN_VALUE\n    ];\n\n    for (let i = 0; i <= this._dimensionsIJK.x; i += this._dimensionsIJK.x) {\n      for (let j = 0; j <= this._dimensionsIJK.y; j += this._dimensionsIJK.y) {\n        for (let k = 0; k <= this._dimensionsIJK.z; k += this._dimensionsIJK.z) {\n          let world = new THREE.Vector3(i, j, k).applyMatrix4(this._ijk2LPS);\n          bbox = [\n            Math.min(bbox[0], world.x), Math.max(bbox[1], world.x), // x min/max\n            Math.min(bbox[2], world.y), Math.max(bbox[3], world.y),\n            Math.min(bbox[4], world.z), Math.max(bbox[5], world.z)\n            ];\n        }\n      }\n    }\n\n    return bbox;\n  }\n\n  AABBox() {\n    let world0 = new THREE.Vector3()\n      .applyMatrix4(this._ijk2LPS)\n      .applyMatrix4(this._lps2AABB);\n\n    let world7 = this._dimensionsIJK.clone().addScalar(-0.5)\n      .applyMatrix4(this._ijk2LPS)\n      .applyMatrix4(this._lps2AABB);\n\n    let minBBox = new THREE.Vector3(\n      Math.abs(world0.x - world7.x),\n      Math.abs(world0.y - world7.y),\n      Math.abs(world0.z - world7.z)\n    );\n\n    return minBBox;\n  }\n\n  centerAABBox() {\n    let centerBBox = this.worldCenter();\n    centerBBox.applyMatrix4(this._lps2AABB);\n    return centerBBox;\n  }\n\n  static value(stack, ijkCoordinate) {\n    if (ijkCoordinate.z >= 0 && ijkCoordinate.z < stack._frame.length) {\n      return stack._frame[ijkCoordinate.z].value(\n        ijkCoordinate.x,\n        ijkCoordinate.y);\n    } else {\n      return null;\n    }\n  }\n\n  static valueRescaleSlopeIntercept(value, slope, intercept) {\n    return value * slope + intercept;\n  }\n\n  static indexInDimensions(index, dimensions) {\n    if (index.x >= 0 &&\n        index.y >= 0 &&\n        index.z >= 0 &&\n        index.x < dimensions.x &&\n        index.y < dimensions.y &&\n        index.z < dimensions.z) {\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _vector3FromArray(array, index) {\n    return new THREE.Vector3(\n      array[index],\n      array[index + 1],\n      array[index + 2]\n      );\n  }\n\n  _orderFrameOnDimensionIndicesArraySort(a, b) {\n\n    if ('dimensionIndexValues' in a && Object.prototype.toString.call(a.dimensionIndexValues) === '[object Array]' && 'dimensionIndexValues' in b && Object.prototype.toString.call(b.dimensionIndexValues) === '[object Array]') {\n      for (let i = 0; i < a.dimensionIndexValues.length; i++) {\n        if (parseInt(a.dimensionIndexValues[i], 10) > parseInt(b.dimensionIndexValues[i], 10)) {\n          return 1;\n        }\n        if (parseInt(a.dimensionIndexValues[i], 10) < parseInt(b.dimensionIndexValues[i], 10)) {\n          return -1;\n        }\n      }\n    } else {\n      window.console.log('One of the frames doesn\\'t have a dimensionIndexValues array.');\n      window.console.log(a);\n      window.console.log(b);\n    }\n\n    return 0;\n  }\n\n  _computeDistanceArrayMap(normal, frame) {\n    frame.dist = frame.imagePosition[0] * normal.x +\n      frame.imagePosition[1] * normal.y +\n      frame.imagePosition[2] * normal.z;\n    return frame;\n  }\n\n  _sortDistanceArraySort(a, b) {return a.dist - b.dist;}\n  _sortInstanceNumberArraySort(a, b) {return a.instanceNumber - b.instanceNumber;}\n  _sortSopInstanceUIDArraySort(a, b) {return a.sopInstanceUID - b.sopInstanceUID;}\n\n  set numberOfChannels(numberOfChannels) {\n    this._numberOfChannels = numberOfChannels;\n  }\n\n  get numberOfChannels() {\n    return this._numberOfChannels;\n  }\n\n  set frame(frame) {\n    this._frame = frame;\n  }\n\n  get frame() {\n    return this._frame;\n  }\n\n  set prepared(prepared) {\n    this._prepared = prepared;\n  }\n\n  get prepared() {\n    return this._prepared;\n  }\n\n  set packed(packed) {\n    this._packed = packed;\n  }\n\n  get packed() {\n    return this._packed;\n  }\n\n  set dimensionsIJK(dimensionsIJK) {\n    this._dimensionsIJK = dimensionsIJK;\n  }\n\n  get dimensionsIJK() {\n    return this._dimensionsIJK;\n  }\n\n  set halfDimensionsIJK(halfDimensionsIJK) {\n    this._halfDimensionsIJK = halfDimensionsIJK;\n  }\n\n  get halfDimensionsIJK() {\n    return this._halfDimensionsIJK;\n  }\n\n  set ijk2LPS(ijk2LPS) {\n    this._ijk2LPS = ijk2LPS;\n  }\n\n  get ijk2LPS() {\n    return this._ijk2LPS;\n  }\n\n  set lps2IJK(lps2IJK) {\n    this._lps2IJK = lps2IJK;\n  }\n\n  get lps2IJK() {\n    return this._lps2IJK;\n  }\n\n  set lps2AABB(lps2AABB) {\n    this._lps2AABB = lps2AABB;\n  }\n\n  get lps2AABB() {\n    return this._lps2AABB;\n  }\n\n  set textureSize(textureSize) {\n    this._textureSize = textureSize;\n  }\n\n  get textureSize() {\n    return this._textureSize;\n  }\n\n  set textureType(textureType) {\n    this._textureType = textureType;\n  }\n\n  get textureType() {\n    return this._textureType;\n  }\n\n  set bitsAllocated(bitsAllocated) {\n    this._bitsAllocated = bitsAllocated;\n  }\n\n  get bitsAllocated() {\n    return this._bitsAllocated;\n  }\n\n  set rawData(rawData) {\n    this._rawData = rawData;\n  }\n\n  get rawData() {\n    return this._rawData;\n  }\n\n  get windowWidth() {\n    return this._windowWidth;\n  }\n\n  set windowWidth(windowWidth) {\n    this._windowWidth = windowWidth;\n  }\n\n  get windowCenter() {\n    return this._windowCenter;\n  }\n\n  set windowCenter(windowCenter) {\n    this._windowCenter = windowCenter;\n  }\n\n  get rescaleSlope() {\n    return this._rescaleSlope;\n  }\n\n  set rescaleSlope(rescaleSlope) {\n    this._rescaleSlope = rescaleSlope;\n  }\n\n  get rescaleIntercept() {\n    return this._rescaleIntercept;\n  }\n\n  set rescaleIntercept(rescaleIntercept) {\n    this._rescaleIntercept = rescaleIntercept;\n  }\n\n  get xCosine() {\n    return this._xCosine;\n  }\n\n  set xCosine(xCosine) {\n    this._xCosine = xCosine;\n  }\n\n  get yCosine() {\n    return this._yCosine;\n  }\n\n  set yCosine(yCosine) {\n    this._yCosine = yCosine;\n  }\n\n  get zCosine() {\n    return this._zCosine;\n  }\n\n  set zCosine(zCosine) {\n    this._zCosine = zCosine;\n  }\n\n  get minMax() {\n    return this._minMax;\n  }\n\n  set minMax(minMax) {\n    this._minMax = minMax;\n  }\n\n  get stackID() {\n    return this._stackID;\n  }\n\n  set stackID(stackID) {\n    this._stackID = stackID;\n  }\n\n  get pixelType() {\n    return this._pixelType;\n  }\n\n  set pixelType(pixelType) {\n    this._pixelType = pixelType;\n  }\n}\n","/**\n * @module models/voxel\n */\n\nexport default class ModelsVoxel {\n  constructor() {\n    this._id = -1;\n    this._worldCoordinates =  null;\n    this._dataCoordinates =  null;\n    this._screenCoordinates =  null;\n    this._value =  null;\n  }\n\n  set worldCoordinates(worldCoordinates){\n    this._worldCoordinates = worldCoordinates;\n  }\n\n  get worldCoordinates(){\n    return this._worldCoordinates;\n  }\n\n  set dataCoordinates(dataCoordinates){\n    this._dataCoordinates = dataCoordinates;\n  }\n\n  get dataCoordinates(){\n    return this._dataCoordinates;\n  }\n\n  set screenCoordinates(screenCoordinates){\n    this._screenCoordinates = screenCoordinates;\n  }\n\n  get screenCoordinates(){\n    return this._screenCoordinates;\n  }\n\n  set value(value){\n    this._value = value;\n  }\n\n  get value(){\n    return this._value;\n  }\n\n  set id(id){\n    this._id = id;\n  }\n\n  get id(){\n    return this._id;\n  }\n}","//ftp://medical.nema.org/MEDICAL/Dicom/2014c/output/chtml/part05/sect_6.2.html/\n\n// Slicer way to handle images\n// should follow it...\n // 897   if ( (this->IndexSeriesInstanceUIDs[k] != idxSeriesInstanceUID && this->IndexSeriesInstanceUIDs[k] >= 0 && idxSeriesInstanceUID >= 0) ||\n // 898        (this->IndexContentTime[k] != idxContentTime && this->IndexContentTime[k] >= 0 && idxContentTime >= 0) ||\n // 899        (this->IndexTriggerTime[k] != idxTriggerTime && this->IndexTriggerTime[k] >= 0 && idxTriggerTime >= 0) ||\n // 900        (this->IndexEchoNumbers[k] != idxEchoNumbers && this->IndexEchoNumbers[k] >= 0 && idxEchoNumbers >= 0) ||\n // 901        (this->IndexDiffusionGradientOrientation[k] != idxDiffusionGradientOrientation  && this->IndexDiffusionGradientOrientation[k] >= 0 && idxDiffusionGradientOrientation >= 0) ||\n // 902        (this->IndexSliceLocation[k] != idxSliceLocation && this->IndexSliceLocation[k] >= 0 && idxSliceLocation >= 0) ||\n // 903        (this->IndexImageOrientationPatient[k] != idxImageOrientationPatient && this->IndexImageOrientationPatient[k] >= 0 && idxImageOrientationPatient >= 0) )\n // 904     {\n // 905       continue;\n // 906     }\n\n/*** Imports ***/\nimport ParsersVolume from './parsers.volume';\n\nlet DicomParser  = require('dicom-parser');\nlet Jpeg         = require('jpeg-lossless-decoder-js');\nlet JpegBaseline = require('../../external/scripts/jpeg');\nlet Jpx          = require('../../external/scripts/jpx');\n\n/**\n * Dicom parser is a combination of utilities to get a VJS image from dicom files.\n *scripts\n * Relies on dcmjs, jquery, HTML5 fetch API, HTML5 promise API.\n *\n * @module parsers/dicom\n *\n * @param arrayBuffer {arraybuffer} - List of files to be parsed. It is urls from which\n * VJS.parsers.dicom can pull the data from.\n */\nexport default class ParsersDicom extends ParsersVolume {\n  constructor(data, id) {\n    super();\n\n    this._id = id;\n    \n    this._arrayBuffer = data.buffer;\n\n    let byteArray = new Uint8Array(this._arrayBuffer);\n\n    // catch error\n    // throw error if any!\n    this._dataSet = null;\n    try {\n      this._dataSet = DicomParser.parseDicom(byteArray);\n    }\n    catch (e) {\n      window.console.log(e);\n      throw 'parsers.dicom could not parse the file';\n    }\n  }\n\n  // image/frame specific\n  seriesInstanceUID() {\n    return this._dataSet.string('x0020000e');\n  }\n\n  studyInstanceUID() {\n    return this._dataSet.string('x0020000d');\n  }\n\n  modality() {\n    return this._dataSet.string('x00080060');\n  }\n\n  sopInstanceUID(frameIndex = 0) {\n    // 2005140f only works for siemens\n    // which is the real one?\n    let sopInstanceUID = this._findStringEverywhere('x2005140f', 'x00080018', frameIndex);\n    return sopInstanceUID;\n  }\n\n  transferSyntaxUID() {\n    return this._dataSet.string('x00020010');\n  }\n\n  photometricInterpretation() {\n    return this._dataSet.string('x00280004');\n  }\n\n  planarConfiguration() {\n    let planarConfiguration = this._dataSet.uint16('x00280006');\n\n    if (typeof planarConfiguration === 'undefined') {\n      planarConfiguration = null;\n    }\n\n    return planarConfiguration;\n  }\n\n  samplesPerPixel() {\n    return this._dataSet.uint16('x00280002');\n  }\n\n  numberOfFrames() {\n    let numberOfFrames = this._dataSet.intString('x00280008');\n\n    // need something smarter!\n    if (typeof numberOfFrames === 'undefined') {\n      numberOfFrames = null;\n    }\n\n    // make sure we return a number! (not a string!)\n    return numberOfFrames;\n  }\n\n  numberOfChannels() {\n    let numberOfChannels = 1;\n    let photometricInterpretation = this.photometricInterpretation();\n\n    if (!(photometricInterpretation !== 'RGB' &&\n        photometricInterpretation !== 'PALETTE COLOR' &&\n        photometricInterpretation !== 'YBR_FULL' &&\n        photometricInterpretation !== 'YBR_FULL_422' &&\n        photometricInterpretation !== 'YBR_PARTIAL_422' &&\n        photometricInterpretation !== 'YBR_PARTIAL_420' &&\n        photometricInterpretation !== 'YBR_RCT')) {\n      numberOfChannels = 3;\n    }\n\n    // make sure we return a number! (not a string!)\n    return numberOfChannels;\n  }\n\n  imageOrientation(frameIndex = 0) {\n    // expect frame index to start at 0!\n    let imageOrientation = this._findStringEverywhere('x00209116', 'x00200037', frameIndex);\n\n    // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n    if (imageOrientation) {\n      // make sure we return a number! (not a string!)\n      // might not need to split (floatString + index)\n      imageOrientation = imageOrientation.split('\\\\').map(Number);\n    }\n\n    return imageOrientation;\n  }\n\n  pixelAspectRatio() {\n    let pixelAspectRatio = [\n      this._dataSet.intString('x00280034', 0),\n      this._dataSet.intString('x00280034', 1)\n    ];\n\n    // need something smarter!\n    if (typeof pixelAspectRatio[0] === 'undefined') {\n      pixelAspectRatio = null;\n    }\n\n    // make sure we return a number! (not a string!)\n    return pixelAspectRatio;\n  }\n\n  imagePosition(frameIndex = 0) {\n    let imagePosition = this._findStringEverywhere('x00209113', 'x00200032', frameIndex);\n\n    // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n    if (imagePosition) {\n      // make sure we return a number! (not a string!)\n      imagePosition = imagePosition.split('\\\\').map(Number);\n    }\n\n    return imagePosition;\n  }\n\n  instanceNumber(frameIndex = 0) {\n    let instanceNumber = null;\n    // first look for frame!\n    // per frame functionnal group sequence\n    let perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      if (perFrameFunctionnalGroupSequence\n          .items[frameIndex].dataSet.elements.x2005140f) {\n        let planeOrientationSequence = perFrameFunctionnalGroupSequence\n            .items[frameIndex].dataSet.elements.x2005140f.items[0].dataSet;\n        instanceNumber = planeOrientationSequence.intString('x00200013');\n      } else {\n        instanceNumber = this._dataSet.intString('x00200013');\n\n        if (typeof instanceNumber === 'undefined') {\n          instanceNumber = null;\n        }\n      }\n\n    } else {\n      // should we default to undefined??\n      // default orientation\n      instanceNumber = this._dataSet.intString('x00200013');\n\n      if (typeof instanceNumber === 'undefined') {\n        instanceNumber = null;\n      }\n    }\n\n    return instanceNumber;\n  }\n\n  pixelSpacing(frameIndex = 0) {\n    // expect frame index to start at 0!\n    let pixelSpacing = this._findStringEverywhere('x00289110', 'x00280030', frameIndex);\n\n    // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n    // should we default to undefined??\n    if (pixelSpacing) {\n      // make sure we return array of numbers! (not strings!)\n      pixelSpacing = pixelSpacing.split('\\\\').map(Number);\n    }\n    return pixelSpacing;\n  }\n\n  rows(frameIndex = 0) {\n    let rows = this._dataSet.uint16('x00280010');\n\n    if (typeof rows === 'undefined') {\n      rows = null;\n      // print warning at least...\n    }\n\n    return rows;\n  }\n\n  columns(frameIndex = 0) {\n    let columns = this._dataSet.uint16('x00280011');\n\n    if (typeof columns === 'undefined') {\n      columns = null;\n      // print warning at least...\n    }\n\n    return columns;\n  }\n\n  pixelType(frameIndex = 0) {\n    // 0 integer, 1 float\n    // dicom only support integers\n    return 0;\n  }\n\n  pixelRepresentation(frameIndex = 0) {\n    let pixelRepresentation = this._dataSet.uint16('x00280103');\n    return pixelRepresentation;\n  }\n\n  bitsAllocated(frameIndex = 0) {\n    // expect frame index to start at 0!\n    let bitsAllocated = this._dataSet.uint16('x00280100');\n    return bitsAllocated;\n  }\n\n  highBit(frameIndex = 0) {\n    // expect frame index to start at 0!\n    let highBit = this._dataSet.uint16('x00280102');\n    return highBit;\n  }\n\n  rescaleIntercept(frameIndex = 0) {\n    return this._findFloatStringInFrameGroupSequence('x00289145', 'x00281052', frameIndex);\n  }\n\n  rescaleSlope(frameIndex = 0) {\n    return this._findFloatStringInFrameGroupSequence('x00289145', 'x00281053', frameIndex);\n  }\n\n  windowCenter(frameIndex = 0) {\n    return this._findFloatStringInFrameGroupSequence('x00289132', 'x00281050', frameIndex);\n  }\n\n  windowWidth(frameIndex = 0) {\n    return this._findFloatStringInFrameGroupSequence('x00289132', 'x00281051', frameIndex);\n  }\n\n  sliceThickness(frameIndex = 0) {\n    return this._findFloatStringInFrameGroupSequence('x00289110', 'x00180050', frameIndex);\n  }\n\n  dimensionIndexValues(frameIndex = 0) {\n    let dimensionIndexValues = [];\n\n    // try to get it from enhanced MR images\n    // per-frame functionnal group sequence\n    let perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      let philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n      let element = philipsPrivateSequence.elements.x00209157;\n      // /4 because UL\n      let nbValues = element.length / 4;\n      for (let i = 0; i < nbValues; i++) {\n        dimensionIndexValues.push(philipsPrivateSequence.uint32('x00209157', i));\n      }\n    } else {\n      dimensionIndexValues = null;\n    }\n\n    return dimensionIndexValues;\n  }\n\n  inStackPositionNumber(frameIndex = 0) {\n    let inStackPositionNumber = null;\n\n    // try to get it from enhanced MR images\n    // per-frame functionnal group sequence\n    let perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      let philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n      inStackPositionNumber = philipsPrivateSequence.uint32('x00209057');\n    } else {\n      inStackPositionNumber = null;\n    }\n\n    return inStackPositionNumber;\n  }\n\n  stackID(frameIndex = 0) {\n    let stackID = null;\n\n    // try to get it from enhanced MR images\n    // per-frame functionnal group sequence\n    let perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      let philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n      stackID = philipsPrivateSequence.intString('x00209056');\n    } else {\n      stackID = null;\n    }\n\n    return stackID;\n  }\n\n  extractPixelData(frameIndex = 0) {\n    // decompress\n    let decompressedData = this._decodePixelData(frameIndex);\n\n    let numberOfChannels = this.numberOfChannels();\n    if (numberOfChannels > 1) {\n      return this._convertColorSpace(decompressedData);\n    } else {\n      return decompressedData;\n    }\n  }\n\n  minMaxPixelData(pixelData = []) {\n    let minMax = [65535, -32768];\n    let numPixels = pixelData.length;\n    for (let index = 0; index < numPixels; index++) {\n      let spv = pixelData[index];\n      minMax[0] = Math.min(minMax[0], spv);\n      minMax[1] = Math.max(minMax[1], spv);\n    }\n\n    return minMax;\n  }\n\n  //\n  // private methods\n  //\n\n  _findInGroupSequence(sequence, subsequence, index) {\n    let functionalGroupSequence = this._dataSet.elements[sequence];\n\n    if (typeof functionalGroupSequence !== 'undefined') {\n      let inSequence = functionalGroupSequence.items[index].dataSet.elements[subsequence];\n\n      if (typeof inSequence !== 'undefined') {\n        return inSequence.items[0].dataSet;\n      }\n    }\n\n    return null;\n  }\n\n  _findStringInGroupSequence(sequence, subsequence, tag, index) {\n    // index = 0 if shared!!!\n    let dataSet = this._findInGroupSequence(sequence, subsequence, index);\n\n    if (dataSet !== null) {\n      return dataSet.string(tag);\n    }\n\n    return null;\n  }\n\n  _findStringInFrameGroupSequence(subsequence, tag, index) {\n    return this._findStringInGroupSequence('x52009229', subsequence, tag, 0) ||\n      this._findStringInGroupSequence('x52009230', subsequence, tag, index);\n  }\n\n  _findStringEverywhere(subsequence, tag, index) {\n    let targetString = this._findStringInFrameGroupSequence(subsequence, tag, index);\n\n    if (targetString === null) {\n      targetString = this._dataSet.string(tag);\n    }\n\n    if (typeof targetString === 'undefined') {\n      targetString = null;\n    }\n\n    return targetString;\n  }\n\n  _findFloatStringInGroupSequence(sequence, subsequence, tag, index) {\n\n    let dataInGroupSequence = this._dataSet.floatString(tag);\n\n    // try to get it from enhanced MR images\n    // per-frame functionnal group\n    if (typeof dataInGroupSequence === 'undefined') {\n      dataInGroupSequence = this._findInGroupSequence(sequence, subsequence, index);\n\n      if (dataInGroupSequence !== null) {\n        return dataInGroupSequence.floatString(tag);\n      } else {\n        return null;\n      }\n    }\n\n    return dataInGroupSequence;\n  }\n\n  _findFloatStringInFrameGroupSequence(subsequence, tag, index) {\n    return this._findFloatStringInGroupSequence('x52009229', subsequence, tag, 0) ||\n      this._findFloatStringInGroupSequence('x52009230', subsequence, tag, index);\n  }\n\n  _decodePixelData(frameIndex = 0) {\n    // if compressed..?\n    let transferSyntaxUID = this.transferSyntaxUID();\n\n    // find compression scheme\n    if (transferSyntaxUID === '1.2.840.10008.1.2.4.90' || // JPEG 2000 Lossless\n        transferSyntaxUID === '1.2.840.10008.1.2.4.91') { // JPEG 2000 Lossy\n      // JPEG 2000\n      return this._decodeJ2K(frameIndex);\n    } else if (transferSyntaxUID === '1.2.840.10008.1.2.4.57' || // JPEG Lossless, Nonhierarchical (Processes 14)\n       transferSyntaxUID === '1.2.840.10008.1.2.4.70') {       // JPEG Lossless, Nonhierarchical (Processes 14 [Selection 1])\n      // JPEG LOSSLESS\n      return this._decodeJPEGLossless(frameIndex);\n    } else if (transferSyntaxUID === '1.2.840.10008.1.2.4.50' || // JPEG Baseline lossy process 1 (8 bit)\n      transferSyntaxUID === '1.2.840.10008.1.2.4.51') {        // JPEG Baseline lossy process 2 & 4 (12 bit)\n      // JPEG Baseline\n      return this._decodeJPEGBaseline(frameIndex);\n    } else if (transferSyntaxUID === '1.2.840.10008.1.2' || // Implicit VR Little Endian\n      transferSyntaxUID === '1.2.840.10008.1.2.1' ||     // Explicit VR Little Endian\n      transferSyntaxUID === '1.2.840.10008.1.2.2') {      // Explicit VR Big Endian\n      return this._decodeUncompressed(frameIndex);\n    } else {\n      throw 'no decoder for transfer syntax ${transferSyntaxUID}';\n    }\n  }\n\n  _decodeJ2K(frameIndex = 0) {\n    let encodedPixelData = DicomParser.readEncapsulatedPixelData(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);\n    // let pixelDataElement = this._dataSet.elements.x7fe00010;\n    // let pixelData = new Uint8Array(this._dataSet.byteArray.buffer, pixelDataElement.dataOffset, pixelDataElement.length);\n    let jpxImage = new Jpx();\n    // https://github.com/OHIF/image-JPEG2000/issues/6\n    // It currently returns either Int16 or Uint16 based on whether the codestream is signed or not.\n    jpxImage.parse(encodedPixelData);\n\n    // let j2kWidth = jpxImage.width;\n    // let j2kHeight = jpxImage.height;\n\n    let componentsCount = jpxImage.componentsCount;\n    if (componentsCount !== 1) {\n      throw 'JPEG2000 decoder returned a componentCount of ${componentsCount}, when 1 is expected';\n    }\n    let tileCount = jpxImage.tiles.length;\n    if (tileCount !== 1) {\n      throw 'JPEG2000 decoder returned a tileCount of ${tileCount}, when 1 is expected';\n    }\n    let tileComponents = jpxImage.tiles[0];\n    let pixelData = tileComponents.items;\n\n    // window.console.log(j2kWidth, j2kHeight);\n\n    return pixelData;\n  }\n\n // from cornerstone\n  _decodeJPEGLossless(frameIndex = 0) {\n    let encodedPixelData = DicomParser.readEncapsulatedPixelData(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);\n    let pixelRepresentation = this.pixelRepresentation(frameIndex);\n    let bitsAllocated = this.bitsAllocated(frameIndex);\n    let byteOutput = bitsAllocated <= 8 ? 1 : 2;\n    let decoder = new Jpeg.lossless.Decoder();\n    let decompressedData = decoder.decode(encodedPixelData.buffer, encodedPixelData.byteOffset, encodedPixelData.length, byteOutput);\n    if (pixelRepresentation === 0) {\n      if (byteOutput === 2) {\n        return new Uint16Array(decompressedData.buffer);\n      } else {\n        // untested!\n        return new Uint8Array(decompressedData.buffer);\n      }\n    } else {\n      return new Int16Array(decompressedData.buffer);\n    }\n  }\n\n  _decodeJPEGBaseline(frameIndex = 0) {\n    let encodedPixelData = DicomParser.readEncapsulatedPixelData(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);\n    let rows = this.rows(frameIndex);\n    let columns = this.columns(frameIndex);\n    let bitsAllocated = this.bitsAllocated(frameIndex);\n    let jpegBaseline = new JpegBaseline();\n    jpegBaseline.parse(encodedPixelData);\n    if (bitsAllocated === 8) {\n      return jpegBaseline.getData(columns, rows);\n    } else if (bitsAllocated === 16) {\n      return jpegBaseline.getData16(columns, rows);\n    }\n  }\n\n  _decodeUncompressed(frameIndex = 0) {\n    let pixelRepresentation = this.pixelRepresentation(frameIndex);\n    let bitsAllocated = this.bitsAllocated(frameIndex);\n    let pixelDataElement = this._dataSet.elements.x7fe00010;\n    let pixelDataOffset = pixelDataElement.dataOffset;\n    let numberOfChannels = this.numberOfChannels();\n    let numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;\n    let frameOffset = 0;\n    let buffer = this._dataSet.byteArray.buffer;\n    \n    if (pixelRepresentation === 0 && bitsAllocated === 8) {\n\n      // unsigned 8 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels;\n      return new Uint8Array(buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 0 && bitsAllocated === 16) {\n\n      // unsigned 16 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;\n      return new Uint16Array(buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 1 && bitsAllocated === 16) {\n\n      // signed 16 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;\n      return new Int16Array(buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 0 && bitsAllocated === 32) {\n\n      // unsigned 32 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels * 4;\n      return new Uint32Array(buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 0 && bitsAllocated === 1) {\n      var newBuffer = new ArrayBuffer(numPixels);\n      var newArray = new Uint8Array(newBuffer);\n\n      frameOffset = pixelDataOffset + frameIndex * numPixels;\n      var index = 0;\n\n      var bitStart = frameIndex * numPixels;\n      var bitEnd   = frameIndex * numPixels + numPixels;\n\n      var byteStart = Math.floor( bitStart / 8);\n      var bitStartOffset = bitStart - byteStart * 8;\n      var byteEnd = Math.ceil( bitEnd/8 );\n\n      var targetBuffer = new Uint8Array(buffer, pixelDataOffset);\n\n      for(var i = byteStart; i<=byteEnd; i++){\n        while(bitStartOffset < 8){\n\n          switch(bitStartOffset){\n            case 0:\n              newArray[index] = targetBuffer[i] & 0x0001;\n              break;\n            case 1:\n              newArray[index] = targetBuffer[i] >>> 1 & 0x0001;\n              break;\n            case 2:\n              newArray[index] = targetBuffer[i] >>> 2 & 0x0001;\n              break;\n            case 3:\n              newArray[index] = targetBuffer[i] >>> 3 & 0x0001;\n              break;\n            case 4:\n              newArray[index] = targetBuffer[i] >>> 4 & 0x0001;\n              break;\n            case 5:\n              newArray[index] = targetBuffer[i] >>> 5 & 0x0001;\n              break;\n            case 6:\n              newArray[index] = targetBuffer[i] >>> 6 & 0x0001;\n              break;\n            case 7:\n              newArray[index] = targetBuffer[i] >>> 7 & 0x0001;\n              break;\n            default:\n              break;\n          }\n\n          bitStartOffset++;\n          index++;\n          // if return..\n          if(index >= numPixels){\n            return newArray;\n          }\n        }\n        bitStartOffset = 0;\n\n      }\n    }\n  }\n\n  _convertColorSpace(uncompressedData) {\n    let rgbData = null;\n    let photometricInterpretation = this.photometricInterpretation();\n    let planarConfiguration = this.planarConfiguration();\n\n    if (photometricInterpretation === 'RGB' &&\n        planarConfiguration === 0) {\n      // ALL GOOD, ALREADY ORDERED\n      // planar or non planar planarConfiguration\n      rgbData = uncompressedData;\n\n    } else if (photometricInterpretation === 'RGB' &&\n        planarConfiguration === 1) {\n      if (uncompressedData instanceof Int8Array) {\n        rgbData = new Int8Array(uncompressedData.length);\n      } else if (uncompressedData instanceof Uint8Array) {\n        rgbData = new Uint8Array(uncompressedData.length);\n      } else if (uncompressedData instanceof Int16Array) {\n        rgbData = new Int16Array(uncompressedData.length);\n      } else if (uncompressedData instanceof Uint16Array) {\n        rgbData = new Uint16Array(uncompressedData.length);\n      } else {\n        throw 'unsuported typed array: ${uncompressedData}';\n      }\n\n      var numPixels = uncompressedData.length / 3;\n      var rgbaIndex = 0;\n      var rIndex = 0;\n      var gIndex = numPixels;\n      var bIndex = numPixels * 2;\n      for (var i = 0; i < numPixels; i++) {\n        rgbData[rgbaIndex++] = uncompressedData[rIndex++]; // red\n        rgbData[rgbaIndex++] = uncompressedData[gIndex++]; // green\n        rgbData[rgbaIndex++] = uncompressedData[bIndex++]; // blue\n      }\n    } else if (photometricInterpretation === 'YBR_FULL') {\n      if (uncompressedData instanceof Int8Array) {\n        rgbData = new Int8Array(uncompressedData.length);\n      } else if (uncompressedData instanceof Uint8Array) {\n        rgbData = new Uint8Array(uncompressedData.length);\n      } else if (uncompressedData instanceof Int16Array) {\n        rgbData = new Int16Array(uncompressedData.length);\n      } else if (uncompressedData instanceof Uint16Array) {\n        rgbData = new Uint16Array(uncompressedData.length);\n      } else {\n        throw 'unsuported typed array: ${uncompressedData}';\n      }\n\n      // https://github.com/chafey/cornerstoneWADOImageLoader/blob/master/src/decodeYBRFull.js\n      let nPixels = uncompressedData.length / 3;\n      let ybrIndex = 0;\n      let rgbaIndex = 0;\n      for (let i = 0; i < nPixels; i++) {\n        let y = uncompressedData[ybrIndex++];\n        let cb = uncompressedData[ybrIndex++];\n        let cr = uncompressedData[ybrIndex++];\n        rgbData[rgbaIndex++] = y + 1.40200 * (cr - 128);// red\n        rgbData[rgbaIndex++] = y - 0.34414 * (cb - 128) - 0.71414 * (cr - 128); // green\n        rgbData[rgbaIndex++] = y + 1.77200 * (cb - 128); // blue\n        // rgbData[rgbaIndex++] = 255; //alpha\n      }\n    } else {\n      throw 'photometric interpolation not supported: ${photometricInterpretation}';\n    }\n\n    return rgbData;\n  }\n}\n\n// VJS.parsers.dicom.prototype.frameOfReferenceUID = function(imageJqueryDom) {\n//   // try to access frame of reference UID through its DICOM tag\n//   let seriesNumber = imageJqueryDom.find('[tag=\"00200052\"] Value').text();\n\n//   // if not available, assume we only have 1 frame\n//   if (seriesNumber === '') {\n//     seriesNumber = 1;\n//   }\n//   return seriesNumber;\n// };\n\n//\n// ENDIAN NESS NOT TAKEN CARE OF\n// http://stackoverflow.com/questions/5320439/how-do-i-swap-endian-ness-byte-order-of-a-letiable-in-javascript\n// http://www.barre.nom.fr/medical/samples/\n//\n//","import Dicom from './parsers.dicom';\nimport Nifti from './parsers.nifti';\nimport Nrrd  from './parsers.nrrd';\n\n/**\n * @module parsers\n */\n\nexport default {\n  Dicom,\n  Nifti,\n  Nrrd\n};","// use nifti-js and just parse header.???\n\n// Slicer way to handle images\n// should follow it...\n // 897   if ( (this->IndexSeriesInstanceUIDs[k] != idxSeriesInstanceUID && this->IndexSeriesInstanceUIDs[k] >= 0 && idxSeriesInstanceUID >= 0) ||\n // 898        (this->IndexContentTime[k] != idxContentTime && this->IndexContentTime[k] >= 0 && idxContentTime >= 0) ||\n // 899        (this->IndexTriggerTime[k] != idxTriggerTime && this->IndexTriggerTime[k] >= 0 && idxTriggerTime >= 0) ||\n // 900        (this->IndexEchoNumbers[k] != idxEchoNumbers && this->IndexEchoNumbers[k] >= 0 && idxEchoNumbers >= 0) ||\n // 901        (this->IndexDiffusionGradientOrientation[k] != idxDiffusionGradientOrientation  && this->IndexDiffusionGradientOrientation[k] >= 0 && idxDiffusionGradientOrientation >= 0) ||\n // 902        (this->IndexSliceLocation[k] != idxSliceLocation && this->IndexSliceLocation[k] >= 0 && idxSliceLocation >= 0) ||\n // 903        (this->IndexImageOrientationPatient[k] != idxImageOrientationPatient && this->IndexImageOrientationPatient[k] >= 0 && idxImageOrientationPatient >= 0) )\n // 904     {\n // 905       continue;\n // 906     }\n\n//http://brainder.org/2012/09/23/the-nifti-file-format/\n\n/*** Imports ***/\nlet NiftiReader = require('nifti-reader-js');\n\n/**\n * @module parsers/nifti\n */\nexport default class ParsersNifti{\n  constructor(data, id) {\n    /**\n      * @member\n      * @type {arraybuffer}\n    */\n    this._id = id;\n    this._arrayBuffer = data.buffer;\n    this._url = data.url;\n    this._dataSet = null;\n    this._niftiHeader = null;\n    this._niftiImage = null;\n    this._ordered = true;\n    this._orderedData = null;\n\n    if (NiftiReader.isNIFTI(this._arrayBuffer)) {\n      this._dataSet = NiftiReader.readHeader(this._arrayBuffer);\n      this._niftiImage = NiftiReader.readImage(this._dataSet, this._arrayBuffer);\n    } else {\n      throw 'parsers.nifti could not parse the file';\n    }\n  }\n\n  seriesInstanceUID() {\n    // use filename + timestamp..?\n    return this._url;\n  }\n\n  numberOfFrames() {\n    return this._dataSet.dims[3];\n  }\n\n  numberOfChannels() {\n    let numberOfChannels = 1;\n\n    // can dims[0] >= 5 and not multi channels with RGB datatypecode?\n\n    if (this._dataSet.dims[0] >= 5) {\n      numberOfChannels = this._dataSet.dims[5];\n      this._ordered = false;\n    } else if (this._dataSet.datatypeCode === 128) {\n      numberOfChannels = 3;\n    } else if (this._dataSet.datatypeCode === 2304) {\n      numberOfChannels = 4;\n    }\n\n    return numberOfChannels;\n  }\n\n  sopInstanceUID(frameIndex = 0) {\n    return frameIndex;\n  }\n\n  rows(frameIndex = 0) {\n    return this._dataSet.dims[2];\n  }\n\n  columns(frameIndex = 0) {\n    return this._dataSet.dims[1];\n  }\n\n  pixelType(frameIndex = 0) {\n        // papaya.volume.nifti.NIFTI_TYPE_UINT8           = 2;\n    // papaya.volume.nifti.NIFTI_TYPE_INT16           = 4;\n    // papaya.volume.nifti.NIFTI_TYPE_INT32           = 8;\n    // papaya.volume.nifti.NIFTI_TYPE_FLOAT32        = 16;\n    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX64      = 32;\n    // papaya.volume.nifti.NIFTI_TYPE_FLOAT64        = 64;\n    // papaya.volume.nifti.NIFTI_TYPE_RGB24         = 128;\n    // papaya.volume.nifti.NIFTI_TYPE_INT8          = 256;\n    // papaya.volume.nifti.NIFTI_TYPE_UINT16        = 512;\n    // papaya.volume.nifti.NIFTI_TYPE_UINT32        = 768;\n    // papaya.volume.nifti.NIFTI_TYPE_INT64        = 1024;\n    // papaya.volume.nifti.NIFTI_TYPE_UINT64       = 1280;\n    // papaya.volume.nifti.NIFTI_TYPE_FLOAT128     = 1536;\n    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX128   = 1792;\n    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX256   = 2048;\n\n    // 0 integer, 1 float\n\n    let pixelType = 0;\n    if(this._dataSet.datatypeCode === 16 ||\n      this._dataSet.datatypeCode === 64 ||\n      this._dataSet.datatypeCode === 1536){\n      pixelType = 1;\n    }\n    return pixelType;\n  }\n\n  bitsAllocated(frameIndex = 0) {\n    return this._dataSet.numBitsPerVoxel;\n  }\n\n  pixelSpacing(frameIndex = 0) {\n    return [\n      this._dataSet.pixDims[1],\n      this._dataSet.pixDims[2],\n      this._dataSet.pixDims[3]\n      ];\n  }\n\n  sliceThickness() {\n    // should be a string...\n    return null;//this._dataSet.pixDims[3].toString();\n  }\n\n  imageOrientation(frameIndex = 0) {\n    // window.console.log(this._dataSet);\n    // http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h\n    // http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c\n    if(this._dataSet.qform_code > 0) {\n      //https://github.com/Kitware/ITK/blob/master/Modules/IO/NIFTI/src/itkNiftiImageIO.cxx\n      var a = 0.0, b = this._dataSet.quatern_b, c = this._dataSet.quatern_c, d = this._dataSet.quatern_d;\n      // compute a\n      a = 1.0 - (b*b + c*c + d*d) ;\n      if( a < 0.0000001 ){                   /* special case */\n\n        a = 1.0 / Math.sqrt(b*b+c*c+d*d) ;\n        b *= a ; c *= a ; d *= a ;        /* normalize (b,c,d) vector */\n        a = 0.0;                       /* a = 0 ==> 180 degree rotation */\n\n      } else {\n\n        a = Math.sqrt(a) ;                     /* angle = 2*arccos(a) */\n\n      }\n\n      // let qfac = 1.0;\n      // if(this._dataSet.pixdim[0] < 0.0) {\n      //   qfac = -qfac;\n      // }\n\n      // window.console.log(a);\n      // window.console.log(b);\n      // window.console.log(c);\n      // window.console.log(d);\n\n\n       return [\n          (a*a+b*b-c*c-d*d), // -\n          2*(b*c-a*d),       // -\n          2*(b*d+a*c),       // -\n          2*(b*c+a*d),\n          a*a+c*c-b*b-d*d,\n          2*(c*d-a*b)\n        ];\n\n    }else if(this._dataSet.sform_code > 0) {  \n\n      var sx = this._dataSet.srow_x, sy = this._dataSet.srow_y, sz = this._dataSet.srow_z;\n      // fill IJKToRAS\n      //goog.vec.Mat4.setRowValues(IJKToRAS, 0, sx[0], sx[1], sx[2], sx[3]);\n      //goog.vec.Mat4.setRowValues(IJKToRAS, 1, sy[0], sy[1], sy[2], sy[3]);\n      //goog.vec.Mat4.setRowValues(IJKToRAS, 2, sz[0], sz[1], sz[2], sz[3]);\n\n    }\n    else if(this._dataSet.qform_code === 0) {\n\n      // fill IJKToRAS\n      //goog.vec.Mat4.setRowValues(IJKToRAS, 0, MRI.pixdim[1], 0, 0, 0);\n      //goog.vec.Mat4.setRowValues(IJKToRAS, 1, 0, MRI.pixdim[2], 0, 0);\n      //goog.vec.Mat4.setRowValues(IJKToRAS, 2, 0, 0, MRI.pixdim[3], 0);\n\n    }\n    return [1, 0, 0, 0, 1, 0];\n  }\n\n  imagePosition(frameIndex = 0) {\n    // qoffset is RAS\n    return [\n      -this._dataSet.qoffset_x,\n      -this._dataSet.qoffset_y,\n      this._dataSet.qoffset_z\n    ];\n  }\n\n  dimensionIndexValues(frameIndex = 0) {\n    return null;\n  }\n\n  instanceNumber(frameIndex = 0) {\n    return frameIndex;\n  }\n\n  windowCenter(frameIndex = 0) {\n    // calc min and calc max\n    return null;\n  }\n\n  windowWidth(frameIndex = 0) {\n    // calc min and calc max\n    return null;\n  }\n\n  rescaleSlope(frameIndex = 0) {\n    return this._dataSet.scl_slope;\n  }\n\n  rescaleIntercept(frameIndex = 0) {\n    return this._dataSet.scl_intercept;\n  }\n\n  minMaxPixelData(pixelData = []) {\n    let minMax = [65535, -32768];\n    let numPixels = pixelData.length;\n    for (let index = 0; index < numPixels; index++) {\n      let spv = pixelData[index];\n      minMax[0] = Math.min(minMax[0], spv);\n      minMax[1] = Math.max(minMax[1], spv);\n    }\n\n    return minMax;\n  }\n\n  extractPixelData(frameIndex = 0) {\n    return this._decompressUncompressed(frameIndex);\n    //let buffer = this._dataSet.imageData;\n    // if (this._dataSet.compressed) {\n    // let buffer = this._dataSet.rawData[0];\n    // try {\n    //   let data = pako.inflate(new Uint8Array(buffer));\n    //   buffer = data.buffer;\n    // } catch (err) {\n    //   console.log(err);\n    // }\n\n    //window.console.log(buffer);\n    // }\n\n    // is it compressed?\n    // yes/no\n\n    //     try {\n    //   var result = pako.inflate(compressed);\n    // } catch (err) {\n    //   console.log(err);\n    // }\n\n    // window.console.log(this);\n  }\n\n  _decompressUncompressed(frameIndex = 0) {\n    // papaya.volume.nifti.NIFTI_TYPE_UINT8           = 2;\n    // papaya.volume.nifti.NIFTI_TYPE_INT16           = 4;\n    // papaya.volume.nifti.NIFTI_TYPE_INT32           = 8;\n    // papaya.volume.nifti.NIFTI_TYPE_FLOAT32        = 16;\n    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX64      = 32;\n    // papaya.volume.nifti.NIFTI_TYPE_FLOAT64        = 64;\n    // papaya.volume.nifti.NIFTI_TYPE_RGB24         = 128;\n    // papaya.volume.nifti.NIFTI_TYPE_INT8          = 256;\n    // papaya.volume.nifti.NIFTI_TYPE_UINT16        = 512;\n    // papaya.volume.nifti.NIFTI_TYPE_UINT32        = 768;\n    // papaya.volume.nifti.NIFTI_TYPE_INT64        = 1024;\n    // papaya.volume.nifti.NIFTI_TYPE_UINT64       = 1280;\n    // papaya.volume.nifti.NIFTI_TYPE_FLOAT128     = 1536;\n    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX128   = 1792;\n    // papaya.volume.nifti.NIFTI_TYPE_COMPLEX256   = 2048;\n\n    let numberOfChannels = this.numberOfChannels();\n    let numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;\n    let frameOffset = frameIndex * numPixels;\n    let buffer = this._niftiImage;\n\n    // use bits allocated && pixel reprensentation too\n\n    if (!this._ordered && this._orderedData === null) {\n      // order then\n      this._reorderData();\n    }\n\n    if (this._orderedData !== null) {\n      // just a slice...\n      return this._orderedData.slice(frameOffset, frameOffset + numPixels);\n\n    } else if (this._dataSet.datatypeCode === 2) {\n      // unsigned 8 bit\n      return new Uint8Array(buffer, frameOffset, numPixels);\n\n    } else if (this._dataSet.datatypeCode === 256) {\n      // signed 8 bit\n      return new Int8Array(buffer, frameOffset, numPixels);\n\n    } else if (this._dataSet.datatypeCode === 512) {\n      // unsigned 16 bit\n      frameOffset = frameOffset * 2;\n      return new Uint16Array(buffer, frameOffset, numPixels);\n\n    } else if (this._dataSet.datatypeCode === 4) {\n      // signed 16 bit\n      frameOffset = frameOffset * 2;\n      return new Int16Array(buffer, frameOffset, numPixels);\n\n    }  else if (this._dataSet.datatypeCode === 16) {\n\n      // float 32 bit\n      frameOffset = frameOffset * 4;\n      return new Float32Array(buffer, frameOffset, numPixels);\n\n    }\n  }\n\n  _reorderData() {\n    window.console.log('re-order');\n    let numberOfChannels = this.numberOfChannels();\n    let numPixels = this.rows() * this.columns() * numberOfChannels;\n    let buffer = this._niftiImage;\n\n    let totalNumPixels = numPixels * this.numberOfFrames();\n    let tmp = null;\n    this._orderedData = null;\n\n    if (this._dataSet.datatypeCode === 2) {\n      // unsigned 8 bit\n      tmp = new Uint8Array(buffer, 0, totalNumPixels);\n      this._orderedData = new Uint8Array(tmp.length);\n\n    } else if (this._dataSet.datatypeCode === 256) {\n      // signed 8 bit\n      tmp = new Int8Array(buffer, 0, totalNumPixels);\n      this._orderedData = new Int8Array(tmp.length);\n\n    } else if (this._dataSet.datatypeCode === 512) {\n      tmp = new Uint16Array(buffer, 0, totalNumPixels);\n      this._orderedData = new Uint16Array(tmp.length);\n\n    } else if (this._dataSet.datatypeCode === 4) {\n      tmp = new Int16Array(buffer, 0, totalNumPixels);\n      this._orderedData = new Int16Array(tmp.length);\n\n    }  else if (this._dataSet.datatypeCode === 16) {\n      tmp = new Float32Array(buffer, 0, totalNumPixels);\n      this._orderedData = new Float32Array(tmp.length);\n\n    }\n\n    // re-order pixels...\n    var numPixels2 = tmp.length / 3;\n    var rgbaIndex = 0;\n    var rIndex = 0;\n    var gIndex = numPixels2;\n    var bIndex = numPixels2 * 2;\n    for (var i = 0; i < numPixels2; i++) {\n      this._orderedData[rgbaIndex++] = tmp[rIndex++]; // red\n      this._orderedData[rgbaIndex++] = tmp[gIndex++]; // green\n      this._orderedData[rgbaIndex++] = tmp[bIndex++]; // blue\n    }\n\n    this._ordered = true;\n  }\n}\n","// use nifti-js and just parse header.???\n\n// Slicer way to handle images\n// should follow it...\n // 897   if ( (this->IndexSeriesInstanceUIDs[k] != idxSeriesInstanceUID && this->IndexSeriesInstanceUIDs[k] >= 0 && idxSeriesInstanceUID >= 0) ||\n // 898        (this->IndexContentTime[k] != idxContentTime && this->IndexContentTime[k] >= 0 && idxContentTime >= 0) ||\n // 899        (this->IndexTriggerTime[k] != idxTriggerTime && this->IndexTriggerTime[k] >= 0 && idxTriggerTime >= 0) ||\n // 900        (this->IndexEchoNumbers[k] != idxEchoNumbers && this->IndexEchoNumbers[k] >= 0 && idxEchoNumbers >= 0) ||\n // 901        (this->IndexDiffusionGradientOrientation[k] != idxDiffusionGradientOrientation  && this->IndexDiffusionGradientOrientation[k] >= 0 && idxDiffusionGradientOrientation >= 0) ||\n // 902        (this->IndexSliceLocation[k] != idxSliceLocation && this->IndexSliceLocation[k] >= 0 && idxSliceLocation >= 0) ||\n // 903        (this->IndexImageOrientationPatient[k] != idxImageOrientationPatient && this->IndexImageOrientationPatient[k] >= 0 && idxImageOrientationPatient >= 0) )\n // 904     {\n // 905       continue;\n // 906     }\n\n//http://brainder.org/2012/09/23/the-nifti-file-format/\n\n/*** Imports ***/\nlet pako = require('pako');\nlet NrrdReader = require('nrrd-js');\n\n/**\n * @module parsers/nifti\n */\nexport default class ParsersNifti{\n  constructor(data, id) {\n    /**\n      * @member\n      * @type {arraybuffer}\n    */\n    this._id = id;\n    this._arrayBuffer = data.buffer;\n    this._url = data.url;\n    this._dataSet = null;\n    this._unpackedData = null;\n    try{\n      this._dataSet = NrrdReader.parse(this._arrayBuffer);\n    }\n    catch(error){\n      window.console.log('ooops... :(');\n    }\n\n    window.console.log(this._dataSet);\n  }\n\n  seriesInstanceUID() {\n    // use filename + timestamp..?\n    return this._url;\n  }\n\n  numberOfFrames() {\n    return this._dataSet.sizes[2];\n  }\n\n  numberOfChannels() {\n    let numberOfChannels = 1;\n    return numberOfChannels;\n  }\n\n  sopInstanceUID(frameIndex = 0) {\n    return frameIndex;\n  }\n\n  rows(frameIndex = 0) {\n    return this._dataSet.sizes[1];\n  }\n\n  columns(frameIndex = 0) {\n    return this._dataSet.sizes[0];\n  }\n\n  pixelType(frameIndex = 0) {\n    // 0 - int\n    // 1 - float\n    let pixelType = 0;\n    if(this._dataSet.type === 'float'){\n      pixelType = 1;\n    }\n    return pixelType;\n  }\n\n  bitsAllocated(frameIndex = 0) {\n    let bitsAllocated = 1;\n\n    if(this._dataSet.type === 'int8' ||\n       this._dataSet.type === 'uint8' ||\n       this._dataSet.type === 'char'){\n      bitsAllocated = 8;\n    }\n    else if(this._dataSet.type === 'int16' ||\n      this._dataSet.type === 'uint16' ||\n      this._dataSet.type === 'short'){\n      bitsAllocated = 16;\n    }\n    else if(this._dataSet.type === 'int32' ||\n      this._dataSet.type === 'uint32' ||\n      this._dataSet.type === 'float'){\n      bitsAllocated = 32;\n    }\n\n    return bitsAllocated;\n  }\n\n  pixelSpacing(frameIndex = 0) {\n    let x = new THREE.Vector3(\n      this._dataSet.spaceDirections[0][0],\n      this._dataSet.spaceDirections[0][1],\n      this._dataSet.spaceDirections[0][2]);\n\n    let y = new THREE.Vector3(\n      this._dataSet.spaceDirections[1][0],\n      this._dataSet.spaceDirections[1][1],\n      this._dataSet.spaceDirections[1][2]);\n\n    let z = new THREE.Vector3(\n      this._dataSet.spaceDirections[2][0],\n      this._dataSet.spaceDirections[2][1],\n      this._dataSet.spaceDirections[2][2]);\n\n    return [x.length(), y.length(), z.length()];\n  }\n\n  sliceThickness() {\n    // should be a string...\n    return null;//this._dataSet.pixDims[3].toString();\n  }\n\n  imageOrientation(frameIndex = 0) {\n    let x = new THREE.Vector3(\n      this._dataSet.spaceDirections[0][0],\n      this._dataSet.spaceDirections[0][1],\n      this._dataSet.spaceDirections[0][2]);\n    x.normalize();\n\n    let y = new THREE.Vector3(\n      this._dataSet.spaceDirections[1][0],\n      this._dataSet.spaceDirections[1][1],\n      this._dataSet.spaceDirections[1][2]);\n    y.normalize();\n\n    return [\n      x.x, x.y, x.z,\n      y.x, y.y, y.z\n      ];\n  }\n\n  imagePosition(frameIndex = 0) {\n    return [\n      this._dataSet.spaceOrigin[0],\n      this._dataSet.spaceOrigin[1],\n      this._dataSet.spaceOrigin[2]\n    ];\n  }\n\n  dimensionIndexValues(frameIndex = 0) {\n    return null;\n  }\n\n  instanceNumber(frameIndex = 0) {\n    return frameIndex;\n  }\n\n  windowCenter(frameIndex = 0) {\n    // calc min and calc max\n    return null;\n  }\n\n  windowWidth(frameIndex = 0) {\n    // calc min and calc max\n    return null;\n  }\n\n  rescaleSlope(frameIndex = 0) {\n    return 1;//this._dataSet.scl_slope;\n  }\n\n  rescaleIntercept(frameIndex = 0) {\n    return 0;//this._dataSet.scl_intercept;\n  }\n\n  minMaxPixelData(pixelData = []) {\n    let minMax = [65535, -32768];\n    let numPixels = pixelData.length;\n    for (let index = 0; index < numPixels; index++) {\n      let spv = pixelData[index];\n      minMax[0] = Math.min(minMax[0], spv);\n      minMax[1] = Math.max(minMax[1], spv);\n    }\n\n    return minMax;\n  }\n\n  extractPixelData(frameIndex = 0) {\n    return this._decompressUncompressed(frameIndex);\n  }\n\n  _decompressUncompressed(frameIndex = 0) {\n    let buffer = this._dataSet.buffer;\n    let numberOfChannels = this.numberOfChannels();\n    let numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;\n    let frameOffset = frameIndex * numPixels;\n\n    // unpack data if needed\n    if (this._unpackedData === null &&\n      this._dataSet.encoding === 'gzip') {\n      let unpackedData = pako.inflate(this._dataSet.buffer);\n      this._unpackedData = unpackedData.buffer;\n      buffer = this._unpackedData;\n    }\n    else if(this._dataSet.encoding === 'gzip'){\n      buffer = this._unpackedData;\n    }\n\n    if(this._dataSet.type === 'int8' ||\n       this._dataSet.type === 'char'){\n      frameOffset = frameOffset;\n      return new Int8Array(buffer, frameOffset, numPixels);\n    }\n    else if(this._dataSet.type === 'uint8'){\n      frameOffset = frameOffset;\n      return new Uint8Array(buffer, frameOffset, numPixels);\n    }\n    else if(this._dataSet.type === 'int16' ||\n       this._dataSet.type === 'short'){\n      frameOffset = frameOffset * 2;\n      return new Int16Array(buffer, frameOffset, numPixels);\n    }\n    else if(this._dataSet.type === 'uint16'){\n      frameOffset = frameOffset * 2;\n      return new Uint16Array(buffer, frameOffset, numPixels);\n    }\n    else if(this._dataSet.type === 'int32'){\n      frameOffset = frameOffset * 4;\n      return new Int32Array(buffer, frameOffset, numPixels);\n    }\n    else if(this._dataSet.type === 'uint32' ){\n      frameOffset = frameOffset * 4;\n      return new Uint32Array(buffer, frameOffset, numPixels);\n    }\n    else if(this._dataSet.type === 'float'){\n      frameOffset = frameOffset * 4;\n      return new Float32Array(buffer, frameOffset, numPixels);\n    }\n\n  }\n}\n","/**\n * @module parsers/volume\n */\nexport default class ParsersVolume {\n\n  _decompressUncompressed(){\n    \n  }\n}\n","\n/**\n * @module shaders/data\n */\nexport default class ShadersData {\n  static uniforms(){\n    return {\n      'uTextureSize': {\n        type: 'i',\n        value: 0\n      },\n      'uTextureContainer': {\n        type: 'tv',\n        value: []\n      },\n      'uDataDimensions': {\n        type: 'iv',\n        value: [0, 0, 0]\n      },\n      'uWorldToData': {\n        type: 'm4',\n        value: new THREE.Matrix4()\n      },\n      'uWindowCenterWidth': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uRescaleSlopeIntercept': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uNumberOfChannels': {\n        type: 'i',\n        value: 1\n      },\n      'uBitsAllocated': {\n        type: 'i',\n        value: 8\n      },\n      'uInvert': {\n        type: 'i',\n        value: 0\n      },\n      'uLut': {\n        type: 'i',\n        value: 0\n      },\n      'uTextureLUT':{\n        type: 't',\n        value: []\n      },\n      'uPixelType': {\n        type: 'i',\n        value: 0\n      }\n    };\n  }\n}","/*** Imports ***/\nlet glslify =  require('glslify');\n\nimport DataUniforms from './shaders.data.js';\nlet DataVertex   = glslify('./shaders.data.vert');\nlet DataFragment = glslify('./shaders.data.frag');\n\nimport RaycastingUniforms from './shaders.raycasting.js';\nlet RaycastingFirstpassFragment  = glslify('./shaders.raycasting.firstPass.frag');\nlet RaycastingSecondpassVertex   = glslify('./shaders.raycasting.secondPass.vert');\nlet RaycastingSecondpassFragment = glslify('./shaders.raycasting.secondPass.frag');\nlet RaycastingSinglepassVertex   = glslify('./shaders.raycasting.singlePass.vert');\nlet RaycastingSinglepassFragment = glslify('./shaders.raycasting.singlePass.frag');\n\n/**\n * @module shaders\n */\n\nexport default {\n  \n  DataUniforms,\n  DataVertex,\n  DataFragment,\n\n  RaycastingUniforms,\n  RaycastingFirstpassFragment,\n  RaycastingSecondpassVertex,\n  RaycastingSecondpassFragment\n};\n","\n/**\n * @module shaders/raycasting\n */\n\nexport default class ShadersRaycating {\n  static singlePassUniforms(){\n    return {\n      'uWorldBBox': {\n        type: 'fv1',\n        value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n      },\n      'uTextureSize': {\n        type: 'i',\n        value: 0\n      },\n      'uTextureContainer': {\n        type: 'tv',\n        value: []\n      },\n      'uDataDimensions': {\n        type: 'iv',\n        value: [0, 0, 0]\n      },\n      'uWorldToData': {\n        type: 'm4',\n        value: new THREE.Matrix4()\n      },\n      'uWindowCenterWidth': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uRescaleSlopeIntercept': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uNumberOfChannels': {\n        type: 'i',\n        value: 1\n      },\n      'uBitsAllocated': {\n        type: 'i',\n        value: 8\n      },\n      'uLut': {\n        type: 'i',\n        value: 0\n      },\n      'uTextureLUT':{\n        type: 't',\n        value: []\n      },\n      'uSteps': {\n        type: 'i',\n        value: 256\n      },\n      'uAlphaCorrection':{\n        type: 'f',\n        value: 0.5\n      },\n      'uFrequence':{\n        type: 'f',\n        value: 0.0\n      },\n      'uAmplitude':{\n        type: 'f',\n        value: 0.0\n      },\n      'uPixelType': {\n        type: 'i',\n        value: 0\n      }\n    };\n  }\n\n  static firstPassUniforms() {\n    return {\n      'uWorldBBox': {\n        type: 'fv1',\n        value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n      }\n    };\n  }\n\n  static secondPassUniforms() {\n    return {\n      'uTextureSize': {\n        type: 'i',\n        value: 0\n      },\n      'uTextureContainer': {\n        type: 'tv',\n        value: []\n      },\n      'uDataDimensions': {\n        type: 'iv',\n        value: [0, 0, 0]\n      },\n      'uWorldToData': {\n        type: 'm4',\n        value: new THREE.Matrix4()\n      },\n      'uWindowCenterWidth': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uRescaleSlopeIntercept': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uNumberOfChannels': {\n        type: 'i',\n        value: 1\n      },\n      'uBitsAllocated': {\n        type: 'i',\n        value: 8\n      },\n      'uTextureBack': {\n        type: 't',\n        value: null\n      },\n      'uWorldBBox': {\n        type: 'fv1',\n        value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n      },\n      'uSteps': {\n        type: 'i',\n        value: 128\n      },\n      'uLut': {\n        type: 'i',\n        value: 0\n      },\n      'uTextureLUT':{\n        type: 't',\n        value: []\n      },\n      'uAlphaCorrection':{\n        type: 'f',\n        value: 1.0\n      },\n      'uFrequence':{\n        type: 'f',\n        value: 0.0\n      },\n      'uAmplitude':{\n        type: 'f',\n        value: 0.0\n      },\n      'uPixelType': {\n        type: 'i',\n        value: 0\n      }\n    };\n\n  }\n\n}\n","import VoxelProbe from './widgets.voxelProbe';\n\n/**\n * @module widgets\n */\n\nexport default {\n  VoxelProbe\n};","/*** Imports ***/\nimport HelpersVoxel from '../../src/helpers/helpers.voxel';\n\n/**\n * @module widgets/voxelProbe\n */\n\nexport default class WidgetsVoxelProbe extends THREE.Object3D{\n  constructor(stack, targetMesh, controls, camera, container) {\n    super();\n\n    this._enabled = true;\n\n    this._targetMesh = targetMesh;\n    this._stack = stack;\n    this._container = container;\n    this._controls = controls;\n    this._camera = camera;\n    this._mouse = {\n      x: 0,\n      y: 0,\n      screenX: 0,\n      screenY: 0\n    };\n    // show only voxels that interesect the mesh\n    this._showFrame = -1;\n\n    this._raycaster = new THREE.Raycaster();\n    this._draggingMouse = false;\n    this._active = -1;\n    this._hover = -1;\n    this._closest = null;\n    this._selected = [];\n\n    this._voxels = [];\n    this._current = new HelpersVoxel(stack.worldCenter(), stack);\n    this._current._showVoxel =  true;\n    this._current._showDomSVG =  true;\n    this._current._showDomMeasurements =  true;\n\n    this.add(this._current);\n\n    // event listeners\n    this._container.addEventListener('mousedown', this.onMouseDown.bind(this), false);\n    this._container.addEventListener('mouseup', this.onMouseUp.bind(this), false);\n    this._container.addEventListener('mousemove', this.onMouseMove.bind(this), false);\n\n    this._container.addEventListener('mousewheel', this.onMouseMove.bind(this), false);\n    this._container.addEventListener('DOMMouseScroll', this.onMouseMove.bind(this), false); // firefox\n\n    window.addEventListener('keypress', this.onKeyPress.bind(this), false);\n\n    this._defaultColor = '0x00B0FF';\n    this._activeColor = '0xFFEB3B';\n    this._hoverColor = '0xF50057';\n    this._selectedColor = '0x76FF03';\n\n    this._showVoxel = true;\n    this._showDomSVG = true;\n    this._showDomMeasurements = true;\n  }\n\n  isEnabled() {\n\n  }\n\n  onKeyPress(event) {\n    if (this._enabled === false) {\n      return;\n    }\n\n    if (event.keyCode === 100) {\n      this.deleteAllSelected();\n    }\n  }\n\n  onMouseMove() {\n\n    if (this._enabled === false) {\n      return;\n    }\n\n    this.updateRaycaster(this._raycaster, event, this._container);\n\n    this._draggingMouse  = true;\n\n    this.update();\n  }\n\n  onMouseDown(event) {\n\n    if (this._enabled === false) {\n      return;\n    }\n\n    this.updateRaycaster(this._raycaster, event, this._container);\n\n    this._draggingMouse  = false;\n  \n    this.activateVoxel();\n  }\n\n  onMouseUp(event) {\n\n    if (this._enabled === false) {\n      return;\n    }\n\n    this.updateRaycaster(this._raycaster, event, this._container);\n\n    if (this._draggingMouse === false) {\n      if (this._active === -1) {\n        // create voxel\n        this.createVoxel();\n      } else {\n        // select / unselect voxel\n        this.selectVoxel();\n        // disactivate voxel\n        this.activateVoxel();\n      }\n    } else {\n      if (this._active >= 0) {\n        this.activateVoxel();\n      }\n    }\n  }\n\n  updateRaycaster(raycaster, event, container) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    this._mouse = {\n      x: (event.clientX / container.offsetWidth) * 2 - 1,\n      y: -(event.clientY / container.offsetHeight) * 2 + 1,\n      screenX: event.clientX,\n      screenY: event.clientY\n    };\n    // update the raycaster\n    raycaster.setFromCamera(this._mouse, this._camera);\n  }\n\n  updateColor(voxel) {\n    if (voxel._active) {\n      voxel.color = this._activeColor;\n    } else if (voxel.hover) {\n      voxel.color = this._hoverColor;\n    } else if (voxel.selected) {\n      voxel.color = this._selectedColor;\n    } else {\n      voxel.color = this._defaultColor;\n    }\n  }\n\n  deleteAllSelected() {\n    let i = this._voxels.length;\n    while (i--) {\n      let match = this._selected.indexOf(i);\n      if (match >= 0) {\n\n        // selected && active\n        if (this._active === i) {\n          this._active = -1;\n        }\n\n        this.remove(this._voxels[i]);\n        this._voxels[i].removeTest();\n        this._voxels.splice(i, 1);\n      }\n    }\n\n    this._selected = [];\n    this._closest = null;\n  }\n\n  selectVoxel() {\n    // select/unselect the active voxel\n    let selIndex = this._selected.indexOf(this._active);\n    if (selIndex === -1) {\n      this._selected.push(this._active);\n      this._voxels[this._active].selected = true;\n      this.updateColor(this._voxels[this._active]);\n    } else {\n      this._selected.splice(selIndex, 1);\n      this._voxels[this._active].selected = false;\n    }\n  }\n\n  activateVoxel() {\n    if (this._active === -1) {\n      // Look for intersection against target mesh\n      let intersects = this._raycaster.intersectObject(this._targetMesh);\n\n      if (intersects.length > 0) {\n        if (this._hover >= 0 ||\n           (this._closest !== null && this._voxels[this._closest].distance < 10)) {\n          let index = Math.max(this._hover, this._closest);\n          // Active voxel\n          this._voxels[index]._active = true;\n          this.updateColor(this._voxels[index]);\n          this._active = index;\n          // Disable controls\n          this._controls.enabled = false;\n        }\n      }\n\n    } else {\n      // change color + select it and nothing else selected\n      this._voxels[this._active].active = false;\n      this._active = -1;\n      // Enable controls\n      this._controls.enabled = true;\n    }\n  }\n\n  createVoxel() {\n    if (this._hover >= 0) {\n      return;\n    }\n\n    // Look for intersection against target mesh\n    let intersects = this._raycaster.intersectObject(this._targetMesh);\n\n    if (intersects.length > 0) {\n      // create voxel helper\n      let helpersVoxel = new HelpersVoxel(intersects[0].point, this._stack);\n      this.add(helpersVoxel);\n\n      // push it\n      this._voxels.push(helpersVoxel);\n\n      // add hover colors\n      helpersVoxel.updateVoxelScreenCoordinates(this._camera, this._container);\n      this.hoverVoxel(helpersVoxel,\n          this._mouse,\n          this._current.voxel.dataCoordinates);\n      this.updateColor(helpersVoxel);\n      helpersVoxel.updateDom(this._container);\n\n      // show/hide mesh\n      helpersVoxel.showVoxel = this._showVoxel;\n      // show/hide dom stuff\n      helpersVoxel.showDomSVG = this._showDomSVG;\n      helpersVoxel.showDomMeasurements = this._showDomMeasurements;\n    }\n  }\n\n  update() {\n    // good to go\n    if (!this._targetMesh) {\n      return;\n    }\n\n    let intersects = this._raycaster.intersectObject(this._targetMesh);\n\n    if (intersects.length > 0) {\n      // modify world position with getter/setter\n      this._current.worldCoordinates = intersects[0].point;\n      this._current.updateVoxelScreenCoordinates(this._camera, this._container);\n      this.updateColor(this._current);\n      this._current.updateDom(this._container);\n      // show/hide mesh\n      this._current.showVoxel = this._showVoxel;\n      // show/hide dom stuff\n      this._current.showDomSVG = this._showDomSVG;\n      this._current.showDomMeasurements = this._showDomMeasurements;\n\n      //  if dragging a voxel\n      if (this._active >= 0) {\n        this._voxels[this._active].worldCoordinates = intersects[0].point;\n      }\n    }\n\n    // no geometry related updates\n    // just colors for hover, etc.\n    // and DOM\n    this.updateVoxels();\n  }\n\n  updateVoxels() {\n    let hover = -1;\n    let closest = null;\n\n    for (let i = 0; i < this._voxels.length; i++) {\n      // update voxel content\n      this._voxels[i].updateVoxelScreenCoordinates(this._camera, this._container);\n      // update hover status\n      this.hoverVoxel(this._voxels[i],\n          this._mouse,\n          this._current.voxel.dataCoordinates);\n      this.updateColor(this._voxels[i]);\n\n      // only works if slice is a frame...\n      // should test intersection of voxel with target mesh (i.e. plane, box, sphere, etc...)\n      // maybe use the raycasting somehow....\n      this.showOfIntersectsFrame(this._voxels[i], this._showFrame);\n      this._voxels[i].updateDom(this._container);\n\n      // hovering?\n      if (this._voxels[i].hover) {\n        hover = i;\n      }\n\n      // closest pixel to the mouse?\n      if (closest === null ||\n        this._voxels[i].distance < this._voxels[closest].distance) {\n        closest = i;\n      }\n\n      // show hide mesh\n      this._voxels[i].showVoxel = this._showVoxel;\n      // show/hide dom stuff\n      this._voxels[i].showDomSVG = this._showDomSVG;\n      this._voxels[i].showDomMeasurements = this._showDomMeasurements;\n    }\n\n    this._hover = hover;\n    this._closest = closest;\n  }\n\n  hoverVoxel(helpersVoxel, mouseScreenCoordinates, currentDataCoordinates) {\n    // update hover voxel\n    if (helpersVoxel.voxel.dataCoordinates.x === currentDataCoordinates.x &&\n        helpersVoxel.voxel.dataCoordinates.y === currentDataCoordinates.y &&\n        helpersVoxel.voxel.dataCoordinates.z === currentDataCoordinates.z) {\n      helpersVoxel.hover = true;\n    } else {\n      // update distance mouse/this._voxel\n      let dx = mouseScreenCoordinates.screenX - helpersVoxel.voxel.screenCoordinates.x;\n      let dy = mouseScreenCoordinates.screenY - helpersVoxel.voxel.screenCoordinates.y;\n      let distance =  Math.sqrt(dx * dx + dy * dy);\n      helpersVoxel.distance = distance;\n      if (distance >= 0 && distance < 10) {\n        helpersVoxel.hover = true;\n      } else {\n        helpersVoxel.hover = false;\n      }\n    }\n  }\n\n  showOfIntersectsFrame(voxelHelper, frameIndex) {\n    if (frameIndex === voxelHelper.voxel.dataCoordinates.z ||\n      frameIndex === -1) {\n      voxelHelper._showDomSVG =  true;\n      voxelHelper._showDomMeasurements =  true;\n    } else {\n      voxelHelper._showDomSVG =  false;\n      voxelHelper._showDomMeasurements =  false;\n    }\n  }\n\n  set defaultColor(defaultColor) {\n    this._defaultColor = defaultColor;\n    this.update();\n  }\n\n  get defaultColor() {\n    return this._defaultColor;\n  }\n\n  set activeColor(activeColor) {\n    this._activeColor = activeColor;\n    this.update();\n  }\n\n  get activeColor() {\n    return this._activeColor;\n  }\n\n  set hoverColor(hoverColor) {\n    this._hoverColor = hoverColor;\n    this.update();\n  }\n\n  get hoverColor() {\n    return this._hoverColor;\n  }\n\n  set selectedColor(selectedColor) {\n    this._selectedColor = selectedColor;\n    this.update();\n  }\n\n  get selectedColor() {\n    return this._selectedColor;\n  }\n\n  set showVoxel(showVoxel) {\n    this._showVoxel = showVoxel;\n    this.update();\n  }\n\n  get showVoxel() {\n    return this._showVoxel;\n  }\n\n  set showDomSVG(showDomSVG) {\n    this._showDomSVG = showDomSVG;\n    this.update();\n  }\n\n  get showDomSVG() {\n    return this._showDomSVG;\n  }\n\n  set showDomMeasurements(showDomMeasurements) {\n    this._showDomMeasurements = showDomMeasurements;\n    this.update();\n  }\n\n  get showDomMeasurements() {\n    return this._showDomMeasurements;\n  }\n}\n"]}